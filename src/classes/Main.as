package {    import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.net.*;	import flash.utils.*;	import flash.external.ExternalInterface;	//import mx.controls.Alert;	//import mx.events.CloseEvent;	import common.AlertManager; 	import flash.errors.ScriptTimeoutError;	import caurina.transitions.*;	import partition.*;	import window.*;	import window.video.*;	import window.chat.*;	import window.setting.*;	import window.video.list.*;	import window.whiteboard.*;	import window.header.*;	import window.file.*;	import window.questionnaire.*;	import window.systemlog.*;	import common.*;	import window.quicklist.*;	import window.joinLog.*;	import net.hires.debug.Stats;	import flash.system.System;	import flash.system.Capabilities;	import fl.controls.CheckBox;	public class Main extends Sprite {						static public var DEBUG:Boolean = false;		static public var DEBUG_ALERT:Boolean = false;				//static public var DEBUG_SO_WATCH:Boolean = false; // system_logに全soの変更状況を書き出す				static public var DEBUG_CANSEL_TIMER:Boolean = false;		static public var DEBUG_CANSEL_ENTERFRAME:Boolean = false;		static public var DEBUG_CANSEL_TIMER_STREAMCHECKER:Boolean = false;				private const CANSEL_0916:Boolean = true;				static public var SHOW_LIVE_DELAY_TEXT:Boolean = false;				static public var USE_H264:Boolean = false; // H264配信をするか		private const AUTO_RELOGIN:Boolean = false; // 退席判定されたときに自動再入室するか				static public var USE_RECEIVE_IDLE_CHECK_BY_STU:Boolean = false; // 受講生が受信不具合を検知して講師に再配信させるか		static public var USE_RECEIVE_IDLE_CHECK_BY_LEC:Boolean = false; // 講師が受講生の受信不具合を検知して受講生に再配信させるか		private var REPUBLISH_WITH_ALERT:Boolean = false; // 受講生が受信不具合を検知して講師に再配信させる際、講師画面でアラートを出すか		private var ADDLOG_AFTER_REPUBLISH:Boolean = false; // 講師or受講生が受信不具合を検知して再配信した後、チャットとアクションログに書き込みするか				// HeaderContentsLecturerのonItemRollOver()とonItemRollOut()と		// ToolchipBtnsのonShowPanel()とonHidePanel()と		// ToolchipBtnsのonItemRollOver()とonItemRollOut()と		// BgSelectorのonItemRollOver_comboImg()とonItemRollOut_comboImg()と		// ToolModeDetailのonItemRollOver()とonItemRollOut()と		// PartitionのonEnterFrame()のカーソル切り替え表示時に参照される		static public var DROP_OPENED:Boolean = false;				static public var USE_VIDEO:Boolean = false; //"講師映像";		static public var USE_QUICK:Boolean = false; //"受講生クイック一覧";		static public var USE_CHAT:Boolean = true; //"チャットとアクションログ";		static public var USE_WHITEBOARD:Boolean = false; //"ホワイトボード";		static public var USE_MEMBER:Boolean = false; //"受講生一覧";		protected var USE_MEMBER_VOICE:Boolean = false; // 録画用		static public var USE_SETTING:Boolean = true; //"環境設定";		static public var USE_Q:Boolean = true; //"アンケート";		static public var USE_SEND:Boolean = true; //"ファイル送信";		static public var USE_RECEIVE:Boolean = true; //"受信ファイル";		static public var USE_CHAT_STU:Boolean = false; //"個別チャット";		static public var USE_JOIN_LOG_VIEW:Boolean = false; //入室ログ（入室視聴者）ビュー		private var USE_VIDEO_CTL:Boolean = false; // 受講生用						static public const DARK_BLUE:uint = 0x1A328C;		static public const LIGHT_BLUE:uint = 0x50ADE8;		static public const LIGHT_BLUE_B:uint = 0x1a76d3;		static public const LIGHT_BLUE_C:uint = 0xf8fbfd;		static public const LIGHT_GREEN:uint = 0xa0d55f;		static public const BROWN:uint = 0xAF9579;		static public const ORANGE:uint = 0xFF9726;		static public const BEIGE:uint = 0xFCF7ED;		static public const BEIGE_01:uint = 0xd6c9ba;		static public const BEIGE_02:uint = 0xbcad9c;		static public const BEIGE_03:uint = 0xE8DBC8;				static public const MAIN_COLOR_01:uint = 0xd2e5f1;//BROWN;		static public const MAIN_COLOR_02:uint = LIGHT_BLUE;		static public const MAIN_COLOR_03:uint = LIGHT_BLUE_B;		static public const BASE_COLOR_01:uint = LIGHT_BLUE_C;		static public const BASE_COLOR_02:uint = BEIGE_03;						static public const LEFT_RIGHT:Boolean = true;		static public const TOP_BTM:Boolean = false;				static public const TITLE_BAR_H = TitleBar.H + 1;static public const TMP_ADD_H = 290;				static public var W:Number = 800;//1044;		static public var H:Number = 600;//950 + TMP_ADD_H;		static public const HEADER_H:Number = 45;		static public const HEADER_H_WB:Number = 40;		static public var BODY_H:Number = H - HEADER_H - Partition.W;		static public var SUB_W:Number = 195;		static public var MAIN_W:Number = W - SUB_W - Partition.W;		static public var VIDEO_H:Number = 245;		static public const VIDEO_H_LEC:Number = 250;		static public var WB_H:Number = 505 + TMP_ADD_H;		static public var PARTITION_Y__WB_MAIN:Number = 652;		static public var PARTITION_Y__WB_FULL:Number = 816;		static public const SUB_H:Number = 350;		protected const HEADER_WMIN_WB:Number = 814;				static public const TERMINAL_PC:String = "pc";		static public const TERMINAL_ANDROID:String = "android";				// 定数読み込み		static public var LANG:LoadLang = null;		static public var CONF:LoadConf = null;		protected var vars:Object = loaderInfo.parameters;		protected var UID_ORG:String = vars["uid_org"];		protected var USE_CONNECT_PARAM_ARR:Boolean = true;//vars["ios"]?( ( String(vars["ios"]) == "1" || String(vars["ios"]) == "true") ? false : true):true;	// ポート切替するか		protected var TEXT_URL:String = vars["text_url"]?vars["text_url"]:"";	// text.xml の絶対パス		protected var LANG_TYPE:String = vars["language"]?vars["language"]:"japanese";	// 言語の指定。		protected var CONF_URL:String = vars["conf_url"]?vars["conf_url"]:"";	// getparam.php の絶対パス		protected var CLASS_ID:String = vars["class_id"]?vars["class_id"]:"";	// class_id		protected var VIEW_TYPE:int = vars["type"]?vars["type"]:1;	// type（録画用swfの場合に使用する）		protected var VIEW_MEMBERLIST_URL:String = vars["memberlist_url"]?vars["memberlist_url"]:"";// getViewMember.php の絶対パス録画用swfの場合に使用する）		protected var UID:String = vars["uid_4_filename"]?vars["uid_4_filename"]:"";　// uid		private var IP:String = vars["ip"]?vars["ip"]:"";	// ip		protected var TERMINAL:String = vars["terminal"]?vars["terminal"]:TERMINAL_PC;		protected var ALERT:Boolean = vars["alert"]?( ( String(vars["alert"]) == "1" || String(vars["alert"]) == "true") ? true : false):false;	// デバッグ用		protected var CAMERA_QUALITY:Number = vars["camera_quality"]?vars["camera_quality"]:80;	// カメラクオリティ（デバッグ用？）		//private var AUDIO_CODEC_SPEEX:Number = vars["speex"]?( String(vars["speex"])=="1"?1:0):0;	// 音声コーデック		//protected var BUFFER_TIME:Number = vars["buffer_time"]?(vars["buffer_time"] != "" ? Number( vars["buffer_time"]):0):0;	// バッファタイム（デバッグ用？）		protected var m_errMsg:TextField = null;				protected var mc_loading:NowLoading = null;				protected var m_rWinArr:RWinArr; // リサイズウィンドウ（個々のコンテンツ）の配列		static public var POPUP_CONTAINER:PopupContainer = null; // ポップアップコンテナ		protected var m_partitionDragManager:PartitionDragManager;				//protected var m_all_base:PartitionContainer_allBase = null;		protected var m_all_base:PartitionContainer = null;		static public var HEADER_CON/*:HeaderContents*/;		protected var m_headerWin:ResizableWindow; // ヘッダー		protected var m_videoCtl:StuVideoControl = null; // 生徒用の、ビデオ配信するクラス		protected var m_proVideoWin:ResizableWindow; // 講師映像		protected var m_proVideo:ProVideo; // 講師映像		protected var m_wbVideo:WbVideo; // WBユーザ映像		protected var m_quickWin:ResizableWindow; // 受講生クイック一覧		protected var m_quickCon:QuickListContainer = null;		protected var m_chatWin:ResizableWindow; // チャットウィンドウ		protected var m_chatCon:ChatContainer; // チャットコンテナ		static public var m_wbWin/*:WhiteboardWindow*/; // ホワイトボード		protected var m_wbCon:WhiteboardContainer; // ホワイトボードコンテな		protected var m_settingCon:SettingContents; // 環境設定コンテンツ		protected var m_sendCon:SendContainer; // ファイル送信		protected var m_rcvCon:ReceiveContainer; // 受信ファイル一覧		protected var m_chatStuCon:ChatContainer; // 個別チャット		protected var m_listWin:ResizableWindow; // 受講生一覧		protected var m_listCon:ListContainer = null;		private var m_joinLogCon:JoinLogCon = null;		private var m_popupMemberSettingWin:ResizableWindow; // 講師用 詳細設定ポップアップWindow		private var m_popupChatWin:ResizableWindow; // 講師用 個別チャットポップアップWindow		static protected var m_qWin:ResizableWindow;		protected var m_qCon; // アンケート		protected var m_memberVoice:MemberVoice; // 録画用、生徒の声だけ		static protected var m_nowLayout:Layout = null; // 現在の画面レイアウト		protected var m_beforePopupSize:Object = new Object();		private var m_systemlogWin:ResizableWindow; // システムログ		static protected var m_systemlogCon:SystemLogCon = new SystemLogCon();; // システムログ		private var m_memberSettingConCon:MemberSettingContentsCon = null;		protected var m_memberSettingConArr:Array = null;				//ネットコネクション		protected var m_nc:NetConnection = null;		protected var m_receive_ns_arr:Array = null;		protected var CONNECT_PARAM_ARR:Array;		protected var i_CONNECT_PARAM_ARR:uint = 0;		private var m_reconnecting:Boolean = false;		private var m_command:String;		private var m_acceptClose:Boolean = false;		// 共有オブジェクト		protected var so_join:SharedObject = null; // 参加／不参加共有用		protected var so_here:SharedObject = null; // 挙手関係（挙手待ちリストhereFlagと、被指名者named_uid）		protected var so_volume:SharedObject = null; // 音量		protected var so_layout:SharedObject = null; // 画面レイアウト共有		protected var so_layoutHashArr:SharedObject = null; // 全画面レイアウト情報（ハッシュ）の配列共有		protected var so_firstJoinTime:SharedObject = null; // 自分以外が最初に参加した日時		protected var so_evict:SharedObject = null; // 強制退去指令。講師が環境設定より発令する		protected var so_republish:SharedObject = null; // 配信のやり直し指令。講師が環境設定より発令する		protected var so_videoBug:SharedObject = null; // 映像不具合。obj.nameが不具合対象者、値が報告者		protected var so_terminal:SharedObject = null; // 使用端末共有用		private var so_rcvBufferTime:SharedObject = null;		private var so_log:SharedObject = null; // 講師用の個別アクションログ		private var so_uid_hash:SharedObject = null; // キーがuid_4_filename（md5(uid)）、値が生のuid						static private var so_permanent_log:SharedObject = null; // バグ検証用の永久保存用ログ（録画ボタンクリックとか）						protected var m_memberSoWatcher:MemberSoWatcher = null; // 講師用		protected var m_streamChecker = null; // 自分以外のストリーム受信状態のチェック用				// ライブステータス管理（参加退席とか挙手とか）		protected var m_liveStatusManager:LiveStatusManager = null;				static public var MOUSE_MANAGER:MouseManager = null;		static public var STARTTIME:Number;static public var PREVTIME:Number;		        public function Main() {			if( m_errMsg == null) m_errMsg = TextField( addChild( new TextField()));			m_errMsg.autoSize = TextFieldAutoSize.LEFT;			m_errMsg.defaultTextFormat = new TextFormat( null, 9, 0xcc0000);			m_errMsg.text = "";			//return;			PREVTIME = STARTTIME = getTimer();			DEBUG = DEBUG_ALERT = ALERT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						stage.addEventListener( Event.RESIZE, onResize);						NetConnection.defaultObjectEncoding = ObjectEncoding.AMF0;			SharedObject.defaultObjectEncoding = ObjectEncoding.AMF0;			mc_loading = NowLoading( addChild( new NowLoading()));			mc_loading.x = ( stage.stageWidth - mc_loading.width) / 2;			mc_loading.y = 400;						if( Capabilities.isDebugger) {				TEXT_URL = "http://localhost/b2b/ezvc/httpdocs/fms/0916live/jp.xml";	// text.xml の絶対パス				LANG_TYPE = "japanese";	// 言語の指定。				CONF_URL = "http://localhost/b2b/ezvc/httpdocs/fms/0916live/getparam.php";					CLASS_ID = "test_class_10";	// class_id				//UID_ORG = "lecturer";	// uid				//UID = "b06febcfbc00db4f67aed9234e3e52b0";				UID_ORG = "&quot;;alert(document.cookie);&quot;";	// uid				UID = "md5_flash_debug_xxxxxxxxx";				DEBUG = true;				USE_CONNECT_PARAM_ARR = true;			}						if( CONF_URL == "" || CLASS_ID == "" || UID == "" || UID_ORG == "" || LANG_TYPE == "" || TEXT_URL == "") {				m_errMsg.text = "ERROR: Please set flashvars: conf_url, class_id, uid_org, uid_4_filename, language, text_url";				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "ERROR: Please set flashvars: conf_url, class_id, uid, language, text_url");				AlertManager.createAlert( this ,"ERROR: Please set flashvars: conf_url, class_id, uid, language, text_url");				LANG = new LoadLang( LANG_TYPE, TEXT_URL);				LANG.addEventListener( LoadLang.LOAD_COMPLETE, function( e:*) {					CONF = new LoadConf( CONF_URL, CLASS_ID, UID, UID_ORG);					CONF.TERMINAL = TERMINAL;					CONF.CAMERA_QUALITY = CAMERA_QUALITY;					//CONF.BUFFER_TIME = BUFFER_TIME;					//CONF.AUDIO_CODEC_SPEEX = AUDIO_CODEC_SPEEX;					init();				});			} else {	var now:Date = new Date();var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());checkRunTime( hour + ":" + min +" loading language.xml");						LANG = new LoadLang( LANG_TYPE, TEXT_URL);				LANG.addEventListener( LoadLang.LOAD_COMPLETE, function( e:*) {checkRunTime( Main.LANG.getParam( "言語ファイル読み込み完了、定数ファイル読み込み開始"));								// 外部PHPファイルから定数読み込み					CONF = new LoadConf( CONF_URL, CLASS_ID, UID, UID_ORG);					CONF.TERMINAL = TERMINAL;					CONF.CAMERA_QUALITY = CAMERA_QUALITY;					//CONF.BUFFER_TIME = BUFFER_TIME;					//CONF.AUDIO_CODEC_SPEEX = AUDIO_CODEC_SPEEX;					CONF.addEventListener( LoadConf.LOAD_COMPLETE, onLoadConf);										CONF.addEventListener(IOErrorEvent.IO_ERROR, function( e:*) {						m_errMsg.text = "IO_ERROR: " + CONF_URL;					});					CONF.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function( e:*) {						m_errMsg.text = "SECURITY_ERROR: " + CONF_URL;					});				});								LANG.addEventListener(IOErrorEvent.IO_ERROR, function( e:*) {					m_errMsg.text = "IO_ERROR: " + TEXT_URL;				});				LANG.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function( e:*) {					m_errMsg.text = "SECURITY_ERROR: " + TEXT_URL;				});							}									addChild( m_errMsg);						MOUSE_MANAGER = new MouseManager( stage);					}				protected function onLoadConf( e:Event = null):void {checkRunTime( Main.LANG.getParam("定数ファイル読み込み完了、初期化開始"));						m_errMsg.text = "";						if( CONF.getParam( "AVAILABLE") == "0") {				if(  CONF.isStudent( Main.CONF.UID)) {					AlertManager.createAlert( this , Main.LANG.getParam( "ライブ授業は終了しています"));					m_errMsg.text = Main.LANG.getParam( "ライブ授業は終了しています");					if( mc_loading != null && contains( mc_loading)) removeChild( mc_loading);					return;				}			}						CONNECT_PARAM_ARR = CONF.getConnectParamArr();						if( ! CONF.isPro( UID)) {				USE_SETTING = false;				USE_QUICK = false;				USE_JOIN_LOG_VIEW = false;			}			if( ! CONF.isStudent( UID)) {				USE_CHAT_STU = false;			}			if( UID == CONF.getWhiteboardUID()) {				USE_Q = false;				USE_SEND = false;				USE_RECEIVE = false;				USE_MEMBER = false;			}			if( CONF.isStudent( UID)) {				USE_H264 = false;			}			init();checkRunTime( Main.LANG.getParam("初期化完了、サーバ接続準備開始"));						addEventListener( Event.ENTER_FRAME, onceFunc_connect);		}		function onceFunc_connect( e:Event) {			removeEventListener( Event.ENTER_FRAME, onceFunc_connect);			connect();		}		protected function init() {			init_1st();				// コンテンツ生成			if( USE_VIDEO) init_proVideo();			else m_rWinArr.push( createDummyResizableWindow(), Layout.WINNAME_VIDEO);							if( USE_CHAT) init_chat();						// 右カラムのコンテンツ生成			if( USE_WHITEBOARD) init_wb();					checkRunTime( Main.LANG.getParam("初期化チェックポイント: 受講生一覧の初期化開始"));			if( USE_MEMBER) init_list();			if( USE_MEMBER_VOICE) m_memberVoice = new MemberVoice();			checkRunTime( Main.LANG.getParam("初期化チェックポイント: 受講生一覧の初期化完了"));					var settingWin = null;						if( USE_SETTING) settingWin = init_setting();			if( USE_Q) m_qWin = init_q();			var sendWin = null;			if( USE_SEND) sendWin = init_send();			var rcvWin = null;			if( USE_RECEIVE) {				rcvWin = init_rcv();				if( CONF.isPro( UID)) {					m_sendCon.setRcvCon( m_rcvCon);				}			}			var chatStuWin = null;			if( USE_CHAT_STU) chatStuWin = init_chatStu();						var joinLogWin = null;			if( USE_JOIN_LOG_VIEW) joinLogWin = init_joinLogView();						if( USE_QUICK) init_quick();			else m_rWinArr.push( createDummyResizableWindow(), Layout.WINNAME_QUICK);//return;						//init_header( settingWin, m_qWin, sendWin, rcvWin, chatStuWin, joinLogWin);			init_last();									if( mc_loading != null && contains( mc_loading)) removeChild( mc_loading);						onResize();		}				function init_1st() {			m_rWinArr = new RWinArr();						if( CONF.isPro( UID)) {				m_memberSoWatcher = new MemberSoWatcher();				VIDEO_H = VIDEO_H_LEC;			}			m_liveStatusManager = new LiveStatusManager();						m_wbVideo = new WbVideo();			//m_wbVideo.addEventListener( WbVideo.WB_STREAM_CHANGED, onChangeWbStream);						if( CONF.isPro( UID)) {				m_streamChecker = new StreamChecker_lec();				m_streamChecker.addEventListener( StreamCheckerEvent.STATUS_ALIVE, onStatusChange);				m_streamChecker.addEventListener( StreamCheckerEvent.STATUS_DIE, onStatusChange);			} else {				m_streamChecker = new StreamChecker_stu();			}						m_systemlogWin = new ResizableWindow( 100, 100, 0, 0);			m_systemlogWin.setTitleBar( getTitle( Layout.WINNAME_SYSTEMLOG));			m_systemlogWin.setContents( m_systemlogCon);			m_rWinArr.push( m_systemlogWin, Layout.WINNAME_SYSTEMLOG);					}		protected function init_proVideo() {			// 講師ビデオ			m_proVideoWin = new ResizableWindow( SUB_W, VIDEO_H, 0, TITLE_BAR_H, 0xcccccc);				// 講師映像			m_proVideo = new ProVideo( SUB_W, VIDEO_H, USE_CONNECT_PARAM_ARR);						if( CONF.isPro( UID)) {				m_proVideo.setRec( SettingContents.INIT_REC_TYPE);				m_proVideo.addEventListener( ProVideo.START_RECORD, onStartRecord);				m_proVideo.addEventListener( ProVideo.STOP_RECORD, onStopRecord);			}					// タイトルバーコンテンツ			var videoWinTitleBarCon:TitleBarContents = new TitleBarContents();			if( ! CONF.isPro( UID)) videoWinTitleBarCon.addContents( m_proVideo.getFpsMeter());			videoWinTitleBarCon.addContents( getTitleBarText( Main.CONF.getName( Main.CONF.getProId())));			// タイトルバーコンテンツを設置			m_proVideoWin.setTitleBar( videoWinTitleBarCon, null);						m_proVideoWin.setContents( m_proVideo);						if( !USE_CONNECT_PARAM_ARR) m_proVideo.setRec( StreamComponents.REC_TYPE_0); // iOS配信用で、録画はできないので、録画ボタンを非表示に						m_rWinArr.push( m_proVideoWin, Layout.WINNAME_VIDEO);		}		function init_quick() {			//------------------------			// 受講生クイック一覧			m_quickWin = new ResizableWindow( SUB_W, SUB_H, 0, TITLE_BAR_H);			// 受講生クイック一覧のタイトルバーコンテンツ			var quickWinTitleBarCon:TitleBarContents = new TitleBarContents();			quickWinTitleBarCon.addContents( getTitleBarText( Layout.WINNAME_QUICK));			// 受講生クイック一覧にタイトルバーコンテンツを設置			m_quickWin.setTitleBar( quickWinTitleBarCon, null);			m_quickCon = m_quickWin.setContents( new QuickListContainer( SUB_W, 100));						m_rWinArr.push( m_quickWin, Layout.WINNAME_QUICK);									// 誰の名前がクリックされたのか判定し、対応するウィンドウをポップアップ			m_quickCon.addEventListener( MemberEvent.POPUP_SETTING, 											  function( e:MemberEvent) {												  for each( var rwin:ResizableWindow in m_rWinArr.getArr()) {													if( rwin.name == "PopupMemberSetting") {														// 別の詳細ポップアップが開いていたら、閉じる														if( m_popupMemberSettingWin.stage != null) {															m_popupMemberSettingWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));														}														// チャットポップアップが開いていたら、閉じる														if( m_popupChatWin.stage != null) {															m_popupChatWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));														}														rwin.changeTitleText( CONF.getName( e.uid));														// 中身を取得														for each( var msc:MemberSettingContents in m_memberSettingConArr) {															if( msc.getUid() == e.uid) {																m_memberSettingConCon.setContents( msc);																break;															}														}														rwin.callDispachPopup();														break;													}												  }												});												// 誰のチャットボタンがクリックされたのか判定し、対応するウィンドウをポップアップ			m_quickCon.addEventListener( MemberEvent.POPUP_SETTING_CHAT, 											  function( e:MemberEvent) {												  for each( var rwin:ResizableWindow in m_rWinArr.getArr()) {													if( rwin.name == "PopupChatWin") {														// 詳細ポップアップが開いていたら、閉じる														if( m_popupMemberSettingWin.stage != null) {															m_popupMemberSettingWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));														}														// 別のチャットポップアップが開いていたら、閉じる														if( m_popupChatWin.stage != null) {															m_popupChatWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));														}																													rwin.changeTitleText( Layout.WINNAME_CHAT_STU + " " + CONF.getName( e.uid));														// 中身を取得														for each( var msc:MemberSettingContents in m_memberSettingConArr) {															if( msc.getUid() == e.uid) {																ResizableChatWindow(rwin).shareChatCon( msc.getChatContainer());																break;															}														}														rwin.callDispachPopup();																												// チャットPopupボタンの点滅ストップ														if( m_quickCon) m_quickCon.stopBlinkChatBtn( e.uid);														if( m_listCon) m_listCon.stopBlinkChatBtn( e.uid);																												break;													}												  }												});		}		function onRcvChatFromStu( e:Event) {			var chatCon:ChatContainer = e.target as ChatContainer;			//if( POPUP_CONTAINER.isPopuped( chatCon.getPostUid() + "_chat")) return;			if( chatCon.stage != null)  return;			if( m_quickCon) m_quickCon.startBlinkChatBtn( chatCon.getPostUid());			if( m_listCon) m_listCon.startBlinkChatBtn( chatCon.getPostUid());		}		protected function init_chat() {			// チャットウィンドウ			m_chatWin = new ResizableWindow( SUB_W, SUB_H, 0, TITLE_BAR_H, 0xf0f0f0);			// チャットウィンドウのタイトルバーコンテンツ			var chatWinTitleBarCon:TitleBarContents = new TitleBarContents();			chatWinTitleBarCon.addContents( getTitleBarText( Layout.WINNAME_CHAT));									// チャットウィンドウにタイトルバーコンテンツを設置			m_chatWin.setTitleBar( chatWinTitleBarCon, null);			m_chatCon = new ChatContainer_all( SUB_W, SUB_H);			m_chatWin.setContents( m_chatCon);						m_rWinArr.push( m_chatWin, Layout.WINNAME_CHAT);		}					protected function init_wb() {			//------------------------			// ホワイトボード			m_wbWin = new WhiteboardWindow( MAIN_W, WB_H, 0, 0);			m_wbCon = new WhiteboardContainer( MAIN_W, WB_H - TitleBar.H - 1);			// ホワイトボードにタイトルバーコンテンツを設置					// popupReq：ポップアップボタンクリック時に、別ウィンドウを開きたい場合は設定する			var popupReq:URLRequest = null;			// usePopup：ポップアップボタンを表示するか否か			var usePopup:Boolean = true;			// titleLeft_unauthorized : タイトルバーの第二のleftContents。権限を持たない場合などの。			//var titleLeft_unauthorized:TitleBarContents = null;			if( CONF.isPro( UID)) {				// ポップアップ先の設定				popupReq = getUrlReq();			} else if( UID == CONF.getWhiteboardUID()) {				usePopup = false;			} else {				//titleLeft_unauthorized = new TitleBarContents();				//titleLeft_unauthorized.addContents( getTitleBarText( "ホワイトボード"));			}			m_wbWin.setTitleBar( m_wbCon.getToolchipBtns(), ( CONF.isStudent( UID)) ? null : m_wbCon.getBgSelector(), popupReq, usePopup);			m_wbWin.setContents( m_wbCon);			m_wbWin.watchToolchipPanel( m_wbCon.getToolchipBtns());						m_rWinArr.push( m_wbWin, Layout.WINNAME_WHITEBOARD);			m_rWinArr.push( m_wbCon.getImgdocWin(), Layout.SUB_WINNAME_WHITEBOARD_IMGDOC);						// 何のボタンがクリックされたのか判定し、対応するウィンドウをポップアップ			m_wbCon.addEventListener( BgSelector.POPUP_CLICKED, 					  function( e:HeaderEvent) {						  switch( e.winname) {							// 環境設定ボタン							case Layout.SUB_WINNAME_WHITEBOARD_IMGDOC: m_wbCon.getImgdocWin().callDispachPopup(); break;						  }						});						if( CONF.isPro( UID) && USE_VIDEO) {				m_wbCon.addEventListener( WhiteboardContainer.FORCE_CAMERA_ON,					 function( e:*) {						 m_proVideo.forceCameraOn();					 });			}		}				function getUrlReq( w:String = "100%", h:String = "100%"):URLRequest {			var popupReq:URLRequest = new URLRequest( "webseminar_wb.php");			popupReq.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.uid = CONF.getWhiteboardUID();			variables.class_id = CONF.CLASS_ID;			variables.w = w;			variables.h = h;			variables.camera_quality = CAMERA_QUALITY;			variables.alert = ALERT;			variables.ios = !USE_CONNECT_PARAM_ARR;			popupReq.data = variables;			return popupReq;		}				protected function init_list() {			// 受講生一覧			m_listWin = new ResizableWindow( MAIN_W, BODY_H - WB_H, 0, 0);			m_listCon = new ListContainer( 100, 100, getTitleBarText( Layout.WINNAME_MEMBER));			m_listWin.setTitleBar( m_listCon.getTitlebar(), null);			m_listWin.setContents( m_listCon);						m_rWinArr.push( m_listWin, Layout.WINNAME_MEMBER);						if( CONF.isPro( UID)) {							// 全員分の詳細設定（個別のコンテナの詳細ボタンにてポップアップさせる用）				// SOの監視と、DB/Main.CONFへの反映をやる。				m_popupMemberSettingWin = new ResizableWindow( 100, 100);				m_popupMemberSettingWin.setTitleBar( getTitle( "dummy"));				m_popupMemberSettingWin.name = "PopupMemberSetting";				m_memberSettingConCon = new MemberSettingContentsCon( 100, 100);				m_popupMemberSettingWin.setContents( m_memberSettingConCon);				 //m_memberSettingConCon.addEventListener( SettingContents.STU_RECEIVE_SETTING_CHANGED, onStuReceiveSettingChanged);				m_rWinArr.push( m_popupMemberSettingWin, "PopupMemberSetting");					m_memberSettingConArr = new Array();				var memberArr:Array = CONF.getMemberArr();				var member:Member;				for each( member in memberArr) {					if( CONF.isPro( member.uid)) continue;										var memberSettingCon = new MemberSettingContents( member.uid);						m_memberSettingConArr.push( memberSettingCon);										// 受講生からチャットが届くのをリッスン					var chatCon:ChatContainer = memberSettingCon.getChatContainer();					chatCon.addEventListener( "receive message", onRcvChatFromStu);										//m_rWinArr.push( m_popupMemberSettingWin, member.uid);										//memberSettingCon.addEventListener( SettingContents.STU_RECEIVE_SETTING_CHANGED, onStuReceiveSettingChanged);				}								// 全受講生の個別チャットポップアップ用ウィンドウをm_rWinArrにpush				m_popupChatWin = new ResizableChatWindow();				m_popupChatWin.setTitleBar( getTitle( "dummy"));				m_popupChatWin.name = "PopupChatWin";				m_rWinArr.push( m_popupChatWin, "PopupChatWin");									// 誰の名前がクリックされたのか判定し、対応するウィンドウをポップアップ				m_listCon.addEventListener( MemberEvent.POPUP_SETTING, 												  function( e:MemberEvent) {													  for each( var rwin:ResizableWindow in m_rWinArr.getArr()) {														if( rwin.name == "PopupMemberSetting") {																														// 別の詳細ポップアップが開いていたら、閉じる															if( m_popupMemberSettingWin.stage != null) {																m_popupMemberSettingWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));															}															// チャットポップアップが開いていたら、閉じる															if( m_popupChatWin.stage != null) {																m_popupChatWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));															}																														rwin.changeTitleText( CONF.getName( e.uid));															// 中身を取得															for each( var msc:MemberSettingContents in m_memberSettingConArr) {																if( msc.getUid() == e.uid) {																	m_memberSettingConCon.setContents( msc);																	break;																}															}															rwin.callDispachPopup();															break;														}													  }													});								// 誰のチャットボタンがクリックされたのか判定し、対応するウィンドウをポップアップ				m_listCon.addEventListener( MemberEvent.POPUP_SETTING_CHAT, 												  function( e:MemberEvent) {													  for each( var rwin:ResizableWindow in m_rWinArr.getArr()) {														if( rwin.name == "PopupChatWin") {															// 詳細ポップアップが開いていたら、閉じる															if( m_popupMemberSettingWin.stage != null) {																m_popupMemberSettingWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));															}															// 別のチャットポップアップが開いていたら、閉じる															if( m_popupChatWin.stage != null) {																m_popupChatWin.dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));															}																														rwin.changeTitleText( Layout.WINNAME_CHAT_STU + " " + CONF.getName( e.uid));															// 中身を取得															for each( var msc:MemberSettingContents in m_memberSettingConArr) {																if( msc.getUid() == e.uid) {																	ResizableChatWindow(rwin).shareChatCon( msc.getChatContainer());																	break;																}															}															rwin.callDispachPopup();																														// チャットPopupボタンの点滅ストップ															if( m_quickCon) m_quickCon.stopBlinkChatBtn( e.uid);															if( m_listCon) m_listCon.stopBlinkChatBtn( e.uid);																														break;														}													  }													});			}		}				// Main_lec_07がoverride		protected function init_setting():ResizableWindow {			// 環境設定ウィンドウ			var settingWin:ResizableWindow = new ResizableWindow( 100, 100);			settingWin.setTitleBar( getTitle( Layout.WINNAME_SETTING));			var settingContents:SettingContents = new SettingContents( 100, 100, USE_CONNECT_PARAM_ARR);			m_settingCon = settingWin.setContents( settingContents);			m_rWinArr.push( settingWin, Layout.WINNAME_SETTING);						if( CONF.isPro( UID)) {				settingContents.addEventListener( LayoutEvent.ADD_NEW_LAYOUT, onAddNewLayout);				settingContents.addEventListener( SettingContents.LEC_REPUBLISH_BTN_CLICKED, onLecRepublishBtnClicked);				settingContents.addEventListener( SettingContents.STU_REPUBLISH_BTN_CLICKED, onStuRepublishBtnClicked);				settingContents.addEventListener( SettingContents.STU_EVICTED_BTN_CLICKED, onStuEvictedBtnClicked);				//settingContents.addEventListener( SettingContents.STU_RECEIVE_SETTING_CHANGED, onStuReceiveSettingChanged);				settingContents.addEventListener( SettingContents.LEC_REC_TYPE_CHANGED, onLecRectypeChanged);			}						return settingWin;		}		function onLecRectypeChanged( e:Event) {			// 変更が合った場合、いったん録画は止まる			var changed:Boolean = m_proVideo.setRec( SettingContents( e.target).getLecRecType()); 			if( changed) {				addDebugMsg( "Main.onLecRectypeChanged() " + SettingContents( e.target).getLecRecType());			}		}		/*		//講師用関数		function onStuReceiveSettingChanged( e:Event) {			if( so_rcvBufferTime == null) return;			var settingContents:SettingContents = e.target as SettingContents;			var memberSettingContentsCon:MemberSettingContentsCon = e.target as MemberSettingContentsCon;			if( settingContents != null) {								for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {					so_rcvBufferTime.setProperty( settingCon.getUid(), settingContents.getBufferTime());					settingCon.setBufferTime( Number( settingContents.getBufferTime()));				}								so_rcvBufferTime.setProperty( CONF.getViewUID(), settingContents.getBufferTime());							} else if( memberSettingContentsCon != null) {				so_rcvBufferTime.setProperty( memberSettingContentsCon.getUid(), memberSettingContentsCon.getBufferTime());			}		}		*/		protected function init_q():ResizableWindow {			// アンケート			var qWin:ResizableWindow = new ResizableWindow( 100, 100, 0, 0);			qWin.setTitleBar( getTitle( Layout.WINNAME_Q));			if( CONF.isPro( UID)) m_qCon = new QContentsLecturer( 100, 100);			else m_qCon = new QContentsStudent( 100, 100);			qWin.setContents( m_qCon);			m_rWinArr.push( qWin, Layout.WINNAME_Q);						return qWin;		}		function init_send():ResizableWindow {			// ファイル送信			var sendWin:ResizableWindow = new ResizableWindow( 100, 100);			sendWin.setTitleBar( getTitle( Layout.WINNAME_SEND));			m_sendCon = new SendContainer( 100, 100);			sendWin.setContents( m_sendCon);			m_rWinArr.push( sendWin, Layout.WINNAME_SEND);			return sendWin;		}		function init_rcv():ResizableWindow {			// 受信ファイル			var rcvWin:ResizableWindow = new ResizableWindow( 100, 100, 0, 0);			rcvWin.setTitleBar( getTitle( Layout.WINNAME_RECEIVE));			m_rcvCon = new ReceiveContainer( 100, 100);			rcvWin.setContents( m_rcvCon);			m_rWinArr.push( rcvWin, Layout.WINNAME_RECEIVE);			return rcvWin;		}		function init_chatStu():ResizableWindow {			// 個別チャット			var chatStuWin:ResizableChatWindow = new ResizableChatWindow();			chatStuWin.setTitleBar( getTitle( Layout.WINNAME_CHAT_STU));			m_chatStuCon = new ChatContainer( 100, 100, "chat", UID);			chatStuWin.setContents( m_chatStuCon);			m_rWinArr.push( chatStuWin, Layout.WINNAME_CHAT_STU);			return chatStuWin;		}		function init_joinLogView():ResizableWindow {			// 入室ログ（入室視聴者）ビュー			var joinLogWin:ResizableWindow = new ResizableWindow( 100, 100);			joinLogWin.setTitleBar( getTitle( Layout.WINNAME_JOINLOG));			m_joinLogCon = new JoinLogCon();			joinLogWin.setContents( m_joinLogCon);			m_rWinArr.push( joinLogWin, Layout.WINNAME_JOINLOG);			return joinLogWin;		}		protected function init_header( settingWin:ResizableWindow, qWin:ResizableWindow, sendWin:ResizableWindow, rcvWin:ResizableWindow, chatStuWin:ResizableWindow, joinLogWin:ResizableWindow) {			// ヘッダーカラム						if( CONF.isPro( UID)) {				// 講師のヘッダーカラム				m_headerWin = new ResizableWindow( W, HEADER_H, W, HEADER_H, 0xf2f2f2);				HEADER_CON = new HeaderContentsLecturer( W, HEADER_H, ( USE_VIDEO) ? m_proVideo.getBtnRecLec():null, USE_CONNECT_PARAM_ARR);				var layoutArr:Array = CONF.getLayoutArr();				for each( var layout:Layout in layoutArr) {					HEADER_CON.addComboItem( layout.name);				}								HEADER_CON.addEventListener( HeaderContents.MODE_CHANGE, onLayoutChange);				HEADER_CON.addEventListener( HeaderContentsLecturer.FINISH_BTN_CLICKED, onFinishBtnClicked);				HEADER_CON.addEventListener( HeaderContents.RESET_LAYOUT, function( e:*){												  // 画面レイアウトをリセット												  onLayoutChange();												  //onResize();												  //m_partitionDragManager.onAutoResize();												});							} else if( UID == CONF.getWhiteboardUID()) {				// WBユーザのヘッダーカラム				m_headerWin = new ResizableWindow( W, HEADER_H_WB, HEADER_WMIN_WB, HEADER_H_WB, 0xf2f2f2);				HEADER_CON = new HeaderContentsWb( W, HEADER_H_WB, m_wbVideo);			} else {				// 受講生のヘッダーカラム				m_headerWin = new ResizableWindow( W, HEADER_H, W, HEADER_H, 0xf2f2f2);				//m_videoCtl = new StuVideoControl( UID); // 自分自身のビデオコントロール				HEADER_CON = new HeaderContentsStudent( W, HEADER_H);				HEADER_CON.addEventListener( HeaderContents.RESET_LAYOUT,											  function( e:*){												  // 画面レイアウトをリセット												  changeStuLayout( m_nowLayout.name);												  onResize();												});			}			// 何のボタンがクリックされたのか判定し、対応するウィンドウをポップアップ			HEADER_CON.addEventListener( HeaderContents.POPUP_CLICKED, 											  function( e:HeaderEvent) {												  switch( e.winname) {													// 環境設定ボタン													case Layout.WINNAME_SETTING: settingWin.callDispachPopup(); break;													// 受講生一覧													case Layout.WINNAME_MEMBER: m_listWin.callDispachPopup(); break;													// アンケート													case Layout.WINNAME_Q: qWin.callDispachPopup(); break;													// ファイル送信													case Layout.WINNAME_SEND: sendWin.callDispachPopup(); break;													// 受信ファイル													case Layout.WINNAME_RECEIVE: rcvWin.callDispachPopup(); break;													// 個別チャット													case Layout.WINNAME_CHAT_STU: chatStuWin.callDispachPopup(); break;													// 入室ログ（入室視聴者）													case Layout.WINNAME_JOINLOG: joinLogWin.callDispachPopup(); break;													// SYSTEMLOG													case Layout.WINNAME_SYSTEMLOG: m_systemlogWin.callDispachPopup(); break;												  }												});						HEADER_CON.addEventListener( "reconnect", onReconnect);									m_headerWin.setContents( HEADER_CON);									m_headerWin.setEnabled( true);		}				// 講師用関数 講師映像の録画開始ボタンがクリックされた		function onStartRecord( e:Event) {			if( m_nc) {				var recordOptions:Object = new Object();								// If not appending to the file do we want to version the old file				recordOptions.versionFile = true;								// Start on a key frame or start on first package (if audio only must be false)				recordOptions.startOnKeyFrame = true;								// Record data packets as well as audio/video packets (data packets are not recorded in mp4 format)				recordOptions.recordData = true; // Include cuepoints and metadata								if( USE_H264) recordOptions.format = 2;								switch( m_proVideo.getRecType()){					case StreamComponents.REC_TYPE_1: // 録画停止毎にファイルを分ける						recordOptions.append = false;						break;					case StreamComponents.REC_TYPE_2: // 録画ファイルをつなげる						// Append to current file if exists						recordOptions.append = true;						break;					default:						break;				}				m_nc.call( "startRecording", null, Main.CONF.UID, recordOptions);												addErrMsg( "onStartRecord append:" + recordOptions.append);								addPermanentLog( "講師映像録画：録画開始リクエスト送信", CONF.SO_PERMANENT_LOG_KEY__RECORD);								m_proVideo.sendMetaData();			} else {				addErrMsg( "cannot start record.");				addPermanentLog( "講師映像録画：録画開始リクエスト送信失敗（NetConnection is null.）", CONF.SO_PERMANENT_LOG_KEY__RECORD);			}		}		// 講師用関数 講師映像の録画終了ボタンがクリックされた		function onStopRecord( e:Event) {			if( m_nc) {				addErrMsg( "onStopRecord");				m_nc.call( "stopRecording", null, Main.CONF.UID);				addPermanentLog( "講師映像録画：録画終了リクエスト送信", CONF.SO_PERMANENT_LOG_KEY__RECORD);			} else {				addErrMsg( "cannot stop record. ( Maybe already stopped.)");				addPermanentLog( "講師映像録画：録画終了リクエスト送信失敗 ( Maybe already stopped.)", CONF.SO_PERMANENT_LOG_KEY__RECORD);			}		}				// 講師用関数 講師の配信やり直しボタンがクリックされた		function onLecRepublishBtnClicked( e:Event) {			if( so_republish != null) {				so_republish.setProperty( CONF.getProId(), "republishBtnClicked");				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getParam( "配信をやり直しします"));				AlertManager.createAlert( m_all_base ,Main.LANG.getParam( "配信をやり直しします"));			} else {				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、配信やり直しの処理ができません"));				AlertManager.createAlert( m_all_base , Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、配信やり直しの処理ができません"));			}		}		// 講師用関数 受講生全員の配信やり直しボタンがクリックされた		function onStuRepublishBtnClicked( e:Event) {			if( so_republish != null) {				for each( var member in CONF.getMemberArr()) {					if( CONF.isStudent( member.uid)) {						so_republish.setProperty( member.uid, "republishBtnClicked");					}				}				AlertManager.createAlert( m_all_base , Main.LANG.getParam( "受講生全員の配信をやり直しさせます"));			} else {				AlertManager.createAlert( m_all_base , Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、配信やり直しの処理ができません"));			}		}		// 講師用関数 受講生全員の強制退去ボタンがクリックされた		function onStuEvictedBtnClicked( e:Event) {			if( so_evict != null) {				for each( var member in CONF.getMemberArr()) {					if( CONF.isStudent( member.uid)) {						so_evict.setProperty( member.uid, "evictedBtnClicked");					}				}				AlertManager.createAlert( m_all_base ,Main.LANG.getParam( "受講生全員を強制退去させます"));			} else {				AlertManager.createAlert( m_all_base ,Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、強制退去の処理ができません"));			}		}				// 講師用関数 個別生徒の配信やり直しボタンがクリックされた		function onMemberRepublishBtnClicked( e:Event) {			var settingCon:MemberSettingContentsCon = MemberSettingContentsCon( e.target);			if( so_republish != null) {				so_republish.setProperty( settingCon.getUid(), "republishBtnClicked");				AlertManager.createAlert( m_all_base ,Main.LANG.getReplacedSentence( "%sの配信をやり直しさせます", Main.LANG.getReplacedSentence( "%sさん", CONF.getName( settingCon.getUid()))));			} else {				AlertManager.createAlert( m_all_base ,"共有オブジェクト取得に失敗しているため、配信やり直しの処理ができません");			}		}				// 講師用関数 個別生徒の強制退去ボタンがクリックされた		function onMemberEvictedBtnClicked( e:Event) {			var settingCon:MemberSettingContentsCon = MemberSettingContentsCon( e.target);			if( so_evict != null) {				so_evict.setProperty( settingCon.getUid(), "evictedBtnClicked");				AlertManager.createAlert( m_all_base ,Main.LANG.getReplacedSentence( "%sを強制退室させます", Main.LANG.getReplacedSentence( "%sさん", CONF.getName( settingCon.getUid()))));			} else {				AlertManager.createAlert( m_all_base ,Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、強制退去の処理ができません"));			}		}		// 講師用関数 授業終了ボタンがクリックされた		function onFinishBtnClicked( e:Event) {			if( so_evict != null) {				/*				var ret:Boolean = true;				if( ExternalInterface.available) ret = ExternalInterface.call( "flashFunc_comfirm", Main.LANG.getParam( "受講生はこのライブ授業枠に入室できなくなります！") + "\n" + Main.LANG.getParam( "本当に授業を終了しますか？"));				if( !ret) return;				for each( var member in CONF.getMemberArr()) {					if( CONF.isStudent( member.uid)) {						so_evict.setProperty( member.uid, "finishBtnClicked");					}				}*/								AlertManager.createAlert( m_all_base, Main.LANG.getParam( "受講生はこのライブ授業枠に入室できなくなります！") + "\n" + Main.LANG.getParam( "本当に授業を終了しますか？")										 ,"",[Main.LANG.getParam( "はい"),Main.LANG.getParam( "いいえ")],										 function( e:Event){											 if( e.target.name == Main.LANG.getParam( "はい")) {												for each( var member in CONF.getMemberArr()) {													if( CONF.isStudent( member.uid)) {														so_evict.setProperty( member.uid, "finishBtnClicked");													}												}												if( m_listCon) m_listCon.setStatusDisconnect();												if( m_quickCon) m_quickCon.setStatusDisconnect();																								// DBに終了の情報を送る												m_liveStatusManager.setTimeEndclass();											 }											 										 });											} else {				AlertManager.createAlert( m_all_base , Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、授業終了の処理ができません"));				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getParam( "共有オブジェクト取得に失敗しているため、授業終了の処理ができません"));			}		}					 protected function init_last() {			////////////////////////////			// 各パーティションコンテナのパーティションがドラッグされたときの一括管理			m_partitionDragManager = new PartitionDragManager();									if( CONF.isPro( UID)) onLayoutChange();			else changeStuLayout();									addChild( m_partitionDragManager);			//addErrMsg( "visible = true");			//m_all_base.visible = true;						//m_all_base.replace_allBase();												////////////////////////////			// ポップアップコンテナ			POPUP_CONTAINER = PopupContainer( addChild( new PopupContainer( W, H)));			addChild( POPUP_CONTAINER);									// 全コンテンツに対して、ポップアップされるのを監視			for each( var rWin:ResizableWindow in m_rWinArr.getArr()) {				rWin.setEnabled( true);				rWin.addEventListener( ResizableWindow.POPUP, onPopup);				rWin.addEventListener( ResizableWindow.POPUP_END, onPopupEnd);				rWin.addEventListener( ResizableWindow.POPUP_CLOSE, onPopupClose);			}						if( CONF.isPro( UID)) {				if( m_wbWin) m_wbWin.addEventListener( WhiteboardWindow.POPUP_navToURL, onWbPopup_navToURL);			}						// 生徒だった場合、if( ! CONF.isPro( UID) && UID != CONF.getWhiteboardUID()) {	// ホワイトボード権限を無しにする	if( USE_WHITEBOARD) m_wbWin.setAuthority( false);	// フレームレートを落とす	stage.frameRate = 20;	// ツールチップこんてなを閉じてスタート	//m_wbCon.closeToolchip();}					}				// お知らせダイアログ表示		public function inform( str:String) {			if( UID == CONF.getWhiteboardUID()) return;			HEADER_CON.showInfo( str);		}				// 講師用の関数		// 環境設定から新規画面モードが追加された		function onAddNewLayout( e:LayoutEvent) {//addErrMsg("onAddNewLayout");			// SOに追加登録			if( so_layoutHashArr == null || so_layoutHashArr.data.hashArr == undefined) {				addErrMsg( Main.LANG.getParam( "通信エラーにより、新規登録された画面モードを他ユーザと共有できません"));				return;			}			var newHashArr:Array = new Array();			var hashArr:Array = so_layoutHashArr.data.hashArr as Array;			for( var i = 0; i < hashArr.length; i++) {				newHashArr.push( hashArr[i]);			}			newHashArr.push( e.layout.getDataHash());			so_layoutHashArr.data.hashArr = newHashArr;			so_layoutHashArr.setDirty( "hashArr");					}				// 講師用の関数		protected function onLayoutChange( e:Event = null) {			var pConArr:Array = new Array();// パーティションコンテナの配列			var layoutArr:Array = CONF.getLayoutArr();			m_nowLayout = layoutArr[0];						if( m_nowLayout == null) {				addChild( m_errMsg);				m_errMsg.text = Main.LANG.getParam( "画面モード選択エラー");				//m_nowLayout = layoutArr[0];				return;			} else {				m_errMsg.text = "";			}//addDebugMsg( m_nowLayout.name);			// 受講生一覧に画面分割や表示メンバーの表示方法を適用する			if( USE_MEMBER) m_listCon.resetLayout( m_nowLayout.memberCol, m_nowLayout.memberUids, m_nowLayout.memberCol_pickup, m_nowLayout.memberUids_pickup);						var leftcolum;			var rightcolum;			var main_base;						// 講師用画面の作成			leftcolum = createColumn( m_nowLayout.lecLeftWinNames, W, pConArr);			rightcolum = createColumn( m_nowLayout.lecRightWinNames, W, pConArr);			main_base = leftcolum != null ? leftcolum : rightcolum;/*			switch( m_nowLayout.lecLayout) {				case Layout.LAYOUT_SUBMAIN:					leftcolum = createColumn( m_nowLayout.lecLeftWinNames, SUB_W, pConArr);leftcolum.name = "main_base leftcolum";					rightcolum = createColumn( m_nowLayout.lecRightWinNames, MAIN_W, pConArr);					main_base = new PartitionContainer( W, BODY_H, LEFT_RIGHT, leftcolum, rightcolum, SUB_W);					break;				case Layout.LAYOUT_MAINSUB:					leftcolum = createColumn( m_nowLayout.lecLeftWinNames, MAIN_W, pConArr);					rightcolum = createColumn( m_nowLayout.lecRightWinNames, SUB_W, pConArr);					main_base = new PartitionContainer( W, BODY_H, LEFT_RIGHT, leftcolum, rightcolum, MAIN_W);					break;				case Layout.LAYOUT_FULL:					// どっちかがnullになる					leftcolum = createColumn( m_nowLayout.lecLeftWinNames, W, pConArr);					rightcolum = createColumn( m_nowLayout.lecRightWinNames, W, pConArr);					main_base = leftcolum != null ? leftcolum : rightcolum;					break;			}			*///if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "onLayoutChange():" + m_nowLayout.name + " koko1");										m_all_base = main_base;			addChild( m_all_base);			/*			if( m_all_base == null) {				m_all_base = new PartitionContainer_allBase( W, H, TOP_BTM, m_headerWin, main_base, HEADER_H);				//m_all_base.visible = false;//addErrMsg( "visible = false");				addChild( m_all_base);				//pConArr.push( m_all_base);			} else {				m_all_base.init_container2nd( main_base);			}			*/						// パーティションの位置を調節する			if( m_nowLayout.lecLayout == Layout.LAYOUT_FULL) {				// フルカラム（全面）				if( main_base as ResizablePartitionContainer != null) {					// WB＆会話モード					ResizablePartitionContainer( main_base).setPartitionY( m_nowLayout.wbH);					ResizablePartitionContainer( main_base).setPartitionW( W);				}			} else {				// 左右のカラムに分かれる				if( rightcolum as ResizablePartitionContainer != null) {					// WB＆会話モード					ResizablePartitionContainer( rightcolum).setPartitionY( m_nowLayout.wbH);					ResizablePartitionContainer( rightcolum).setPartitionW( MAIN_W);				}			}			var wb_admin:Boolean = true;			if( so_join != null && so_join.data.hasOwnProperty( CONF.getWhiteboardUID())) {				wb_admin = ! ( Boolean( so_join.data[ CONF.getWhiteboardUID()]));			}			// 同期モード／非同期モード関連の初期化			if( USE_WHITEBOARD) m_wbWin.MIN_H = TitleBar.H;			if( m_nowLayout.partitionLock) {				// 第二引数をnullにして、パーティションのドラッグを全部不可に				//m_partitionDragManager.init( m_all_base, null);				// 第二引数をm_wbConのみにして、パーティションのドラッグをホワイトボード内以外全部不可に				m_partitionDragManager.init( m_all_base, [ m_wbCon, m_wbCon.getLeftCon()]);								// PopupIconを非表示にして、ポップアップを全部不可に				setTitleBarPopup( false);				// ホワイトボードのスケールとスクロール情報の同期開始				m_wbCon.syncScrollScale( true, wb_admin);								// ホワイトボードのポップアップURLの再設定				if( CONF.isPro( UID)) {					// ポップアップ先の設定					// 同期モードの場合は、画面サイズを指定サイズで固定する					var w:String = m_nowLayout.lecLayout == Layout.LAYOUT_FULL ? "1044px" : "834px";					var h:String = String( m_nowLayout.wbH + 55) + "px";					m_wbWin.setPopupReq( getUrlReq( w, h));				}							} else {				var test:PartitionContainer;				test = leftcolum as PartitionContainer;				if( test != null) pConArr.push( leftcolum);				test = rightcolum as PartitionContainer;				if( test != null) pConArr.push( rightcolum);				//test = main_base as PartitionContainer;				//if( test != null) pConArr.push( main_base);								m_partitionDragManager.init( m_all_base, pConArr);								// PopupIconを表示して、ポップアップを全部可に				setTitleBarPopup( true);								// ホワイトボードのスケールとスクロール情報の同期終了				if( USE_WHITEBOARD) m_wbCon.syncScrollScale( false, wb_admin);								// ホワイトボードのポップアップURLの再設定				if( CONF.isPro( UID) && USE_WHITEBOARD) {					// ポップアップ先の設定					// 同期モードじゃない場合は、画面サイズは100%（デフォルト）					m_wbWin.setPopupReq( getUrlReq());				}			}						// がベージコレクション対策			while( pConArr.length) {				pConArr.pop();			}			pConArr = null;									if( so_layout != null) {				so_layout.setProperty( "name", m_nowLayout.name);			}						// 講師画面にて、カメラ背景が選択されているとき、且つWB画面がステージ上にあるとき、			// もし講師カメラがOFFの状態だとWB映像も映らなくなってしまうので、強制カメラONする			if( CONF.isPro( UID) &&			    USE_WHITEBOARD &&				m_wbCon.getBgtype() == WhiteboardContainer.BGTYPE_CAMERA &&				USE_VIDEO &&				m_wbCon.stage != null) {				m_proVideo.forceCameraOn();			}						m_all_base.replace();					}				// 受講生用の関数		protected function changeStuLayout( newLayoutName = "") {			// ポップアップ中のウィンドウは全て閉じる			if( m_rWinArr != null && POPUP_CONTAINER != null) {				for each( var rWin in m_rWinArr.getArr()) {					if( rWin as ResizableWindow != null) {						rWin.onChangeStuLayout();						POPUP_CONTAINER.removeWindow( rWin);					}				}			}//addErrMsg( newLayoutName);			var pConArr:Array = new Array();// パーティションコンテナの配列			if( USE_WHITEBOARD) pConArr.push( m_wbCon);			//pConArr.push( m_wbCon.getLeftCon());			m_nowLayout = null;			var layoutArr:Array = CONF.getLayoutArr();			m_nowLayout = layoutArr[0];			if( m_nowLayout == null) {				addChild( m_errMsg);				m_errMsg.text = Main.LANG.getParam( "画面モード選択エラー");				m_nowLayout = layoutArr[0];				//return;			} else {				m_errMsg.text = "";			}//addErrMsg( m_nowLayout.name);				// 受講生一覧に画面分割や表示メンバーの表示方法を適用する			if( USE_MEMBER) m_listCon.resetLayout( m_nowLayout.memberCol, m_nowLayout.memberUids, m_nowLayout.memberCol_pickup, m_nowLayout.memberUids_pickup);						var leftcolum;			var rightcolum;			var main_base;						// 受講者用画面の作成			leftcolum = createColumn( m_nowLayout.stuLeftWinNames, W, pConArr);			rightcolum = createColumn( m_nowLayout.stuRightWinNames, W, pConArr);			main_base = leftcolum != null ? leftcolum : rightcolum;						m_all_base = main_base;			addChild( m_all_base);			/*			if( m_all_base == null) {				m_all_base = new PartitionContainer_allBase( W, H, TOP_BTM, m_headerWin, main_base, HEADER_H);				//m_all_base.visible = false;				addChild( m_all_base);			} else {				m_all_base.init_container2nd( main_base);			}*/						// パーティションの位置を調節する			if( m_nowLayout.stuLayout == Layout.LAYOUT_FULL) {				if( main_base as ResizablePartitionContainer != null) {					ResizablePartitionContainer( main_base).setPartitionY( m_nowLayout.wbH);					ResizablePartitionContainer( main_base).setPartitionW( W);				}			} else {				if( rightcolum as ResizablePartitionContainer != null) {					ResizablePartitionContainer( rightcolum).setPartitionY( m_nowLayout.wbH);					ResizablePartitionContainer( rightcolum).setPartitionW( MAIN_W);				}			}			if( m_nowLayout.partitionLock) {				// 第二引数をm_wbConのみにして、パーティションのドラッグをホワイトボード内以外全部不可に				m_partitionDragManager.init( m_all_base, ( USE_WHITEBOARD ? [ m_wbCon] : null));													// PopupIconを非表示にして、ポップアップを全部不可に				setTitleBarPopup( false);								// ホワイトボードのスケールとスクロール情報の同期開始				if( USE_WHITEBOARD) m_wbCon.syncScrollScale( true, false);							} else {												var test:PartitionContainer;				test = leftcolum as PartitionContainer;				if( test != null) pConArr.push( leftcolum);				test = rightcolum as PartitionContainer;				if( test != null) pConArr.push( rightcolum);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Main1:" + test);				//test = main_base as PartitionContainer;				//if( test != null) pConArr.push( main_base);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Main2:" + test);								m_partitionDragManager.init( m_all_base, pConArr);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Main3:");								// PopupIconを表示して、ポップアップを全部可に				setTitleBarPopup( true);								// ホワイトボードのスケールとスクロール情報の同期終了				if( USE_WHITEBOARD) m_wbCon.syncScrollScale( false, false);			}			m_all_base.replace();		}				function setTitleBarPopup( b:Boolean) {			if( m_quickWin) m_quickWin.setTitleBarPopup( b);			if( m_listWin) m_listWin.setTitleBarPopup( CONF.isPro( UID) ? true : b);			if( m_wbWin) m_wbWin.setTitleBarPopup( CONF.isPro( UID) ? true : b);			if( m_proVideoWin) m_proVideoWin.setTitleBarPopup( b);			if( m_chatWin) m_chatWin.setTitleBarPopup( b);		}				function createColumn( winNames:Array, w:Number, pConArr:Array):DisplayObject {			if( winNames == null || winNames.length == 0) return null;						var partition_posi;			var topColumn;			switch( winNames.length) {				case 1:					return m_rWinArr.getWinByName( winNames[0], w);					break;				case 2:					if( winNames[0] == Layout.WINNAME_VIDEO) partition_posi = VIDEO_H;					else partition_posi = ( w == SUB_W) ? SUB_H : WB_H;					//addErrMsg( partition_posi);										// ホワイトボードと何か（受講生一覧かダミー）のパーティションコンテナの場合は、					// 同期モードの時にパーティションを動かしたいので、リサイザブルにする					if( winNames[0] == Layout.WINNAME_WHITEBOARD) return new ResizablePartitionContainer( w, BODY_H, TOP_BTM, m_rWinArr.getWinByName( winNames[0], w), m_rWinArr.getWinByName( winNames[1], w), partition_posi);					else return new PartitionContainer( w, BODY_H, TOP_BTM, m_rWinArr.getWinByName( winNames[0], w), m_rWinArr.getWinByName( winNames[1], w), partition_posi);					break;				case 3:					var h:Number;					// まずは入れ子になるカラムを生成					if( winNames[0] == Layout.WINNAME_VIDEO) {						partition_posi = VIDEO_H;						h = VIDEO_H + SUB_H;					} else if( winNames[1] == Layout.WINNAME_VIDEO) {						partition_posi = SUB_H;						h = VIDEO_H + SUB_H;					} else {						partition_posi = ( w == SUB_W) ? SUB_H : BODY_H / 3;						h = ( w == SUB_W) ? SUB_H * 2 : BODY_H / 3 * 2;					}					topColumn = new PartitionContainer( w, h, TOP_BTM, m_rWinArr.getWinByName( winNames[0], w), m_rWinArr.getWinByName( winNames[1], w), partition_posi);					pConArr.push( topColumn);					return new PartitionContainer( w, BODY_H, TOP_BTM, topColumn, m_rWinArr.getWinByName( winNames[2], w), h);					break;				case 4:					var top_h:Number;					var btm_h:Number;					// 入れ子になる上カラムを生成					if( winNames[0] == Layout.WINNAME_VIDEO) {						partition_posi = VIDEO_H;						top_h = VIDEO_H + SUB_H;					} else if( winNames[1] == Layout.WINNAME_VIDEO) {						partition_posi = SUB_H;						top_h = VIDEO_H + SUB_H;					} else {						partition_posi = BODY_H / 4 * 2;						top_h = BODY_H / 4 * 2;					}					topColumn = new PartitionContainer( w, top_h, TOP_BTM, m_rWinArr.getWinByName( winNames[0], w), m_rWinArr.getWinByName( winNames[1], w), partition_posi);					pConArr.push( topColumn);										// 入れ子になる下カラムを生成					btm_h = BODY_H - top_h;					if( winNames[2] == Layout.WINNAME_VIDEO) {						partition_posi = VIDEO_H;					} else if( winNames[3] == Layout.WINNAME_VIDEO) {						partition_posi = btm_h - VIDEO_H;					} else {						partition_posi = BODY_H / 4 * 2;					}										var btmColumn = new PartitionContainer( w, btm_h, TOP_BTM, m_rWinArr.getWinByName( winNames[2], w), m_rWinArr.getWinByName( winNames[3], w), partition_posi);					pConArr.push( btmColumn);					return new PartitionContainer( w, BODY_H, TOP_BTM, topColumn, btmColumn, top_h);					break;				default: break;								}			return null;		}				protected function onResize( e:Event = null) {			if( contains( mc_loading)) {				mc_loading.x = ( stage.stageWidth - mc_loading.width)/ 2;				mc_loading.y = ( stage.stageHeight - mc_loading.height)/ 2;			}			if( m_all_base) {				m_all_base.setViewWidth( stage.stageWidth);				m_all_base.setViewHeight( stage.stageHeight);			}						// 対処療法。。			//m_wbWin.setViewWidth( stage.stageWidth - m_proVideo.getViewWidth() - Partition.W);//Main.addDebugMsg( "stage.stageWidth:" + stage.stageWidth);//Main.addDebugMsg( "m_wbWin.getViewWidth():" + m_wbWin.getViewWidth());			if( POPUP_CONTAINER) POPUP_CONTAINER.setBaseWidth( stage.stageWidth);									W = stage.stageWidth;//1044;			H = stage.stageHeight;//950 + TMP_ADD_H;			BODY_H = H - HEADER_H - Partition.W;			MAIN_W = W - SUB_W - Partition.W;						//m_partitionDragManager.addEventListener( "onAutoResize finished", onAutoResizeFinished);						//m_partitionDragManager.onAutoResize();		}		/*		function onAutoResizeFinished( e:Event) {			m_partitionDragManager.removeEventListener( "onAutoResize finished", onAutoResizeFinished);			m_wbCon.fitContentsViewSize();			//m_partitionDragManager.onAutoResize();		}		*/		function onPopup( e:Event) {trace("onPopup", ResizableWindow( e.target).name);			// 同期モード時用			// ポップアップ解除後に、元のサイズに戻すためにサイズを覚えておく			if( CONF.isPro( UID) && m_nowLayout.partitionLock) {				m_beforePopupSize[ ResizableWindow( e.target).name] = { w:ResizableWindow( e.target).getViewWidth(),																		h:ResizableWindow( e.target).getViewHeight()};			}			POPUP_CONTAINER.addWindow( ResizableWindow( e.target));			HEADER_CON.stopBlink( ResizableWindow( e.target).name);		}		function onPopupEnd( e:Event) {trace("onPopupEnd", ResizableWindow( e.target).name);			POPUP_CONTAINER.removeWindow( ResizableWindow( e.target));			m_partitionDragManager.onAutoResize();						//同期モード時用			if( CONF.isPro( UID) && m_nowLayout.partitionLock) {				if( m_beforePopupSize[ ResizableWindow( e.target).name] != undefined) {					ResizableWindow( e.target).setViewWidth( m_beforePopupSize[ ResizableWindow( e.target).name].w);					ResizableWindow( e.target).setViewHeight( m_beforePopupSize[ ResizableWindow( e.target).name].h);				} else {					// ウィンドウのポップアップ時に、ポップアップ前のサイズを取得されていないときにここにくる					// 同期モード時には、ポップアップ解除後に元のサイズに戻すために、サイズを覚えておく必要がある					addErrMsg( "onPopupEnd()" + ResizableWindow( e.target).name + "fatal error");				}			}		}		function onPopupClose( e:Event) {trace("onPopupClose", ResizableWindow( e.target).name);			POPUP_CONTAINER.removeWindow( ResizableWindow( e.target));			if( ResizableWindow( e.target).name == Layout.SUB_WINNAME_WHITEBOARD_IMGDOC) m_partitionDragManager.onAutoResize();						//同期モード時用			if( CONF.isPro( UID) && m_nowLayout.partitionLock) {				if( m_beforePopupSize[ ResizableWindow( e.target).name] != undefined) {					ResizableWindow( e.target).setViewWidth( m_beforePopupSize[ ResizableWindow( e.target).name].w);					ResizableWindow( e.target).setViewHeight( m_beforePopupSize[ ResizableWindow( e.target).name].h);				} else {					// ウィンドウのポップアップ時に、ポップアップ前のサイズを取得されていないときにここにくる					// 同期モード時には、ポップアップ解除後に元のサイズに戻すために、サイズを覚えておく必要がある					addErrMsg( "onPopupClose()" + ResizableWindow( e.target).name + "fatal error");				}			}		}						// アンケートを強制ポップアップ		// QComponentsConStudentのchangeStatus（２カ所）から呼ばれる		static public function popupQ() {						if( HEADER_CON) HEADER_CON.stopBlink( m_qWin.name);						//if( ! POPUP_CONTAINER.isPopuped( m_qWin.name)) m_qWin.callDispachPopup();					}				protected function connect():void {			//ネットコネクション			if( m_nc == null) {				m_nc = new NetConnection();				m_nc.objectEncoding = ObjectEncoding.AMF0;				m_nc.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onSecurityError);				m_nc.addEventListener( IOErrorEvent.IO_ERROR, function(e:IOErrorEvent){ addErrMsg(e.text);});			}			m_nc.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus);						var protocol = "";			var port = "";			var app_name;			if( ! USE_CONNECT_PARAM_ARR) {				// プロトコルとポート番号をgetparam.phpで設定されている値に設定				protocol = CONF.getParam( 'PROTOCOL') != LoadConf.NOTFOUND ? CONF.getParam( 'PROTOCOL') : "rtmp";								if( CONF.getParam( 'PORT') != LoadConf.NOTFOUND && CONF.getParam( 'PORT') != "") port = ":" + CONF.getParam( 'PORT');								app_name = CONF.getParam( 'APP_NAME') + "_ios";			} else {							// プロトコルとポート番号をCONNECT_PARAM_ARRに格納されている値で設定。NetConnection.Connect.Failedがでたら次の値で再設定。				protocol = Object( CONNECT_PARAM_ARR[ i_CONNECT_PARAM_ARR]).PROTOCOL;				port = ":" + Object( CONNECT_PARAM_ARR[ i_CONNECT_PARAM_ARR]).PORT;				app_name = CONF.getParam( 'APP_NAME');			}			m_command = protocol + "://" + CONF.getParam( 'HOST') + port + "/" + app_name + "/" + CLASS_ID;checkRunTime( Main.LANG.getParam( "サーバ接続準備完了、サーバ接続開始") + ": " + m_command);			m_nc.connect( m_command);			m_errMsg.text = Main.LANG.getParam( "配信サーバへ接続中");		}				// 配信やり直し		function republish():Boolean {			//setEnabled( false);			var ret:Boolean = true;			if( CONF.isPro( UID)) ret = m_proVideo.restartPublish();			else if( UID == CONF.getWhiteboardUID()) ret = m_wbVideo.restartPublish();			//else if( CONF.isStudent( UID)) ret = m_videoCtl.restartPublish();			//setEnabled( true);						return ret;		}				// 再接続ボタン（ヘッダー右上のリサイクルマーク）クリック時		function onReconnect( e:Event = null) {			//m_reconnecting = true;			if( m_nc.connected) {				addChild( m_errMsg);				m_errMsg.text = Main.LANG.getParam( "配信サーバへ接続中");addErrMsg( "Main.onReconnect()");				m_nc.removeEventListener( NetStatusEvent.NET_STATUS, onNetStatus);				m_nc.addEventListener( NetStatusEvent.NET_STATUS, onConnectClosed);				m_nc.close();			}					}		function onConnectClosed(e:NetStatusEvent):void {m_systemlogCon.addRedLog( e.info.code);			switch( e.info.code) {				case "NetConnection.Connect.Closed":HEADER_CON.changeSystemLogBtnColor( 0xcc0000);					m_nc.removeEventListener( NetStatusEvent.NET_STATUS, onConnectClosed);					m_nc.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus);					i_CONNECT_PARAM_ARR = 0;					addEventListener( Event.ENTER_FRAME, onceFunc_connect);										resetAllStreams();										break;			}		}		function resetAllStreams() {			// 次にinitSoを再度呼ぶときにのための初期化処理。			if( m_proVideo) m_proVideo.resetNetStream();			if( m_listCon) m_listCon.resetNetStream();			if( m_videoCtl) m_videoCtl.resetNetStream();			if( m_wbVideo) m_wbVideo.resetNetStream();			if( m_wbCon) m_wbCon.resetNetStream();			if( m_chatCon) m_chatCon.resetNetStream();		}				protected function setEnabled( b:Boolean) {			if( HEADER_CON) HEADER_CON.setEnabled( b);			if( m_wbCon) m_wbCon.setEnabled( b);			if( m_proVideo) m_proVideo.setEnabled( b);			if( m_chatCon) m_chatCon.setEnabled( b);			if( m_listCon) m_listCon.setEnabled( b);			if( m_quickCon) m_quickCon.setEnabled( b);			if( m_chatStuCon) m_chatStuCon.setEnabled( b);			if( m_qCon) m_qCon.setEnabled( b);			if( m_memberSettingConArr) {				for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {					settingCon.setEnabled( b);				}			}			if( b && m_memberSettingConCon) m_memberSettingConCon.addEventListener( StreamComponents.EVICTED_BTN_CLICKED, onMemberEvictedBtnClicked);			if( b && m_memberSettingConCon) m_memberSettingConCon.addEventListener( StreamComponents.REPUBLISH_BTN_CLICKED, onMemberRepublishBtnClicked);						if( CONF.isStudent( UID)) {				if( USE_VIDEO_CTL) m_videoCtl.setEnabled( b);			}		}		//ネットステータスイベントの処理		protected function onNetStatus( e:NetStatusEvent):void {m_systemlogCon.addRedLog( e.info.code);			switch( e.info.code) {				case "NetConnection.Connect.Success":checkRunTime( Main.LANG.getParam( "サーバ接続成功、ネットワーク系初期化開始"));						setEnabled( true);										// 各メンバーの共有オブジェクトを取得					CONF.initSo_member( m_nc);										initSoUidHash();										if( CANSEL_0916) initSoPermanentLog();//addDebugMsg( "ネットワーク系初期化 全メンバー情報OK");						// 個別アクションログの配列格納用					// （ライブステータスを反映させる用）					var memberLogHash:Object = new Object();										// 個別アクションログSOの生成（initSo_setting、initSo_joinLogConより先に生成すべし）					if( CANSEL_0916) if( so_log == null) { so_log = SharedObject.getRemote( Main.CONF.SO_NAME_LOG, m_nc.uri, true);}					//if( CONF.isPro( UID)) so_log.addEventListener( SyncEvent.SYNC, onSyncLog);															if( UID != CONF.getWhiteboardUID()) {						// WBユーザじゃない場合																		// 挙手関係の共有オブジェクト						if( CANSEL_0916) initSoHere();//addDebugMsg( "ネットワーク系初期化 挙手OK");													// 音声の共有オブジェクト						if( USE_VIDEO || USE_MEMBER) {							if( CANSEL_0916) initSo_volume();//addDebugMsg( "ネットワーク系初期化 音声OK");							}																							if( USE_MEMBER) {							if( CANSEL_0916) m_listCon.initSo( CLASS_ID + "_list", m_nc, so_here);//addDebugMsg( "ネットワーク系初期化 受講生一覧OK");							}																		if( CONF.isStudent( UID) || CONF.isView( UID)) {							// 受講生の場合							if( USE_VIDEO) {								if( CANSEL_0916) m_proVideo.initSo( m_nc, null);//addDebugMsg( "ネットワーク系初期化 講師映像OK");								}														if( USE_VIDEO) {								if( CANSEL_0916) m_proVideo.startReceive();//addDebugMsg( "ネットワーク系初期化 講師映像受信開始OK");								}														if( USE_VIDEO_CTL) m_videoCtl.addEventListener( "whiteboard ok", function( e:*){														if( m_nowLayout.partitionLock) {															// 第二引数をm_wbConのみにして、パーティションのドラッグをホワイトボード内以外全部不可に															m_partitionDragManager.init( m_all_base, ( USE_WHITEBOARD ?[ m_wbCon]:null));														}														m_wbWin.setAuthority( true);														});							if( USE_VIDEO_CTL) m_videoCtl.addEventListener( "whiteboard ng", function( e:*){														if( m_nowLayout.partitionLock) {															// 第二引数をnullにして、パーティションのドラッグを全部不可に															m_partitionDragManager.init( m_all_base, null);														}														m_wbWin.setAuthority( false);														});							if( USE_VIDEO_CTL) m_videoCtl.addEventListener( "read ok", function( e:*){ m_wbWin.showReadBtn( true)});							if( USE_VIDEO_CTL) m_videoCtl.addEventListener( "read ng", function( e:*){ m_wbWin.showReadBtn( false)});														if( USE_VIDEO_CTL) {								m_videoCtl.initSo( m_nc, so_volume);//addDebugMsg( "ネットワーク系初期化 映像送信開始OK");								}							if( USE_MEMBER && USE_VIDEO_CTL) m_videoCtl.setListContainer( m_listCon);														if( HEADER_CON) HeaderContentsStudent( HEADER_CON).initSo( m_nc, so_here);//addDebugMsg( "ネットワーク系初期化 HeaderContentsStudent OK");						} else {							// 講師の場合														if( USE_VIDEO) {								m_proVideo.initSo( m_nc, so_volume);//addDebugMsg( "ネットワーク系初期化 映像送信開始OK");								}							//if( USE_VIDEO && USE_MEMBER) m_proVideo.setListContainer( m_listCon);														if( CANSEL_0916) m_memberSoWatcher.initSo(/* m_nc*/);//addDebugMsg( "ネットワーク系初期化 環境設定OK");							// 環境設定							if( CANSEL_0916) memberLogHash = initSo_setting( memberLogHash);							//addDebugMsg( "ネットワーク系初期化 個別配信設定OK");								if( USE_WHITEBOARD) m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, null);//addDebugMsg( "ネットワーク系初期化 ホワイトボードカメラOK");															// ホワイトボードの背景がカメラ以外に変わったのをリッスン							// (講師映像の画角がカメラ映像背景と同じサイズになっちゃっていることがあるので、それを正すため)							if( USE_WHITEBOARD) m_wbCon.addEventListener( "resetCameraSize", resetCameraSize);														if( HEADER_CON) HeaderContentsLecturer( HEADER_CON).initSo( m_nc, null);						}											} else {						// WBユーザの場合						if( USE_WHITEBOARD) m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, null);//addDebugMsg( "ネットワーク系初期化 映像送信開始OK");						}					// ライブステータスを反映させるコンテンツをセット					m_liveStatusManager.setCon( ( USE_CHAT ? m_chatCon : null),											    ( USE_QUICK ? m_quickCon : null),												( USE_MEMBER ? m_listCon : null),												memberLogHash,												( USE_VIDEO ? m_proVideo : null),												( USE_WHITEBOARD ? m_wbCon : null));										if( CANSEL_0916) m_liveStatusManager.initSo( so_here, so_log);					if( CANSEL_0916) so_log.connect( m_nc);					//addDebugMsg( "ネットワーク系初期化 各種ライブステータスOK");					if( USE_WHITEBOARD) m_wbCon.initSo( CLASS_ID + "_wb", m_nc, m_wbVideo);//addDebugMsg( "ネットワーク系初期化 ホワイトボードOK");					if( USE_CHAT) m_chatCon.initSo( CONF.SO_NAME_CHAT, m_nc);//addDebugMsg( "ネットワーク系初期化 チャットとアクションログOK");					if( m_sendCon) m_sendCon.initSo( CLASS_ID + "_file", m_nc);					if( m_rcvCon) m_rcvCon.initSo( CLASS_ID + "_file", m_nc);//addDebugMsg( "ネットワーク系初期化 ファイル送受信OK");					if( USE_QUICK) {						m_quickCon.initSo( CLASS_ID + "_quick", m_nc, so_here);//addDebugMsg( "ネットワーク系初期化 クイック一覧OK");					}					if( m_chatStuCon) {						// 受講生のみ						m_chatStuCon.initSo( CONF.SO_NAME_CHAT_STU, m_nc);//addDebugMsg( "ネットワーク系初期化 個別チャットOK");					}					if( m_qCon) {						m_qCon.initSo( m_nc);//addDebugMsg( "ネットワーク系初期化 アンケートOK");					}					//addDebugMsg( "ネットワーク系初期化 入退席管理OK");					//addErrMsg( "initSoLayout start");											//画面レイアウト					//initSoLayout();//addDebugMsg( "ネットワーク系初期化 画面モードOK");										// 強制退去					if( CANSEL_0916) initSoEvict();//addDebugMsg( "ネットワーク系初期化 強制退去OK");										// 映像不具合の報告					if( USE_RECEIVE_IDLE_CHECK_BY_STU || USE_RECEIVE_IDLE_CHECK_BY_LEC) {						initSoVideoBug();//addDebugMsg( "ネットワーク系初期化 映像不具合の報告OK");					}										// 配信やり直し					if( CANSEL_0916) initSoRepublish();//addDebugMsg( "ネットワーク系初期化 再配信OK");										// 録画用					if( USE_MEMBER_VOICE) {						m_memberVoice.initSo( m_nc);//addDebugMsg( "ネットワーク系初期化 声の受信OK");					}										// 講師映像のバッファ時間					if( CANSEL_0916) initSoRcvBufferTime();										if( contains( m_errMsg)){ removeChild( m_errMsg);}		//if( DEBUG && ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "Main:initSo() OK");checkRunTime( Main.LANG.getParam( "ネットワーク系初期化完了"));if( HEADER_CON) HEADER_CON.changeSystemLogBtnColor( 0xaaaaaa);					break;				case "NetStream.Unpublish.Success":					break;				case "NetConnection.Connect.Start":					// 全体のボリューム					//SOUND_UTILS.volume = MAX_VOLUME;					break;				case "NetConnection.Connect.Closed":										if( HEADER_CON) HEADER_CON.changeSystemLogBtnColor( 0xcc0000);										if( !m_acceptClose) {						i_CONNECT_PARAM_ARR = 0;						addEventListener( Event.ENTER_FRAME, onceFunc_connect);												resetAllStreams();addDebugMsg( "再接続を試みます");					}					break;				case "NetStream.Publish.Start":					break;				case "NetStream.Publish.BadName":					//leave( "参加できません");					break;				case "NetConnection.Connect.Failed"://addErrMsg( "NetConnection.Connect.Failed: " + Object( CONNECT_PARAM_ARR[ i_CONNECT_PARAM_ARR]).PROTOCOL +  "://" + CONF.getParam( 'HOST') + ":" + Object( CONNECT_PARAM_ARR[ i_CONNECT_PARAM_ARR]).PORT);					if( USE_CONNECT_PARAM_ARR) {						i_CONNECT_PARAM_ARR++;						addEventListener( Event.ENTER_FRAME, onceFunc_connect);						//connect();					}					break;				case "NetConnection.Connect.Rejected":if( HEADER_CON) HEADER_CON.changeSystemLogBtnColor( 0xcc0000);					//break;				default://addChild( m_errMsg);//m_errMsg.text = e.info.code;			}		}		///////////////////////////		////UID関係の共有用    //		///////////////////////////				function initSoUidHash() {			// 音声ゲージ表示用			if( so_uid_hash == null) {				so_uid_hash = SharedObject.getRemote( Main.CONF.SO_NAME_UIDHASH, m_nc.uri, false);				so_uid_hash.fps = LoadConf.SO_FPS_VOLUME;				so_uid_hash.addEventListener( SyncEvent.SYNC, onSyncUidHash);			}			so_uid_hash.connect( m_nc);					}		function onSyncUidHash( e:SyncEvent) {		   if( !so_uid_hash.data.hasOwnProperty( UID)) {				so_uid_hash.setProperty( UID, UID_ORG);			}		   if( CONF.isPro( UID)) {			   // 講師の場合はSO変更を監視し続ける			   CONF.setUidHash( so_uid_hash.data);			   		   } else {			   so_uid_hash.removeEventListener( SyncEvent.SYNC, onSyncUidHash);		   }		}				///////////////////////////		// 環境設定の共有用    //		///////////////////////////				function initSo_setting( memberLogHash:Object) {						for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {				settingCon.initSo( m_nc);				settingCon.setSoLog( so_log);				memberLogHash[ settingCon.getUid()] = settingCon.getLogCon();			}						return memberLogHash;					}				function onSyncLog( e:SyncEvent):void {			for each( var obj in e.changeList) {				if( so_log.data[ obj.name]== "") return;				for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {					if( settingCon.getUid() == obj.name) {						settingCon.addHtmlText( so_log.data[ obj.name]);					}				}			}			// 最初の入室状況			m_joinLogCon.reset( so_log);		}				///////////////////////////		////音声関係の共有用    //		///////////////////////////				function initSo_volume() {			// 音声ゲージ表示用			if( so_volume == null) {				so_volume = SharedObject.getRemote( Main.CONF.SO_NAME_VOLUME, m_nc.uri, false);				so_volume.fps = LoadConf.SO_FPS_VOLUME;								// 音声ボリュームSO変更を監視し、音声ゲージに反映させる				so_volume.addEventListener( SyncEvent.SYNC,				   function( e:SyncEvent) {					   var obj:Object;					   for each( obj in e.changeList) {						   // 受講生画面の、講師映像のボリューム						   if( USE_VIDEO && obj.name == CONF.getProId() && ! CONF.isPro( UID)) {							   m_proVideo.setVolume( so_volume.data[ obj.name]);						   }						   // 各受講生（自分も含む）のボリューム						   if( CONF.isStudent( obj.name)) {							   if( USE_MEMBER) m_listCon.setVolume( obj.name, so_volume.data[ obj.name]);							   if( USE_QUICK) m_quickCon.setVolume( obj.name, so_volume.data[ obj.name]);						   }					   }	//					   if( so_volume.data[ Main.CONF.getProId()] != undefined) {	//							m_volumeMeter.setLevel( so_volume.data[ Main.CONF.getProId()]);	//					   }				   });			}			so_volume.connect( m_nc);					}		///////////////////////////		////挙手関係の共有用    //		///////////////////////////				function initSoHere():void {			//SharedObjectの取得			if ( so_here==null) {				so_here = SharedObject.getRemote( CONF.SO_NAME_HERE, m_nc.uri, false); 				so_here.fps = LoadConf.SO_FPS_HERE;				so_here.addEventListener( SyncEvent.SYNC , onSyncSoHere);				function onSyncSoHere( e:SyncEvent):void {					if( so_here.data.named_uid != undefined && so_here.data.named_uid != "") {						if( so_here.data.named_uid == UID) {							// ポップアップで指名されたことを表示							HEADER_CON.showInfo( Main.LANG.getParam( "指名されました"));													} else if( CONF.isStudent( UID)) {							HEADER_CON.showInfo( 								Main.LANG.getReplacedSentence( "%sさんが指名されました", CONF.getName( so_here.data.named_uid)));							} else if( CONF.isPro( UID)) {							// チャット（とDB）に指名されたことを記入							m_liveStatusManager.named( so_here.data.named_uid);						}						so_here.setProperty( "named_uid", "");					}										if( so_here.data.hereFlag != undefined) {						// 挙手待ちの人とそうでない人との状態を反映させる						m_liveStatusManager.updateHereStatus( so_here.data.hereFlag);					}				}			}			if ( so_here==null) {				addErrMsg( "initSoHere():" + Main.LANG.getParam( "通信エラー"));				return;			}						//SOにアクセス			so_here.connect( m_nc);		}				function initSoVideoBug() {			//SharedObjectの取得			if( so_videoBug==null) {				so_videoBug = SharedObject.getRemote( CONF.SO_NAME_VIDEO_BUG, m_nc.uri, false); 				so_videoBug.addEventListener( SyncEvent.SYNC, onSyncSoVideoBug);				function onSyncSoVideoBug( e:SyncEvent):void {															for each( var obj in e.changeList) {						if( obj.name==UID && obj.code == "change") {							// 自分自身が不具合報告の対象														var needRepublish = true;														var reporter = CONF.getName( so_videoBug.data[ UID]);// 報告者の名前							if( CONF.isView( so_videoBug.data[ UID])) reporter = LANG.getParam( "録画画面");														if( reporter == LoadConf.NOTFOUND) continue;														if( REPUBLISH_WITH_ALERT) {								AlertManager.createAlert( m_all_base, LANG.getReplacedSentence( "%sにより講師映像の不具合が報告されました。", reporter) + LANG.getParam( "映像（音声）が正常に配信されていない可能性があります。再読み込みしますか？")									 ,"",[Main.LANG.getParam( "はい"),Main.LANG.getParam( "いいえ")],									 function( e:Event){										 if( e.target.name == Main.LANG.getParam( "はい")) {											 var ret:Boolean = false;											 ret = republish();											// アクションログに書き込む											var myname:String = CONF.getName( UID);											if( CONF.isPro( UID)) myname = LANG.getParam( "講師");											if( ret && ADDLOG_AFTER_REPUBLISH && m_chatCon != null) m_chatCon.addLog( LANG.getReplacedSentence( "%sの映像・音声を自動再読み込みしました", myname));										 }addErrMsg( "映像・音声の自動再読み込み　reporter: " + reporter + "  成否：" + ret);										// 不具合報告を受領済みにする										so_videoBug.setProperty( UID, "accept videoBug");									 });								/*								if( ExternalInterface.available) {									needRepublish = ExternalInterface.call( "flashFunc_comfirm", LANG.getReplacedSentence( "%sにより講師映像の不具合が報告されました。", reporter)									 + LANG.getParam( "映像（音声）が正常に配信されていない可能性があります。再読み込みしますか？"));								}*/							} else {								// 不具合報告を受領済みにする								so_videoBug.setProperty( UID, "accept videoBug");							}							/*							var ret:Boolean = false;							if( needRepublish) {								ret = republish();																// アクションログに書き込む								var myname:String = CONF.getName( UID);								if( CONF.isPro( UID)) myname = LANG.getParam( "講師");								if( ret && ADDLOG_AFTER_REPUBLISH && m_chatCon != null) m_chatCon.addLog( LANG.getReplacedSentence( "%sの映像・音声を自動再読み込みしました", myname));							}addErrMsg( "映像・音声の自動再読み込み　reporter: " + reporter + "  成否：" + ret);							// 不具合報告を受領済みにする							so_videoBug.setProperty( UID, "accept videoBug");							*/						}					}				}			}			if( so_videoBug==null) {				addErrMsg( "initSoVideoBug():" +  LANG.getParam( "通信エラー"));				return;			}						//SOにアクセス			so_videoBug.connect( m_nc);						// 講師以外が講師の不具合を報告する			if( USE_VIDEO && USE_RECEIVE_IDLE_CHECK_BY_STU && ! CONF.isPro( UID)) {				m_proVideo.addEventListener( ProVideo.SOMETHING_WRONG_WITH_LEC, function( e:Event) {													   if( so_videoBug != null) so_videoBug.setProperty( CONF.getProId(), UID);													   });			}						// 講師が受講生の不具合を報告する			if( USE_MEMBER && USE_RECEIVE_IDLE_CHECK_BY_LEC && CONF.isPro( UID))  {				m_listCon.addEventListener( MemberEvent.SOMETHING_WRONG_WITH_FPSMETER, function( e:MemberEvent) {													   if( so_videoBug != null) {														   so_videoBug.setProperty( e.uid, UID);addErrMsg( CONF.getName( e.uid) + "の不具合を感知したので再配信リクエストを出します");														   }													   });			}		}				function initSoPermanentLog() {			//SharedObjectの取得			if( so_permanent_log==null) {				so_permanent_log = SharedObject.getRemote( CONF.SO_NAME_PERMANENT_LOG, m_nc.uri, true); 				// 講師の場合、REC_STATUSをログに追加する				if( CONF.isPro( UID)) {					so_permanent_log.addEventListener( SyncEvent.SYNC, onSyncSoPermanentLog_1st);					function onSyncSoPermanentLog_1st( e:SyncEvent):void {						so_permanent_log.removeEventListener( SyncEvent.SYNC, onSyncSoPermanentLog_1st);						switch( CONF.getParam( "REC_STATUS")) {							case '0':							addPermanentLog( "全体録画：REC_STATUS:" + CONF.getParam( "REC_STATUS") + " 手動録画の録画していない状態から開始、録画ボタンOFF", Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);							break;							case '1':							addPermanentLog( "全体録画：REC_STATUS:" + CONF.getParam( "REC_STATUS") + " 手動録画の録画している状態から開始、録画ボタンON", Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);							break;							case '2':							addPermanentLog( "全体録画：REC_STATUS:" + CONF.getParam( "REC_STATUS") + " 自動録画", Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);							break;							default:							addPermanentLog( "全体録画：REC_STATUS:" + CONF.getParam( "REC_STATUS") + " 録画方法不明", Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);							break;						}					}				}			}			if( so_permanent_log==null) {				addErrMsg( "initSoPermanentLog():" +  LANG.getParam( "通信エラー"));				return;			}						//SOにアクセス			so_permanent_log.connect( m_nc);								}				function resetCameraSize( e:Event) {			// 講師映像を配信し直す			if( USE_VIDEO) m_proVideo.restartPublish();		}				protected function onSyncJoin( e:SyncEvent = null):void {			// メンバーのうち、誰かのストリームがcloseしてたり開通されてたりするタイミング						if( e == null) {//addDebugMsg("状態の変化のない、再ログイン時");							// 最初、というか、状態の変化のない、再ログイン時				for( var uid:String in so_join.data) {addDebugMsg("状態の変化のないログイン時:" + uid);					onSyncJoin_eachUid( uid);				}			} else {//addDebugMsg("状態の変化のログイン時");							for each( var obj in e.changeList) {addDebugMsg("状態の変化のログイン時:" + obj.name);					onSyncJoin_eachUid( obj.name);				}			}						if( UID == CONF.getWhiteboardUID()) return; // ここからはWBユーザには用は無い						//--------------------------------------------------------------------------------------			// WBユーザが未参加もしくは退席中の場合			//--------------------------------------------------------------------------------------			if( USE_WHITEBOARD && ( ! so_join.data.hasOwnProperty( CONF.getWhiteboardUID()) || so_join.data[ CONF.getWhiteboardUID()] == false)) {				// WBユーザが未参加の場合				if( CONF.isPro( UID)) {					// 講師画面での背景セレクタで映像を選択できるようにする					m_wbCon.lockBgSelectorCam( false);										// 自分（講師）映像					m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, null);				} else {					if( so_join.data.hasOwnProperty( CONF.getProId()) && so_join.data[ CONF.getProId()] == true) {						// 講師映像を映す						m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, CONF.getProId());					} else {						// 講師もWBユーザも参加していないので映す映像がない！						m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, CONF.getProId());					}				}			}//addDebugMsg("updateJoinStatus");			m_liveStatusManager.updateJoinStatus( so_join.data); // 講師の参加判定だった場合はtrueを返す					}				function onSyncJoin_eachUid( uid:String) {			//-------------------------------------------------------------------------------------			// 自分が誰かのm_streamCheckerにより退席したかも判定されてしまっていたら			//-------------------------------------------------------------------------------------			if( uid == UID && so_join.data[ uid] == false) {				if( AUTO_RELOGIN) {					so_join.setProperty( UID, true);				} else {					var msg = Main.LANG.getParam(							"退席しました。回線状況により退席した可能性もあります。再度参加する場合はブラウザを更新してページを再読み込みしてください。");					Main.addErrMsg( msg);					AlertManager.createAlert( m_all_base , msg);					if( ExternalInterface.available) ExternalInterface.call( "flashFunc_reload");				}			}						//--------------------------------------------------------------------------------------			// 参加しているマスターユーザの映像の受信と配信ステータス変更（退席したかも判定）の監視			//--------------------------------------------------------------------------------------			if( UID == CONF.getWhiteboardUID()) return; // ここからはWBユーザには用は無い						// ホワイトボードの参加状態が変化したとき			if( uid == CONF.getWhiteboardUID()){Main.addDebugMsg("Main ホワイトボードの参加状態が変化:" + so_join.data[ CONF.getWhiteboardUID()]);				// ホワイトボードが参加してきたとき				if( so_join.data[ CONF.getWhiteboardUID()] == true) {					// WBユーザの受信開始					m_wbVideo.startReceive( m_nc);					// WBユーザの配信ステータス変更（退席したかも判定）の監視					if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_wbVideo.receive_ns);										// ホワイトボードのカメラスライド背景の設定					if( USE_WHITEBOARD) {						// WBユーザの映像の受信ストリームを用意						m_wbCon.setCamSlideNs( LoadConf.DEFAULT_CAM_ID, CONF.getWhiteboardUID());												if( CONF.isPro( UID)) {							// 講師画面での背景セレクタで映像を選択できなくする							m_wbCon.lockBgSelectorCam( true);						}					}				}							}						// 講師が参加してきたとき			// （自分が受講生か録画ユーザの場合）			if( uid == CONF.getProId() && so_join.data[ CONF.getProId()] == true) {				if( CONF.isStudent( UID) || CONF.isView( UID)) {					// 講師の受信開始					if( USE_VIDEO) m_proVideo.startReceive();					// 講師の配信ステータス変更（退席したかも判定）の監視					if( USE_VIDEO) if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_proVideo.receive_ns);				}			}						// 誰か受講生が参加してきたとき			if( CONF.isStudent( uid) && so_join.data[ uid] == true) {				// 自分が講師の場合				if( CONF.isPro( UID)) {					// この受講生の配信ステータス変更（退席したかも判定）の監視					if( USE_MEMBER) if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_listCon.getNetStream( uid));					else if( USE_MEMBER_VOICE) if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_memberVoice.getNetStream( uid));										for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {						if( settingCon.getUid() == uid) {							var inited:Boolean = settingCon.initSoChatIfMada();							if( !inited) m_liveStatusManager.resetMemberLogHash( settingCon.getUid(), settingCon.getLogCon());						}					}				}				// 自分が受講生か録画ユーザの場合				if( CONF.isStudent( uid) && uid != UID) {					// この受講生の配信ステータス変更（退席したかも判定）の監視					if( USE_MEMBER) if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_listCon.getNetStream( uid));					else if( USE_MEMBER_VOICE) if( CONF.isPro( UID)) StreamChecker_lec( m_streamChecker).addStream( m_memberVoice.getNetStream( uid));				}			}		}				//講師（自分）がホワイトボードのポップアップボタンを押したとき		function onWbPopup_navToURL( e:Event) {			/*			if( CONF.isPro( UID)) {				// 自分が講師のとき				if( m_lecMaincolum != null) {					// パーティションの位置を、ホワイトボードが隠れるように調節する					m_wbWin.MIN_H = -10;					m_partitionDragManager.addPCon( m_lecMaincolum);					m_lecMaincolum.setPartitionY( -10);									}			}			*/		}		///////////////////////////		////強制退去の共有用    //		///////////////////////////				function initSoEvict():void {			//SharedObjectの取得			if( so_evict==null) {				so_evict = SharedObject.getRemote( CONF.SO_NAME_EVICT, m_nc.uri, false); 				so_evict.addEventListener( SyncEvent.SYNC, onSyncSoEvict);				function onSyncSoEvict( e:SyncEvent):void {										var changeListName:String = "";										for each( var obj in e.changeList) {						if( obj.name==UID) {//Main.addDebugMsg( obj.code + ", " + so_evict.data[ UID]);							// 自分自身が強制退去の対象							if( obj.code == "change" && so_evict.data[ UID] == "evictedBtnClicked") {								// 講師によって強制退去ボタンが押されたので、それを受け入れる合図を出す								so_evict.setProperty( UID, "accept evict");							} else if( obj.code == "change" && so_evict.data[ UID] == "finishBtnClicked") {								// 講師によって授業終了ボタンが押されたので、それを受け入れる合図を出す								so_evict.setProperty( UID, "accept finish");							} else if( obj.code == "success" && so_evict.data[ UID] == "accept evict") {								// 強制退去を受け入れる								m_acceptClose = true;								m_nc.close();								AlertManager.createAlert( m_all_base ,LANG.getParam( "セッションが切れました。ブラウザを更新して、再入室してください。"));								m_proVideo.setStatusDisconnect();								if( m_listCon) m_listCon.setStatusDisconnect();								if( m_videoCtl) m_videoCtl.setStatusDisconnect();							} else if( ( obj.code == "success" || obj.code == "change" ) && so_evict.data[ UID] == "accept finish") {								// 授業終了を受け入れる								m_acceptClose = true;								m_nc.close();								AlertManager.createAlert( m_all_base ,LANG.getParam( "接続が切れました"));								m_proVideo.setStatusDisconnect();								if( m_listCon) m_listCon.setStatusDisconnect();								if( m_videoCtl) m_videoCtl.setStatusDisconnect();							}						}						//強制退去による退室処理						if( CONF.isPro( UID) && obj.code == "change" && obj.oldValue == "evictedBtnClicked" && so_evict.data[ obj.name] == "accept evict") {							//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getReplacedSentence( "%sさんを強制退室させました", String( CONF.getName( obj.name))));							if( changeListName != "") changeListName = "," + changeListName;							changeListName += LANG.getReplacedSentence( "%sさん", CONF.getName( obj.name));							changeJoinFlag( false, obj.name);						}						//授業終了による退室処理						if( CONF.isPro( UID) && obj.code == "change" && obj.oldValue == "finishBtnClicked" && so_evict.data[ obj.name] == "accept finish") {							if( changeListName != "") changeListName = "," + changeListName;							changeListName += LANG.getReplacedSentence( "%sさん", CONF.getName( obj.name));							changeJoinFlag( false, obj.name);													}					}					if( CONF.isPro( UID) && changeListName != "") {						//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getReplacedSentence( "%sを強制退室させました", changeListName));					}				}			}			if( so_evict==null) {				addErrMsg( "initSoEvict():" +  LANG.getParam( "通信エラー"));				return;			}						//SOにアクセス			so_evict.connect( m_nc);		}				function initSoRcvBufferTime():void {			//SharedObjectの取得			if( so_rcvBufferTime==null) {				so_rcvBufferTime = SharedObject.getRemote( CONF.SO_NAME_RCVBUFFERTIME, m_nc.uri, false); 				so_rcvBufferTime.addEventListener( SyncEvent.SYNC, onSyncSoRcvBufferTime);				function onSyncSoRcvBufferTime( e:SyncEvent):void {					if( m_proVideo == null) return;					for each( var obj in e.changeList) {//addDebugMsg( "onSyncSoRcvBufferTime " + obj.name + ":" + so_rcvBufferTime.data[ obj.name]);						if( obj.name==UID) {							m_proVideo.setRcvBufferTime( so_rcvBufferTime.data[ obj.name]);						}						if( obj.code == "change" && CONF.isPro( UID)) {							// 講師が再ログインした時							for each( var settingCon:MemberSettingContents in m_memberSettingConArr) {								settingCon.setBufferTime( Number( so_rcvBufferTime.data[ obj.name]));							}						}					}				}			}						so_rcvBufferTime.connect( m_nc);		}		///////////////////////////		////配信やり直しの共有用    //		///////////////////////////				function initSoRepublish():void {			//SharedObjectの取得			if( so_republish==null) {				so_republish = SharedObject.getRemote( CONF.SO_NAME_REPUBLISH, m_nc.uri, false); 				so_republish.addEventListener( SyncEvent.SYNC, onSyncSoRepublish);				function onSyncSoRepublish( e:SyncEvent):void {										var changeListName:String = "";					for each( var obj in e.changeList) {						if( obj.name==UID) {							// 自分自身が配信やり直しの対象							if( so_republish.data[ UID] == "republishBtnClicked") {								// 講師によって配信やり直しボタンが押されたので、それを受け入れる								republish();								so_republish.setProperty( UID, "republished");//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", Main.LANG.getParam( "配信のやり直し"));							}						}						if( CONF.isPro( UID) && obj.oldValue == "republishBtnClicked" && so_republish.data[ obj.name] == "republished") {							if( changeListName != "") changeListName = "," + changeListName;							changeListName += LANG.getReplacedSentence( "%sさん", CONF.getName( obj.name));						}					}					if( CONF.isPro( UID) && changeListName != "") {						//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", LANG.getReplacedSentence( "%sが配信をやり直しました", changeListName));					}				}			}			if( so_republish==null) {				addErrMsg( "initSoRepublish():" + LANG.getParam( "通信エラー"));				return;			}						//SOにアクセス			so_republish.connect( m_nc);		}						///////////////////////////		////参加不参加状態の共有用    //		///////////////////////////				function initSoJoin():void {						//SharedObjectの取得			if ( so_firstJoinTime==null) {				so_firstJoinTime = SharedObject.getRemote( CONF.SO_NAME_JOIN+"_1stTime", m_nc.uri, true);				so_firstJoinTime.addEventListener( SyncEvent.SYNC , onSyncSoFirstJoinTime_1st);			}			if ( so_firstJoinTime==null) {				addErrMsg( "initSoJoin():" + Main.LANG.getParam( "通信エラー"));				return;			}						if ( so_terminal==null) {				so_terminal = SharedObject.getRemote( CONF.SO_NAME_TERMINAL, m_nc.uri, false);				so_terminal.addEventListener( SyncEvent.SYNC, onSyncSoTerminal);			}			if ( so_terminal==null) {				addErrMsg( "initSoJoin():" + Main.LANG.getParam( "通信エラー"));				return;			}						// 共有オブジェクトへのアクセス完了後に共有オブジェクト変更			if ( so_join==null) {				so_join = SharedObject.getRemote( CONF.SO_NAME_JOIN, m_nc.uri, true);				so_join.fps = LoadConf.SO_FPS_LOW;				so_join.addEventListener( SyncEvent.SYNC, onSyncSoJoinStart);				//so_join.addEventListener( SyncEvent.SYNC, onSyncJoin);							} else {				so_join.removeEventListener( SyncEvent.SYNC, onSyncJoin);			}			if( so_join==null) {				addErrMsg( "initSoJoin():" + Main.LANG.getParam( "通信エラー"));				return;			}					//SOにアクセス			so_firstJoinTime.connect( m_nc);			so_terminal.connect( m_nc);			so_join.connect( m_nc);		}				function onSyncSoTerminal( e:SyncEvent) {			if( so_terminal.data[ UID] == undefined || String( so_terminal.data[ UID]) != TERMINAL) {				//so_terminal.data[ UID] = TERMINAL;				so_terminal.setProperty( UID, TERMINAL);				//if( ! CONF.isPro( UID)) so_terminal.removeEventListener( SyncEvent.SYNC, onSyncSoTerminal);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", UID + ":" + so_terminal.data[ UID] + " " + TERMINAL + " " + Math.random());			}			for each( var obj in e.changeList) {				if( obj.code == "change" && obj.name != UID) {					m_liveStatusManager.updateTerminalStatus( obj.name, so_terminal.data[ obj.name]);				}			}		}				function onSyncSoFirstJoinTime_1st( e:SyncEvent):void {							for( var uid:String in so_firstJoinTime.data) {				if( CONF.isStudent( uid))  {					if( USE_MEMBER) m_listCon.set1stAttendTime( uid, so_firstJoinTime.data[ uid]);					if( USE_QUICK) m_quickCon.set1stAttendTime( uid, so_firstJoinTime.data[ uid]);				}			}			so_firstJoinTime.removeEventListener( SyncEvent.SYNC , onSyncSoFirstJoinTime_1st);			so_firstJoinTime.addEventListener( SyncEvent.SYNC , onSyncSoFirstJoinTime);			// 「一番最初にアクセスした日時」を保存			if( so_firstJoinTime.data[ UID] == undefined) {				if( CONF.getParam( "COMMON_UNIX_TIME") == LoadConf.NOTFOUND) {addErrMsg( "getparamにCOMMON_UNIX_TIMEが設定されていないので、受講生一覧の並び順定義にローカルPCの時計を使用します");					var now:Date = new Date();					so_firstJoinTime.setProperty( UID, now.getTime());				} else {					so_firstJoinTime.setProperty( UID, CONF.getParam( "COMMON_UNIX_TIME"));				}			}		}				function onSyncSoFirstJoinTime( e:SyncEvent):void {			for each( var dat in e.changeList) {				if( dat.name != CONF.getName( CONF.getProId())) {					if( m_listCon) m_listCon.set1stAttendTime( dat.name, so_firstJoinTime.data[ dat.name]);					if( m_quickCon) m_quickCon.set1stAttendTime( dat.name, so_firstJoinTime.data[ dat.name]);				}			}		}		function onSyncSoJoinStart( e:SyncEvent):void {			so_join.removeEventListener( SyncEvent.SYNC , onSyncSoJoinStart);			m_liveStatusManager.initJoinStatus( so_join.data);						//SharedObjectの値変更イベントのリスナー			so_join.addEventListener( SyncEvent.SYNC, onSyncJoin);			onSyncJoin();			if( !so_join.data.hasOwnProperty( UID) || so_join.data[ UID] == false) {				so_join.setProperty( UID, true);			}		}		function changeJoinFlag( b:Boolean, target_uid:String) {addDebugMsg("Main changeJoinFlag()" + target_uid + ":"+b);			//SharedObjectの取得			if ( so_join==null) {				addErrMsg( "changeJoinFlag():" + Main.LANG.getParam( "通信エラー"));				return;			}			if( so_join.data[ target_uid] != b) {				so_join.setProperty( target_uid, b);			}		}				function initSoLayout():void {			//SharedObjectの取得			// 現在選択されている画面モードの名前			if( so_layout == null) {				so_layout = SharedObject.getRemote( CLASS_ID + "_layout", m_nc.uri, false); 				so_layout.fps = LoadConf.SO_FPS_LOW;				so_layout.addEventListener( SyncEvent.SYNC, onSyncLayout);			}						// 全画面モードの全情報（連想配列の配列）			if( so_layoutHashArr == null) {				so_layoutHashArr = SharedObject.getRemote( CONF.SO_NAME_LAYOUT_HASH_ARR, m_nc.uri, false);			}			// 誰でも、最初にアクセスしたとき			so_layoutHashArr.addEventListener( SyncEvent.SYNC , onSyncLayoutHashArr_1st);			//SOにアクセス			//so_layout.connect( m_nc);			so_layoutHashArr.connect( m_nc);		}		function onSyncLayout( e:SyncEvent):void {//trace( "------>" , m_nowLayout, so_layout.data.name);			if( so_layout.data.name==undefined && m_nowLayout != null) {				// 最初のアクセス//addErrMsg( "onSyncLayout  最初のアクセス");							so_layout.setProperty( "name", m_nowLayout.name);			} else {//addErrMsg( "onSyncLayout  return");							//return;			}									if( m_nowLayout == null || m_nowLayout.name != so_layout.data.name) {				if( !CONF.isPro( UID)) {					// 講師がプルダウンで画面レイアウトを変更したタイミング					changeStuLayout( so_layout.data.name);				} else {					// 講師が再ログインしたタイミング（受講生は誰かいる状態で）					// 画面モードプルダウンを選択し直して					HEADER_CON.selectComboItem( so_layout.data.name);					onLayoutChange();				}			}		}		function onSyncLayoutHashArr_1st( e:SyncEvent):void {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "onSyncLayoutHashArr_1st:" + so_layout);				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "onSyncLayoutHashArr_1st:" + so_layoutHashArr.data.hashArr);					if( USE_SETTING && CONF.isPro( UID)) m_settingCon.setLayoutHashArrSo( so_layoutHashArr);						if( so_layoutHashArr.data.hashArr==undefined) {				// 一番最初に授業に参加した人				// CONFにある、XMLから読み込んだ画面モード情報をSOに登録				var layoutArr:Array = CONF.getLayoutArr();				var hashArr:Array = new Array();				for( var i = 0; i < layoutArr.length; i++) {					hashArr.push( Layout( layoutArr[i]).getDataHash());				}				so_layoutHashArr.data.hashArr = hashArr;				so_layoutHashArr.setDirty( "hashArr");			} else {				// 2番目以降に授業に参加した人				// SharedObjectの値が最新なので、CONFの情報（と画面モードプルダウン項目）を更新する				onSyncLayoutHashArr();							}			so_layoutHashArr.removeEventListener( SyncEvent.SYNC , onSyncLayoutHashArr_1st);			so_layoutHashArr.addEventListener( SyncEvent.SYNC , onSyncLayoutHashArr);						so_layout.connect( m_nc);					}			function onSyncLayoutHashArr( e:SyncEvent = null):void {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Main:onSyncLayoutHashArr(" + e + ")");			// 講師が環境設定から画面モードを登録追加／編集／削除したときに呼ばれる			// SharedObjectの値が最新なので、CONFの情報を更新する			if( so_layoutHashArr.data.hashArr != undefined) CONF.updateLayoutArr( so_layoutHashArr.data.hashArr);						// 変更対象が現在の画面モードだった場合のために、画面モードを選択し直す。			if( m_nowLayout != null && m_nowLayout.name == so_layout.data.name) {				if( !CONF.isPro( UID)) {					changeStuLayout( m_nowLayout.name); // 再表示				} else {					// 画面モードプルダウンを選択し直して					HEADER_CON.selectComboItem( m_nowLayout.name);					onLayoutChange();// 再表示				}			}//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Main:onSyncLayoutHashArr: " + m_nowLayout.name + "<=>"+ so_layout.data.name);						// ヘッダーのプルダウンも更新			if( CONF.isPro( UID)) {				var selected:String = HEADER_CON.getSelectedMode(); // 再選択用に現在のレイアウトをキープ//addErrMsg( "onSyncLayoutHashArr 1:" + selected);				HEADER_CON.removeAllComboItem(); // プルダウンはいったん全削除				var layoutArr:Array = CONF.getLayoutArr();				for each( var layout:Layout in layoutArr) {//addErrMsg( "onSyncLayoutHashArr 2:" + layout.name);					HEADER_CON.addComboItem( layout.name); // 追加があった場合は追加				}				if( ! HEADER_CON.selectComboItem( selected)) {					// 削除されていて再選択できなかった。					errDialog( Main.LANG.getReplacedSentence( "%sは削除されたので、画面モードを選択し直してください", selected));				}			}		}					// 講師用関数		function onStatusChange( e:StreamCheckerEvent) {			// 退席したかも判定をする			if( e.type == StreamCheckerEvent.STATUS_DIE) {				if( so_join.data[ e.uid] == true) changeJoinFlag( false, e.uid);			}			if( e.type == StreamCheckerEvent.STATUS_ALIVE) {				if( so_join.data[ e.uid] == false) changeJoinFlag( true, e.uid);			}		}				//セキュリティーエラーイベントの処理		function onSecurityError( e:SecurityErrorEvent):void {m_errMsg.text = "SecurityError";		}		//Asyncエラーイベントの処理		function onAsyncError( e:AsyncErrorEvent):void {m_errMsg.text = "AsyncError";		}		//IOエラーイベントの処理		function onIoError( e:*):void {m_errMsg.text = "IoError";		}				function getTitle( str:String) :TitleBarContents {			var titleBarCon:TitleBarContents = new TitleBarContents();			titleBarCon.addContents( getTitleBarText( str));			return titleBarCon;		}						function getTitleBarText( str:String) :TextField {			var txt:TextField = new TextField();			txt.defaultTextFormat = new TextFormat( CONF.getMainFont(), 12, 0x000000);			txt.autoSize = TextFieldAutoSize.LEFT;			txt.mouseEnabled = txt.selectable = false;			txt.text = str;			return txt;		}				function createDummyResizableWindow() : ResizableWindow {			return new ResizableWindow( 100, 100, 0, 0, 0xcccccc);		}		function errDialog( str) {			if( Main.DEBUG_ALERT) AlertManager.createAlert( m_all_base ,str);		}				// 講師用関数		// ProVideoの音量共有時のonTimerから呼ばれる		static public function needsShare_LecVolume():Boolean {			// 結局録画画面で受講生一覧を表示している可能性があるので、音量は常に表示してなきゃだめ						/*switch( m_nowLayout.name) {				case LANG.getParam("[全面]WBモード"):				case LANG.getParam("[同期/全面]WBモード"):					return false;			}*/			return true;		}				// 受講者用関数		// StuVideoControlの音量共有時のonTimerから呼ばれる		static public function needsShare_StuVolume():Boolean {			// 結局録画画面で受講生一覧を表示している可能性があるので、音量は常に表示してなきゃだめ						/*switch( m_nowLayout.name) {				//case LANG.getParam("WBモード"): // クイック一覧に音量情報が必要！				case LANG.getParam("[全面]WBモード"):				//case LANG.getParam("[同期]WBモード"): // クイック一覧に音量情報が必要！				case LANG.getParam("[同期/全面]WBモード"):					return false;			}*/			return true;		}		static public function checkRunTime( str) {			var nowtime = getTimer();			var appendStr:String = str + " ";			if( LANG == null) {				appendStr += "total time:" + String( nowtime - STARTTIME) + " elapsed time:" + String( nowtime - PREVTIME);			} else {				appendStr += LANG.getParam("全体の経過時間") + ":" + String( nowtime - STARTTIME) + " " + LANG.getParam( "前チェックポイントからの経過時間") + ":" + String( nowtime - PREVTIME);			}								if( m_systemlogCon) m_systemlogCon.addBootLog( appendStr);			//trace( "Main.checkRunTime:" + appendStr);			PREVTIME = nowtime;trace(appendStr);if( ExternalInterface.available) ExternalInterface.call( "flashFunc_log", appendStr);		}		static public function addErrMsg( str) {			//trace( "Main.addErrMsg:" + str);			if( m_systemlogCon) m_systemlogCon.addLog( str);trace(str);if( ExternalInterface.available) ExternalInterface.call( "flashFunc_log", str);		}		static public function addDebugMsg( str) {			//trace( "Main.addDebugMsg:" + str);			if( DEBUG && m_systemlogCon) m_systemlogCon.addBlueLog( str);trace(str);if( ExternalInterface.available) ExternalInterface.call( "flashFunc_log", str);		}		/*		static public function alertDialog_debug( str) {			AlertManager.createAlert( m_all_base,str);		}*/		static public function addPermanentLog( str, key) {			if( so_permanent_log == null || ! so_permanent_log.data) {				addErrMsg( "Cannot access so_permanent_log. Log message ["+str+"] is canceled.");				return;			}			var now:Date = new Date();			var old_text:String = ( so_permanent_log.data[key] != undefined) ? so_permanent_log.data[key] : "";			var new_text:String = now.toString() + " " + str + "\n";			so_permanent_log.setProperty( key, old_text + new_text);			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", str);		}		/*		static public function alert( msg:String) {			if( stage) AlertManager.createAlert( m_all_base ,"");		}		*/    }}import flash.display.DisplayObject;import window.ResizableWindow;class RWinArr {	private var m_arr:Array;	public function RWinArr() {		m_arr = new Array();	}	public function push( win:DisplayObject, _name:String) {		m_arr.push( win);		win.name = _name;				//win.addEventListener( Event.RESIZE, onResize);	}		public function getWinByName( _name:String, w:Number):DisplayObject {		for each( var win in m_arr) {			if( win.name == _name) {				if( ResizableWindow( win) != null) ResizableWindow( win).setViewWidth( w);				return win;			}		}		//return null;		return new ResizableWindow( w, 1, 0, 0, 0xf0f0f0);	}	public function getArr():Array { return m_arr;}	}