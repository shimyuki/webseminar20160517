package {    import flash.net.*;	import flash.events.*;	import flash.utils.*;    public class MyNetStream extends NetStream {		private var m_id:String = "";		private var m_prevFPS : Number = 0;		private var m_fpsHistoryCount : int = 0;		private const DEFAULT_FPS_HISTORY_MAX_COUNT : int = 5;		private const MAX_DEFAULT_FPS_HISTORY_MAX_COUNT : int = 50;		private var FPS_HISTORY_MAX_COUNT : int = DEFAULT_FPS_HISTORY_MAX_COUNT;						public function MyNetStream( nc:NetConnection, id:String) {			super( nc);			m_id = id;						addEventListener( NetStatusEvent.NET_STATUS, onNetStatus);		}		public function getId():String { return m_id;}				// currentFPS < 0.2　の間、StreamCheckerから5秒おきに呼ばれる		// 生きてる:true／死んでる:false		public function checkFPSHistory() : Boolean {			if( super.currentFPS != m_prevFPS){				m_prevFPS = super.currentFPS;				m_fpsHistoryCount = 0;				// 判定基準を元に戻す。				FPS_HISTORY_MAX_COUNT = DEFAULT_FPS_HISTORY_MAX_COUNT;			} else {				m_fpsHistoryCount++;			}			if( m_fpsHistoryCount >= FPS_HISTORY_MAX_COUNT){				//m_prevFPS = 0;				m_fpsHistoryCount = 0;trace( m_id, currentFPS, "die");				return false;			}trace( m_id, currentFPS, "alive");			return true;		}				// StreamChecker_lecのonSyncから呼ばれる。		public function setAlive() {			// StreamChecker_lecから、so_knockに応答があったときに			// 強制的に「生き判定」にする。			// ただし、講師SWFのみでの話。			m_fpsHistoryCount = 0;						FPS_HISTORY_MAX_COUNT += 3; // 元々カメラ無しのせいでずっとfps==0の生徒かもしれないので、判定基準をゆるくする。			if( FPS_HISTORY_MAX_COUNT > MAX_DEFAULT_FPS_HISTORY_MAX_COUNT) FPS_HISTORY_MAX_COUNT = MAX_DEFAULT_FPS_HISTORY_MAX_COUNT;		}				// StreamChecker_lecのonAfterKnockTimerから呼ばれる。		// やっぱり[○判定]→[×判定]のままのとき		public function resetFPS_HISTORY_MAX_COUNT() {			// 判定基準を元に戻す。			FPS_HISTORY_MAX_COUNT = DEFAULT_FPS_HISTORY_MAX_COUNT;		}		function onNetStatus( e:NetStatusEvent):void {			switch( e.info.code) {				case "NetStream.Play.Start":				case "NetStream.Play.Reset":					// 判定基準を元に戻す。					FPS_HISTORY_MAX_COUNT = DEFAULT_FPS_HISTORY_MAX_COUNT;					m_fpsHistoryCount = 0;					break;				case "NetStream.Play.UnpublishNotify":					dispatchEvent( new Event( "NetStream.Play.UnpublishNotify"));					break;				default:					break;			}		}	}}