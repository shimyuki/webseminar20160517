package {	import flash.events.*;	import flash.net.*;	import flash.text.*;	import partition.*;	import window.questionnaire.*;	import flash.display.Loader;	import flash.display.BitmapData;	import common.Member;	    public class LoadConf extends EventDispatcher	// PHP（XML）を読み込んで、データをm_param_hashに保存する	{		public static const LOAD_COMPLETE = "LOAD_COMPLETE";		public  var CLASS_ID = "";		public  var UID = "";		public  var UID_ORG = "";		public  var TERMINAL = "";		public var CAMERA_QUALITY:Number;		//public var BUFFER_TIME:Number;		public const CAMERA_KEYFRAME:Number = 48;		public const CAMERA_MOTIONLEVEL:Number = 0;		//public var AUDIO_CODEC_SPEEX = 0;		private var CONNECT_PARAM_ARR:Array = new Array();		static public const NOTFOUND:String = "NOTFOUND!";		static public const DEFAULT_CAM_ID:String = "dummy_id";		static public const SO_FPS_HIGH:Number = 20;		static public const SO_FPS_MID:Number = 12;		static public const SO_FPS_LOW:Number = 1;		private const WHITEBOARD_UID_EXT:String = "_whiteboard";		private const VIEW_UID_EXT:String = "_view";		private var m_param_hash:Object = null;		private var m_member_arr:Array = null;		private var m_memberImgBmpdata_hash:Object = null;		private var m_memberImgCnt:uint;		private var m_memberImgCnt_loaded:uint;		private var m_layoutArr:Array; // 画面モード		private var m_questionnaireArr:Array; // アンケート		private var m_chatHtml:String;		private var m_memberChat:Object; // 個別チャット。キーはuid		private var m_memberLog:Object; // 個別アクションログ。キーはuid		private var m_fontnameArr:Array;		private var m_priorityFontnameArr:Array = [ 'A-OTF 新ゴ Pro B', '小塚ゴシック Pro B', '_ゴシック', '_sans'];				// 各クラスで共通にアクセスする、SharedObjectの名前		public var SO_NAME_LAYOUT_HASH_ARR:String = ""; // 画面レイアウト（Layoutクラスの形）の配列		public var SO_NAME_MEMBER:String = ""; // 各メンバーの個別設定情報（実際にはこの後に各メンバーのUIDがくっつく）		public var SO_NAME_WB_STREAM:String = "";		public var SO_NAME_JOIN:String = "";		public var SO_NAME_EVICT:String = "";		public var SO_NAME_REPUBLISH:String = "";		public var SO_NAME_CHAT:String = "";		public var SO_NAME_CHAT_STU:String = "";		public var SO_NAME_HERE:String = ""; // 挙手／指名関係		public var SO_NAME_VOLUME:String = ""; // 音声ボリューム		public var SO_NAME_Q:String = ""; // 全アンケート情報		public var SO_NAME_Q_FLAG:String = ""; // アンケートの開始したやつtrueと終了したやつfalse		public var SO_NAME_LOG:String = ""; // 各メンバーの個別ログ		public var SO_NAME_TERMINAL:String = ""; // 各メンバーの使用端末		public var SO_NAME_VIDEO_BUG:String = ""; // 映像不具合		public var SO_NAME_RCVBUFFERTIME:String = ""; // 映像不具合		public var SO_NAME_UIDHASH:String = "";				public var SO_NAME_PERMANENT_LOG:String = "";		public var SO_PERMANENT_LOG_KEY__RECORD:String = "record";				static public const SO_FPS_MEMBER:Number = SO_FPS_LOW;		static public const SO_FPS_LIST_ALL:Number = SO_FPS_LOW;		static public const SO_FPS_LIST_PICK:Number = SO_FPS_LOW;		static public const SO_FPS_HERE:Number = SO_FPS_LOW;		static public const SO_FPS_VOLUME:Number = SO_FPS_LOW;				private var m_uid_hash:Object;		public function LoadConf( confFilePath:String, class_id:String, uid:String, uid_org:String) {//alertDialog( uid + "," + class_id);				CLASS_ID = class_id;			UID = uid;			UID_ORG = uid_org;			SO_NAME_LAYOUT_HASH_ARR = CLASS_ID + "_layout_hashArr";			SO_NAME_MEMBER = "a" + CLASS_ID + "_member_";			SO_NAME_JOIN = CLASS_ID + "_joinFlag";			SO_NAME_REPUBLISH = CLASS_ID + "_republish";			SO_NAME_EVICT = CLASS_ID + "_evict";			SO_NAME_HERE = CLASS_ID + "_here";			SO_NAME_VOLUME = CLASS_ID + "_vol";			SO_NAME_CHAT = CLASS_ID + "_chat";			SO_NAME_CHAT_STU = CLASS_ID + "_chat_stu";			SO_NAME_LOG = CLASS_ID + "_log";			SO_NAME_Q = CLASS_ID + "_q";			SO_NAME_Q_FLAG = CLASS_ID + "_q_flag";			SO_NAME_WB_STREAM = CLASS_ID + "_wbstream";			SO_NAME_TERMINAL = CLASS_ID + "_terminal";			SO_NAME_VIDEO_BUG = CLASS_ID + "_videoBug";			SO_NAME_RCVBUFFERTIME = CLASS_ID + "_rcvBufferTime";			SO_NAME_PERMANENT_LOG = CLASS_ID + "_permanentlog";			SO_NAME_UIDHASH = CLASS_ID + "_uidhash";						m_memberChat = new Object();			m_memberLog = new Object();			m_questionnaireArr = new Array();						var dateObj:Date = new Date();			var cacheClear = "?dummy=" + dateObj.getMonth() + dateObj.getDate() + dateObj.getHours() + dateObj.getMinutes() + dateObj.getSeconds(); // 一秒ごとにキャッシュクリア			//var cacheClear = "";						var req:URLRequest = new URLRequest( confFilePath + cacheClear);						req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.mode = 1;			variables.class_id = CLASS_ID;			variables.uid = UID;			req.data = variables;						var loader:URLLoader = new URLLoader();			if( confFilePath != "") loader.load( req);			loader.addEventListener( Event.COMPLETE, onComplete);			loader.addEventListener( IOErrorEvent.IO_ERROR, onDispatchError);			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onDispatchError);						// デバイスフォント名の取得			var font_list:Array = Font.enumerateFonts(true);			m_fontnameArr = font_list.map( returnFontName);			function returnFontName(val:Font, index:int, array:Array):String {			  return String(val.fontName);			}						// 画面モード、プリセットの生成			m_layoutArr = new Array();			m_layoutArr.push( new Layout( Main.LANG.getParam( "全面モード"),				[ Layout.WINNAME_Q, Layout.WINNAME_CHAT], // 講師画面 左側				null, // 講師画面 右側				[ Layout.WINNAME_Q, Layout.WINNAME_CHAT], // 生徒画面 左側				null, // 生徒画面 右側				Layout.DEFAULT_LAYOUT_CDATE+"01",				Layout.P_UNLOCK));															/*m_layoutArr.push( new Layout( Main.LANG.getParam( "WB＆会話モード"),			m_layoutArr.push( new Layout( Main.LANG.getParam( "[同期]WBモード"),				[ Layout.WINNAME_VIDEO, Layout.WINNAME_QUICK, Layout.WINNAME_CHAT], // 講師画面 左側				[ Layout.WINNAME_WHITEBOARD], // 講師画面 右側				[ Layout.WINNAME_VIDEO, Layout.WINNAME_CHAT], // 生徒画面 左側				[ Layout.WINNAME_WHITEBOARD], // 生徒画面 右側				Layout.DEFAULT_LAYOUT_CDATE+"09",				Layout.P_LOCK));			Layout( m_layoutArr[ m_layoutArr.length - 1]).wbH = Main.BODY_H - Partition.W;						*/					}		public function setUidHash( obj:Object) {			// Mainから呼ばれる			m_uid_hash = obj;		}		public function getUidHash() : Object {			return m_uid_hash;		}		function getLayoutMember( namae:String, memberCol:uint, createDate:String) : Layout {			var layout:Layout = new Layout( namae,				[ Layout.WINNAME_VIDEO, Layout.WINNAME_QUICK, Layout.WINNAME_CHAT], // 講師画面 左側				[ Layout.WINNAME_MEMBER], // 講師画面 右側				[ Layout.WINNAME_VIDEO, Layout.WINNAME_CHAT], // 生徒画面 左側				[ Layout.WINNAME_MEMBER], // 生徒画面 右側				createDate,				Layout.P_UNLOCK);			layout.memberCol = memberCol;			return layout;		}				public function getLayoutArr():Array { return m_layoutArr;}		public function updateLayoutArr( hashArr:Array) {			// 削除されているものがないかチェック//alertDialog( hashArr + "＼n" + m_layoutArr);			for( var j = 0; j < m_layoutArr.length; j++) {				var _layout:Layout = m_layoutArr[j];				var deleted:Boolean = true;				for each( var _hash:Object in hashArr) {					if( _layout.createDate == _hash.createDate) {						deleted = false; //削除されてない						break;					}				}				if( deleted) {					// 削除					m_layoutArr.splice( j, 1); 					j--;				}//if( deleted) alertDialog( _layout.name +"を削除しました");//else alertDialog( _layout.name +"は削除しません");			}						// 更新か、新規かもチェック			for( var i = 0; i < hashArr.length; i++) {				var hash:Object = hashArr[i];				var exist:Boolean = false;				for each( var layout:Layout in m_layoutArr) {					if( layout.createDate == hash.createDate) {						exist = true;						layout.updateByHash( hash);					}				}				if( ! exist) {					// 新規					var new_layout = new Layout( hash.name,							hash.lecLeftWinNames, // 講師画面 左側							hash.lecRightWinNames, // 講師画面 右側							hash.stuLeftWinNames, // 生徒画面 左側							hash.stuRightWinNames, // 生徒画面 右側							hash.createDate,							hash.partitionLock);					new_layout.memberCol = hash.memberCol;					new_layout.memberUids = hash.memberUids;					new_layout.memberCol_pickup = hash.memberCol_pickup;					new_layout.memberUids_pickup = hash.memberUids_pickup;					new_layout.wbH = hash.wbH;									 					m_layoutArr.push( new_layout);									}			}					}				public function getMainFont():String {			for each( var fontname:String in m_fontnameArr) {				for each( var priority in m_priorityFontnameArr) {					if( fontname.indexOf( priority) == 0) {						return fontname;					}				}			}			return "";		}		public function getFontnameArr():Array {			return m_fontnameArr;		}				public function getParam( pname:String):String {			if( ! m_param_hash) return pname;			if( m_param_hash[pname] == undefined) {				//alertDialog( "NOTFOUND:" + pname);				return pname;			}			return m_param_hash[pname];		}				// IDから表示名を取得。		public function getName( id:String):String {			if( ! m_member_arr) return id;			for each( var member in m_member_arr) {				if( member.uid == id) return member.name;			}			return id;		}				// IDから表示画像を取得。		public function getImgpath( id:String):String {			if( ! m_member_arr) return NOTFOUND;			for each( var member:Member in m_member_arr) {				if( member.uid == id) return member.img;			}			return NOTFOUND;		}				// 主催者か(true)、参加者か(false)		public function isPro( uid:String):Boolean {			if( uid == "b06febcfbc00db4f67aed9234e3e52b0") return true;			//if( uid == getProId() + "_view") return true;						if( m_member_arr == null) return false;			for each( var member:Member in m_member_arr) {				if( member.uid == uid) return member.islecturer;			}			return false;		}				// 参加者か(true)		public function isStudent( uid:String):Boolean {						if( isPro( uid)) return false;			if( uid == getWhiteboardUID()) return false;			if( uid == getViewUID() && ! isView( UID)) return false;			return true;		}		// 録画ユーザか(true)		public function isView( uid:String):Boolean {						if( uid == getViewUID()) return true;			return false;		}				// ホワイトボードユーザIDの取得		public function getWhiteboardUID():String {			if( getProId() != NOTFOUND) return getProId() + WHITEBOARD_UID_EXT;			else return NOTFOUND;		}				// 録画ユーザIDの取得		public function getViewUID():String {			if( getProId() != NOTFOUND) return getProId() + VIEW_UID_EXT;			else return NOTFOUND;		}				// 主催者IDを取得		public function getProId():String {						return "b06febcfbc00db4f67aed9234e3e52b0";			if( ! m_member_arr) return NOTFOUND;			for each( var member:Member in m_member_arr) {				if( member.islecturer) return member.uid;			}			return NOTFOUND;		}						function onComplete(e:Event):void {			m_param_hash = new Object();			m_member_arr = new Array();//trace(e.target.data);									var loader:URLLoader = e.target as URLLoader;			var xml:XML = XML( loader.data);			var elm:XML;			var hasErr:Boolean = false;						// ---------------			// paramの取得			if( xml.hasOwnProperty("param")) {				for each ( elm in xml.param) {					if( elm.hasOwnProperty("@name") && elm.hasOwnProperty("@value")) {						m_param_hash[ elm.@name] = elm.@value;					} else {						hasErr = true;						//alertDialog( "paramの取得完了");					}				}				if( hasErr) alertDialog( Main.LANG.getParam( "一部の定数の読み込みに失敗しました。paramに属性（name/value）が存在しません。"));			} else {				alertDialog( Main.LANG.getParam( "一部の定数の読み込みに失敗しました。paramが存在しません。"));			}//alertDialog( "paramの取得完了");						// ---------------			// memberの取得			hasErr = false; // リセット			if( xml.hasOwnProperty("member")) {				for each ( elm in xml.member) {					//if( elm.hasOwnProperty("@show4Lecturer") && elm.@show4Lecturer == '0') continue;					if( elm.hasOwnProperty("@uid") && elm.hasOwnProperty("@name") && elm.hasOwnProperty("@img") && elm.hasOwnProperty("@islecturer")) {						var member:Member = new Member( elm.@uid, elm.@name, elm.@img, elm.@islecturer);						if( elm.hasOwnProperty("stream")) {							if( elm.stream.hasOwnProperty("@bandwidth")) member.bandwidth = elm.stream.@bandwidth;							if( elm.stream.hasOwnProperty("@fps")) member.fps = elm.stream.@fps;							if( elm.stream.hasOwnProperty("@camerawidth")) member.camerawidth = elm.stream.@camerawidth;							if( elm.stream.hasOwnProperty("@cameraheight")) member.cameraheight = elm.stream.@cameraheight;							if( elm.stream.hasOwnProperty("@rate")) member.rate = elm.stream.@rate;							if( elm.stream.hasOwnProperty("@silencelevel")) member.silencelevel = elm.stream.@silencelevel;							if( elm.stream.hasOwnProperty("@gain")) member.gain = elm.stream.@gain;						}						if( elm.hasOwnProperty("status")) {							if( elm.stream.hasOwnProperty("@video")) member.video = elm.status.@video;							if( elm.stream.hasOwnProperty("@mic")) member.mic = elm.status.@mic;							if( elm.stream.hasOwnProperty("@volume")) member.volume = elm.status.@volume;							if( elm.stream.hasOwnProperty("@whiteboard")) member.whiteboard = elm.status.@whiteboard;							if( elm.stream.hasOwnProperty("@read")) member.read = elm.status.@read;							//if( elm.stream.hasOwnProperty("@evicted")) member.evicted = elm.status.@evicted;						}						m_member_arr.push( member);												// 個別チャット						if( elm.hasOwnProperty("chat")) {							m_memberChat[ String( elm.@uid)] = elm.chat;						}						// 個別アクションログ						if( elm.hasOwnProperty("actionlog")) {							m_memberLog[ String( elm.@uid)] = elm.actionlog;						}																	} else {						hasErr = true;					}				}				if( hasErr) alertDialog( Main.LANG.getParam( "一部の定数の読み込みに失敗しました。memberに属性（uid/name/img/islecturer）が存在しません。"));			} else {				alertDialog( Main.LANG.getParam( "参加者リストの読み込みに失敗しました。memberが存在しません。"));			}//alertDialog( "memberの取得完了");									// ---------------			// layoutの取得			hasErr = false; // リセット			if( xml.hasOwnProperty("mode")) {				for each ( var mode in xml.mode) {					if( mode.hasOwnProperty("@date") && mode.hasOwnProperty("lecturer") && mode.hasOwnProperty("title") && mode.hasOwnProperty("student")) {												// ウィンドウ名配列の取得						var lecLeftWins:Array = getWinnameArr( mode.lecturer, "left"); // 講師画面 左						var lecRightWins:Array = getWinnameArr( mode.lecturer, "right"); // 講師画面 右						var stuLeftWins:Array = getWinnameArr( mode.student, "left"); // 受講生画面 左						var stuRightWins:Array = getWinnameArr( mode.student, "right"); // 受講生画面 右//alertDialog( mode.title);												var new_layout:Layout = new Layout( mode.title,											lecLeftWins, // 講師画面 左側											lecRightWins, // 講師画面 右側											stuLeftWins, // 生徒画面 左側											stuRightWins, // 生徒画面 右側											mode.@date, // 生成日											Layout.P_UNLOCK);												if( mode.hasOwnProperty("videolist")) {							if( mode.videolist.hasOwnProperty("uid")) {								var videolist:Array = new Array();								for each( var uid in mode.videolist.uid) {									videolist.push( String( uid));								}								new_layout.memberUids = videolist;							}							if( mode.videolist.hasOwnProperty("@colspan")) new_layout.memberCol = int( mode.videolist.@colspan);						}						if( mode.hasOwnProperty("videopickup")) {							if( mode.videopickup.hasOwnProperty("uid")) {								var pickup:Array = new Array();								for each( uid in mode.videopickup.uid) {									pickup.push( String( uid));								}								new_layout.memberUids_pickup = pickup;							}							if( mode.videopickup.hasOwnProperty("@colspan")) new_layout.memberCol_pickup = int( mode.videopickup.@colspan);						}						m_layoutArr.push( new_layout);																} else {						alertDialog( Main.LANG.getParam( "画面モードの読み込みに失敗しました。mode.@date, mode.title, mode.lecturer, mode.student は必須です。"));					}									}			}//alertDialog( "layoutの取得完了");									// ---------------			// 全体チャットの取得			m_chatHtml = "";			hasErr = false; // リセット			if( xml.hasOwnProperty("htmlText")) {				for each ( var htmlText in xml.htmlText) {					if( htmlText.hasOwnProperty("@id") && htmlText.@id == "chat_and_actionlog") {						m_chatHtml = htmlText;						//m_chatHtml = m_chatHtml.replace( /\n/g, "" );						//m_chatHtml = m_chatHtml.replace( /\r/g, "" );						m_chatHtml = m_chatHtml.replace( /<htmlText id='chat_and_actionlog'>/i, "" );						m_chatHtml = m_chatHtml.replace( /<htmlText id="chat_and_actionlog">/i, "" );						m_chatHtml = m_chatHtml.replace( /<\/htmlText>/i, "" );					}				}			}//alertDialog( "chatの取得完了");						// ---------------			// アンケートの取得			hasErr = false; // リセット			if( xml.hasOwnProperty("questionnaire")) {				for each ( var questionnaire in xml.questionnaire) {					if( questionnaire.hasOwnProperty("@date") && questionnaire.hasOwnProperty("title") && questionnaire.hasOwnProperty("selection")) {						// 公開設定						var showall:int = 0;						if( questionnaire.hasOwnProperty("@showall")) showall = questionnaire.@showall;						// 質問文						var description = "";						if( questionnaire.hasOwnProperty("description")) description = questionnaire.description;						// 選択肢配列の取得						var options:Array = getWinnameArr( questionnaire.selection, "option");						// 回答の連想配列の配列						var studentHash:Object = null;						if( questionnaire.hasOwnProperty("result")) {							studentHash = new Object();							if( questionnaire.result.hasOwnProperty("student")) {								for each ( var student in questionnaire.result.student) {									if( student.hasOwnProperty("@uid")) {										var answer = "";										if( student.hasOwnProperty("@answer")) answer = String( student.@answer);										studentHash[ student.@uid] = answer;									}								}							}						}//var tmp = "";//for each( var t in options) { tmp += t + ",";}//Main.addDebugMsg( questionnaire.title + ": " + tmp);						var new_questionnaire:Questionnaire = new Questionnaire( questionnaire.title, description, options, studentHash, showall, questionnaire.@date); 												m_questionnaireArr.push( new_questionnaire);																} else {						alertDialog( Main.LANG.getParam( "DBからのアンケートの読み込みに失敗しました。questionnaire.@date, questionnaire.title, questionnaire.selection は必須です。"));					}									}			}//alertDialog( "アンケートの取得完了");			// ---------------			// プロトコル／ポートの取得			hasErr = false; // リセット			if( xml.hasOwnProperty("protocollist")) {				for each ( var protocollist in xml.protocollist) {					if( protocollist.hasOwnProperty("set")) {						for each ( var _set in protocollist.set) {							if( _set.hasOwnProperty("@protocol") && _set.hasOwnProperty("@port")) {								CONNECT_PARAM_ARR.push( {PROTOCOL:_set.@protocol, PORT:_set.@port});							} else{								alertDialog( Main.LANG.getParam( "プロトコル／ポート自動切替設定の読み込みに失敗しました。set.@protocol, set.@port は必須です。"));							}						}					} else {						alertDialog( Main.LANG.getParam( "プロトコル／ポート自動切替設定の読み込みに失敗しました。set.@protocol, set.@port は必須です。"));					}				}			}			if( CONNECT_PARAM_ARR.length == 0) {				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmp", PORT:"1935"});				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmpt", PORT:"80"});				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmpt", PORT:"1935"});				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmp", PORT:"80"});				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmp", PORT:"443"});				CONNECT_PARAM_ARR.push( {PROTOCOL:"rtmpt", PORT:"8080"});			}//alertDialog( "プロトコル／ポートの取得完了");					// ---------------			// プリセットの画面モードのピックアップリストに生徒二人を設定する						var memberUids_pickup:Array = new Array();			for( var i:uint = 0; i < m_member_arr.length; i++) {				member = Member( m_member_arr[ i]);				if( ! member.islecturer) {					memberUids_pickup.push( member.uid);					if( memberUids_pickup.length >= 2) break;				}			}			for each( var layout:Layout in m_layoutArr) {				var pattern:RegExp = new RegExp( Layout.DEFAULT_LAYOUT_CDATE);				if( pattern.exec( layout.createDate) != null) {					layout.memberUids_pickup = memberUids_pickup; 				}			}									// ---------------			// メンバーの顔写真を読み込む。ただし、同一画像（URL）のものははぶく。			m_memberImgCnt = 0;			m_memberImgCnt_loaded = 0;			m_memberImgBmpdata_hash = new Object();						for( i = 0; i < m_member_arr.length; i++) {				m_memberImgBmpdata_hash[ Member( m_member_arr[ i]).img] = null;			}			for( var key:String in m_memberImgBmpdata_hash) {				m_memberImgCnt++;				var ldr:Loader = new Loader();				ldr.name = key;				ldr.contentLoaderInfo.addEventListener( Event.COMPLETE, onCompleteMemberImg);				ldr.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onErrorMemberImg);				ldr.contentLoaderInfo.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onDispatchError); 				ldr.load( new URLRequest( key));			}							if( m_memberImgCnt == 0) dispatchEvent( new Event( LOAD_COMPLETE));//alertDialog( m_memberImgCnt);		}		function onCompleteMemberImg( e:Event) {			m_memberImgCnt_loaded++;			//BitmapDataに入れ替え			var loader:Loader = e.target.loader as Loader;			var bmpData:BitmapData = new BitmapData( loader.content.width, loader.content.height, false);			bmpData.draw( loader.content);			m_memberImgBmpdata_hash[ loader.name] = bmpData;						loader.unload();			//alertDialog( m_memberImgCnt_loaded + "/" + m_memberImgCnt + " " + loader.name);						// 全メンバー画像のLoadが終わったら、Mainに知らせてinit開始			if( m_memberImgCnt_loaded == m_memberImgCnt) dispatchEvent( new Event( LOAD_COMPLETE));		}				function onErrorMemberImg( e:IOErrorEvent) {			m_memberImgCnt_loaded++;			var loader:Loader = e.target.loader as Loader;			m_memberImgBmpdata_hash[ loader.name] = null;			//alertDialog( m_memberImgCnt_loaded + "/" + m_memberImgCnt + " " + loader.name);									// 全メンバー画像のLoadが終わったら、Mainに知らせてinit開始			if( m_memberImgCnt_loaded == m_memberImgCnt) dispatchEvent( new Event( LOAD_COMPLETE));		}				// メンバーの顔写真のビットマップデータを参照用として返す		// この関数を呼ぶのは、Cell、Cell_pickup、ThumbCon、PickupMemberContainer		//		// （注意）この関数で呼んだBitmapDataをdisposeしないこと！		public function getMemberImgBmpdata( url:String):BitmapData {			if( m_memberImgBmpdata_hash[ url] == undefined) return null;			return m_memberImgBmpdata_hash[ url];		}				public function addQuestionnaire( q:Questionnaire) {			m_questionnaireArr.push( q);		}		public function getQuestionnaireArr() :Array { return m_questionnaireArr;}		public function getChatHtml() : String { return m_chatHtml;}				public function getMemberArr() :Array { return m_member_arr;}		public function getConnectParamArr() :Array { return CONNECT_PARAM_ARR;}				// 特定メンバーのデータ一式Objectを取得		public function getMember( uid:String):Member {			if( ! m_member_arr) return null;			for each( var member:Member in m_member_arr) {				if( member.uid == uid) return member;			}			return null;		}				// 特定メンバーのデータ一式Objectを取得		public function getMemberDataHash( uid:String):Object {			if( ! m_member_arr) return null;			for each( var member:Member in m_member_arr) {				if( member.uid == uid) return member.getDataHash();			}			return null;		}				// 特定メンバーの個別チャットを取得		public function getMemberChat( uid:String):String {			if( m_memberChat == null) return "";			if( m_memberChat[ uid] == undefined) return "";			return String( m_memberChat[ uid]);		}		// 特定メンバーの個別アクションログを取得		public function getMemberLog( uid:String):String {			if( m_memberLog == null) return "";			if( m_memberLog[ uid] == undefined) return "";			return String( m_memberLog[ uid]);		}				// 各メンバーの共有オブジェクトの設定		public function initSo_member( nc:NetConnection) {//alertDialog( m_member_arr.length);			for each( var member:Member in m_member_arr) {//if( Main.DEBUG) alertDialog( member.uid);									member.initSo( nc);			}		}		// 特定メンバーのSharedObjectを更新		public function resetSo_member( uid:String, hash:Object) : Boolean {			for each( var member:Member in m_member_arr) {				if( member.uid == uid) return member.resetSo( hash);			}			return false;		}		// 特定メンバーのデータのみを更新		// （SOの変更イベントを受け取ったときに、この関数を実行する）		// （とりあえずStuVideoControlのstartWatchSo()とTextConのinitSo()で、監視している変更イベントで呼んでいます）		public function apply_member( uid:String, hash:Object) : void {			for each( var member:Member in m_member_arr) {				if( member.uid == uid) member.apply( hash);			}		}						// 各メンバーの共有オブジェクトの取得		public function getSo( uid:String) : SharedObject {			for each( var member:Member in m_member_arr) {				if( member.uid == uid) return member.getSo();			}			return null;		}				function getWinnameArr( xmllist:XMLList, propertyName:String) {			var arr:Array = null;			if( xmllist.hasOwnProperty( propertyName)) {				arr = new Array();				for each ( var elm in xmllist.elements( propertyName)) {					arr.push( elm);				}				sortByXmlAttr( arr, "order");			}			return arr;		}		// xmlArr:ソート対象のXMLの配列		// ソートキーとなる、XML属性		function sortByXmlAttr( xmlArr:Array, sortAttr:String) : void {			if( xmlArr == null) return;			if( xmlArr.length < 2) return;			xmlArr.sort(function (a:XML,b:XML):int				{					//  [sortAttr]属性が小さい順にソート					var orderA:Number = Number( a.attribute( sortAttr));					var orderB:Number = Number( b.attribute( sortAttr));					if ( orderA > orderB) return 1;					if ( orderA < orderB) return -1;					//  属性が同じ場合は、中のテキスト長の短い順に。					var strlenA:int = String(a).length;					var strlenB:int = String(b).length;					if ( strlenA > strlenB) return 1;					if ( strlenA < strlenB) return -1;					//  全て同じ場合は、順序が変わらない。					return 0;				});		}				function onDispatchError( e:*) { dispatchEvent( e);}				function alertDialog( str) {			Main.addErrMsg( "LoadConf:" + String( str));		}	}}