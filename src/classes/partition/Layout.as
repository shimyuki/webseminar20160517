package partition {			// 画面モード情報格納クラス	public class Layout {		static public const WINNAME_VIDEO:String = Main.LANG.getParam( "講師映像");		static public const WINNAME_QUICK:String = Main.LANG.getParam( "受講生クイック一覧");		static public const WINNAME_CHAT:String = Main.LANG.getParam( "チャットとアクションログ");		static public const WINNAME_WHITEBOARD:String = Main.LANG.getParam( "ホワイトボード");		static public const WINNAME_MEMBER:String = Main.LANG.getParam( "受講生一覧");		static public const WINNAME_SETTING:String = Main.LANG.getParam( "環境設定");		static public const WINNAME_Q:String = Main.LANG.getParam( "アンケート");		static public const WINNAME_SEND:String = Main.LANG.getParam( "ファイル送信");		static public const WINNAME_RECEIVE:String = Main.LANG.getParam( "受信ファイル");		static public const WINNAME_CHAT_STU:String = Main.LANG.getParam( "個別チャット");		static public const WINNAME_JOINLOG:String = Main.LANG.getParam( "入室視聴者");		static public const WINNAME_SYSTEMLOG:String = "system log";		static public const WINNAME_VACANT:String = Main.LANG.getParam( "空");				static public const SUB_WINNAME_WHITEBOARD_IMGDOC = Main.LANG.getParam( "資料");				static public const WINNAMES_SUB:Array = [ // サブカラムにしか入らないウインドウ名												  WINNAME_VIDEO,												  WINNAME_QUICK,												  WINNAME_CHAT												  ];		static public const WINNAMES_MAIN:Array = [ // メインカラムにしか入らないウインドウ名												   WINNAME_MEMBER,												   WINNAME_WHITEBOARD												  ];		static public const WINNAMES_FULL:Array = WINNAMES_MAIN;				static public const LAYOUT_SUBMAIN:uint = 0; // 左がサブ、右がメイン		static public const LAYOUT_MAINSUB:uint = 1; // 左がメイン、右がサブ		static public const LAYOUT_FULL:uint = 2; // 左右に分けない		static public const DEFAULT_LAYOUT_CDATE = "0000-00-00 00:00:";				private var _createDate:String;		private var _name:String;		private var _lecLeftWinNames:Array;		private var _lecRightWinNames:Array;		private var _lecLayout:uint;		private var _stuLeftWinNames:Array;		private var _stuRightWinNames:Array;		private var _stuLayout:uint;				// 受講生一覧の列数		private var _memberCol:int = 5;		private var _memberUids:Array = null;				// 受講生一覧にのせるメンバー		private var _memberCol_pickup:int = 2;		private var _memberUids_pickup:Array = null;				private var _partitionLock:Boolean = false; // パーティションをロックするか（P_LOCK or P_UNLOCK）		static public const P_LOCK:Boolean = true; // パーティションをロックする		static public const P_UNLOCK:Boolean = false; // パーティションをロックしない				private var _wbH:Number; // ホワイトボードの高さ						public function Layout( namae:String,									  lecLeftWinNames:Array,									  lecRightWinNames:Array,									  stuLeftWinNames:Array,									  stuRightWinNames:Array,									  createDate:String,									  partitionLock:Boolean) {			_createDate = createDate;			_name = namae;			_lecLeftWinNames = lecLeftWinNames;			_lecRightWinNames = lecRightWinNames;			_stuLeftWinNames = stuLeftWinNames;			_stuRightWinNames = stuRightWinNames;						_lecLayout = getLayout( lecLeftWinNames, lecRightWinNames);			_stuLayout = getLayout( stuLeftWinNames, stuRightWinNames);						_memberUids_pickup = []; // ピックアップリストはnullにはしない			_wbH = Main.WB_H;						_partitionLock = partitionLock;		}				public function updateByHash( hash:Object) {			_name = hash.name;			_lecLeftWinNames = hash.lecLeftWinNames;			_lecRightWinNames = hash.lecRightWinNames;			_stuLeftWinNames = hash.stuLeftWinNames;			_stuRightWinNames = hash.stuRightWinNames;			_memberCol = hash.memberCol;			_memberUids = hash.memberUids;			_memberCol_pickup = hash.memberCol_pickup;			_memberUids_pickup = hash.memberUids_pickup;						_lecLayout = getLayout( _lecLeftWinNames, _lecRightWinNames);			_stuLayout = getLayout( _stuLeftWinNames, _stuRightWinNames);						_partitionLock = hash.partitionLock;						_wbH = hash.wbH;		}				public function getDataHash() : Object {			// この項目を増やしたら、LoadConfのupdateLayoutArr()にも追加すべし。			var hash:Object = new Object();			hash.name = _name;			hash.createDate = _createDate;			hash.lecLeftWinNames = _lecLeftWinNames;			hash.lecRightWinNames = _lecRightWinNames;			hash.stuLeftWinNames = _stuLeftWinNames;			hash.stuRightWinNames = _stuRightWinNames;			hash.memberCol = _memberCol;			hash.memberUids = _memberUids;			hash.memberCol_pickup = _memberCol_pickup;			hash.memberUids_pickup = _memberUids_pickup;			hash.partitionLock = _partitionLock;			hash.wbH = _wbH;			return hash;		}				function getLayout( leftWinnames:Array, rightWinnames:Array):uint {						// 左カラムは必須なので、無ければ警告表示			if( leftWinnames == null || leftWinnames.length == 0) {				Main.addErrMsg( "ERROR1:" +  Main.LANG.getReplacedSentence( "画面モード[%s]の読み込みに失敗しました。左カラムが空です。", _name));			} else {							// 左カラム(orフル)の整合性をチェック				if( rightWinnames == null || rightWinnames.length == 0) {					// 左カラムおんりー					if( isFull( leftWinnames)) return LAYOUT_FULL;					else Main.addErrMsg( "ERROR2:" +  Main.LANG.getReplacedSentence( "画面モード[%s]の読み込みに失敗しました。カラムのウィンドウ指定が不正です。", _name));								} else {					if( isMain( leftWinnames) && isSub( rightWinnames)) return LAYOUT_MAINSUB;					else if( isSub( leftWinnames) && isMain( rightWinnames)) return LAYOUT_SUBMAIN;					else Main.addErrMsg( "ERROR3:" +  Main.LANG.getReplacedSentence( "画面モード[%s]の読み込みに失敗しました。カラムのウィンドウ指定が不正です。", _name));				}			}						return LAYOUT_SUBMAIN; // カラムのウィンドウ指定が不正の場合はここでとりあえずLAYOUT_SUBMAINをreturn		}				function isSub( winnames:Array):Boolean { return checkWin( winnames, WINNAMES_SUB);}		function isMain( winnames:Array):Boolean { return checkWin( winnames, WINNAMES_MAIN);}		function isFull( winnames:Array):Boolean { return checkWin( winnames, WINNAMES_FULL);}				function checkWin( chkArr:Array, constArr:Array):Boolean {			for each( var chkWin:String in chkArr) {				if( chkWin == WINNAME_VACANT) continue;				var exist:Boolean = false;				for each( var constWin:String in constArr) {					if( constWin == chkWin) {						exist = true;						break;					}				}				if( ! exist) return false;			}			return true;		}				public function set name( n:String) { _name = n;}		public function set lecLeftWinNames( arr:Array) { _lecLeftWinNames = arr;}		public function set lecRightWinNames( arr:Array) { _lecRightWinNames = arr;}		public function set lecLayout( lecLayout:uint) { _lecLayout = lecLayout;}		public function set stuLeftWinNames( arr:Array) { _stuLeftWinNames = arr;}		public function set stuRightWinNames( arr:Array) { _stuRightWinNames = arr;}		public function set stuLayout( stuLayout:uint) { _stuLayout = stuLayout;}		public function set createDate( date:String) { _createDate = date;}				public function set memberCol( col:int) { _memberCol = col;}		public function set memberCol_pickup( col:int) { _memberCol_pickup = col;}		public function set memberUids( arr:Array) { _memberUids = arr;}		public function set memberUids_pickup( arr:Array) { if( arr != null) _memberUids_pickup = arr;} // ピックアップリストはnullにはしない		public function set partitionLock( b:Boolean) { _partitionLock = b;}		public function set wbH( val:Number) { _wbH = val;}				public function get name():String { return _name;}		public function get lecLeftWinNames():Array { return _lecLeftWinNames;}		public function get lecRightWinNames():Array { return _lecRightWinNames;}		public function get lecLayout():uint { return _lecLayout;}		public function get stuLeftWinNames():Array { return _stuLeftWinNames;}		public function get stuRightWinNames():Array { return _stuRightWinNames;}		public function get stuLayout() :uint{ return _stuLayout;}		public function get createDate():String { return _createDate;}		public function get memberCol():int { return _memberCol;}		public function get memberCol_pickup():int { return _memberCol_pickup;}		public function get memberUids():Array { return _memberUids;}		public function get memberUids_pickup():Array { return _memberUids_pickup;}		public function get partitionLock():Boolean { return _partitionLock;}		public function get wbH():Number{ return _wbH;}					}}