package partition {	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import window.whiteboard.*;	import flash.utils.Timer;		// 各パーティションコンテナのパーティションがドラッグされたときの一括管理	public class PartitionDragManager extends Sprite {				private var m_pConArr:Array = null;		private var m_targetPCon:PartitionContainer = null;		private var m_all_base:PartitionContainer = null;				private var m_timer:Timer;		public function PartitionDragManager() {						// パーティション全監視終了のタイマー			m_timer = new Timer( 1000, 1);			m_timer.addEventListener( TimerEvent.TIMER, onTimer);						addEventListener( Event.ADDED_TO_STAGE, function( e:*) {				// パーティションのドラッグ開始の監視開始				stage.addEventListener( MouseEvent.MOUSE_DOWN, onMouseDown_stage);			});			addEventListener( Event.REMOVED_FROM_STAGE, function( e:*) {				stage.removeEventListener( MouseEvent.MOUSE_DOWN, onMouseDown_stage);			});		}				public function init( all_base:PartitionContainer = null, partitionContainerArr:Array = null) {			if( m_all_base == null) m_all_base = all_base;			var pCon:PartitionContainer;			if( m_pConArr != null) {				while( m_pConArr.length) {					pCon = m_pConArr.pop();					if( pCon != null) {						pCon.removeEventListener( Partition.ROLL_OVER, onRollOver_partition);						pCon.removeEventListener( Partition.ROLL_OUT, onRollOut_partition);						pCon.removeEventListener( ResizablePartitionContainer.RESIZE, onAutoResizeResizable);						pCon.dispose();						pCon = null;					}				}			} else {				m_pConArr = new Array();			}						if( partitionContainerArr != null) {				for each( pCon in partitionContainerArr) {					addPCon( pCon);				}			}			//m_all_base.replace_allBase();			//replaceOnce();		}		public function addPCon( pCon:PartitionContainer) {						m_pConArr.push( pCon);			pCon.addEventListener( Partition.ROLL_OVER, onRollOver_partition);			pCon.addEventListener( Partition.ROLL_OUT, onRollOut_partition);			pCon.setCursor( true);						if( pCon as ResizablePartitionContainer != null/* && pCon as WhiteboardContainer == null*/) {				pCon.addEventListener( ResizablePartitionContainer.RESIZE, onAutoResizeResizable);			}					}						function onAutoResizeResizable( e:Event) {			replaceOnce();		}				public function onAutoResize( e:Event = null) {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "onAutoResize");			replaceOnce();		}				function replaceOnce() {			for each( var pCon:PartitionContainer in m_pConArr) {				pCon.startEnterFrame();			}			m_timer.reset();			m_timer.start();		}				function onTimer( e:TimerEvent) {			if( m_pConArr == null) return;			for each( var pCon:PartitionContainer in m_pConArr) {				pCon.stopEnterFrame();			}			m_all_base.replace();						// Main_wbのonResizeに知らせる			if( Main.CONF.UID == Main.CONF.getWhiteboardUID()) dispatchEvent( new Event( "onAutoResize finished"));		}				function onRollOver_partition( e:Event) {			m_targetPCon = e.target as PartitionContainer;//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "PartitionDragManager:onRollOver_partition" + m_targetPCon + Math.random());			for each( var pCon:PartitionContainer in m_pConArr) {				pCon.startEnterFrame();			}		}		function onRollOut_partition( e:Event) {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "PartitionDragManager:onRollOut_partition" + Math.random());			m_targetPCon = null;			for each( var pCon:PartitionContainer in m_pConArr) {				pCon.stopEnterFrame();			}			m_all_base.replace();		}				// ステージがクリックされた時		function onMouseDown_stage( e:MouseEvent) :void{			if( m_targetPCon != null) {				// パーティションのドラッグ開始				stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMove_stage);				stage.addEventListener( MouseEvent.MOUSE_UP, onMouseUp_stage);			}		}				// パーティションのドラッグ中		function onMouseMove_stage( e:MouseEvent) {			if( m_targetPCon != null) m_targetPCon.updatePartitionPosi();		}				// パーティションのドラッグ終了		function onMouseUp_stage( e:MouseEvent) {			stage.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMove_stage);			stage.removeEventListener( MouseEvent.MOUSE_UP, onMouseUp_stage);		}			}}