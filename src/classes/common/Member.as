package common {	import flash.events.*;	import flash.net.*;	import flash.media.SoundCodec;	import window.setting.StreamComponents;		// 参加者（講師or受講者）	public class Member extends EventDispatcher {		// （注意）項目の追加や削除があった場合は、MemberSoWatcherのisStreamChanged()、isStatusChanged()の変更も必要		// このクラスのapply()、isEqualCamSetting()、isEqualMicSetting()の変更も。		// StreamComponentsのgetHash()にも変更が必要かも。				static public const DEFAULT_BANDWIDTH:Number = 800000;		static public const DEFAULT_FPS:Number = 15;		static public const DEFAULT_CAMERA_W:Number = 160;		static public const DEFAULT_CAMERA_H:Number = 120;		static public const DEFAULT_KHZ:Number = 22;		static public const DEFAULT_SILENCE_LEVEL:Number = 0.3;		static public const DEFAULT_GAIN:Number = 50;		static public const DEFAULT_AUDIO_CODEC:String = SoundCodec.SPEEX;//SoundCodec.NELLYMOSER;				static public const DELIVERY_NORMAL:String = "通常配信";		static public const DELIVERY_IOS:String = "iOS用配信";		static public const DEFAULT_DELIVERY:String = DELIVERY_NORMAL;				public static const STATUS_ON:uint = 1;		private const STATUS_OFF:uint = 0;		private const DEFAULT_VIDEO:uint = STATUS_ON;		//private const DEFAULT_MIC:uint = STATUS_OFF;		private const DEFAULT_VOLUME:Number = 0.5;		private const DEFAULT_WB:uint = STATUS_OFF;		private const DEFAULT_DOC:uint = STATUS_OFF;		private const DEFAULT_EVICTED:uint = STATUS_OFF;				// 必須項目		public var uid:String;		public var name:String;		public var img:String;		public var islecturer:Boolean;				// streamの設定。		public var bandwidth:Number;		public var fps:Number;		public var camerawidth:Number;		public var cameraheight:Number;		public var rate:Number;		public var silencelevel:Number;		public var gain:Number;		public var video:uint; // ステータス：映像		public var mic:uint; // ステータス：音声		public var volume:Number; // ステータス：ボリューム		public var audio_codec:String; // 音声コーデック（Speex対応用）		public var whiteboard:uint; // ステータス：ホワイトボード書き込み権限		public var read:uint; // ステータス：資料の自由閲覧権限		public var evicted:uint; // ステータス：強制退去		public var delivery:String; // 配信タイプ				//public var chatHtml:String; // 個別チャット		//public var logHtml:String; // 個別アクションログ				private var so:SharedObject = null;				public function Member( uid, name, img, islecturer) {			this.uid = uid;			this.name = name;			this.img = img;			this.islecturer = ( islecturer == '1')?true:false;						this.bandwidth = DEFAULT_BANDWIDTH;			this.fps = DEFAULT_FPS;			this.camerawidth = DEFAULT_CAMERA_W;			this.cameraheight = DEFAULT_CAMERA_H;			this.rate = DEFAULT_KHZ;			this.silencelevel = DEFAULT_SILENCE_LEVEL;			this.gain = DEFAULT_GAIN;			this.video = DEFAULT_VIDEO;			this.mic = ( islecturer == '1')?STATUS_ON:STATUS_OFF;			this.volume = DEFAULT_VOLUME;			this.audio_codec = DEFAULT_AUDIO_CODEC;			this.whiteboard = DEFAULT_WB;			this.read = DEFAULT_DOC;			this.evicted = DEFAULT_EVICTED;						//this.chatHtml = "";			//this.logHtml = "";					}				// ProVideoやCamWbSlideやStuVideoControlやMemberContainerやTextCon（受講生一覧の個々のリスト）が		// 配信ストリーム情報が変更されるのを監視するために		// LoadConfのgetSoを経由して呼ばれる。		// あくまで監視のためだけ。値の変更は、LoadConfのresetSo_member()を通じてしか行わない予定。		public function getSo():SharedObject { return so;}				public function initSo( nc:NetConnection) {			if( so == null) {				try {					so = SharedObject.getRemote( Main.CONF.SO_NAME_MEMBER + uid, nc.uri, true);					so.fps = LoadConf.SO_FPS_MEMBER;				} catch( e:Error) {					alertDialog( Main.LANG.getParam( "通信エラー") +  " cant't create SharedObject for " + uid);					return;				}				so.addEventListener( SyncEvent.SYNC, onSyncInit);				function onSyncInit( e:SyncEvent):void {					if( so.data.hash == undefined ) {						// このメンバーのSOが未設定のとき						// 今このクラスに設定されている値デフォルトでSOを全更新						so.data.hash = getDataHash();						so.setDirty( "hash");					}					so.removeEventListener( SyncEvent.SYNC, onSyncInit);				}			}			so.connect( nc);		}						public function resetSo( hash:Object) : Boolean {						if( hash != null) {				apply( hash);								if( so != null) {					so.data.hash = getDataHash();					so.setDirty( "hash");//Main.addDebugMsg( "Member:resetSo: " + uid);					return true;				}			}			return false;					}		public function apply( hash:Object) : void {						if( hash != null) {				// hashに設定されている値のみ、自身のデータを上書き				//uid = hash.uid != undefined ? hash.uid : uid;				img = hash.img != undefined ? hash.img : img;				islecturer = hash.islecturer != undefined ? hash.islecturer : islecturer;				bandwidth = hash.bandwidth != undefined ? hash.bandwidth : bandwidth;				fps = hash.fps != undefined ? hash.fps : fps;				camerawidth = hash.camerawidth != undefined ? hash.camerawidth : camerawidth;				cameraheight = hash.cameraheight != undefined ? hash.cameraheight : cameraheight;				rate = hash.rate != undefined ? hash.rate : rate;				silencelevel = hash.silencelevel != undefined ? hash.silencelevel : silencelevel;				gain = hash.gain != undefined ? hash.gain : gain;				video = hash.video != undefined ? hash.video : video;				mic = hash.mic != undefined ? hash.mic : mic;				volume = hash.volume != undefined ? hash.volume : volume;				audio_codec = hash.audio_codec != undefined ? hash.audio_codec : audio_codec;				whiteboard = hash.whiteboard != undefined ? hash.whiteboard : whiteboard;				read = hash.read != undefined ? hash.read : read;				evicted = hash.evicted != undefined ? hash.evicted : evicted;			}		}				// Cameraに対する設定値に関してのみ比較する。		public function isEqualCamSetting( compareHash:Object) {			if( compareHash != null) {								if( bandwidth != compareHash.bandwidth) return false;				if( fps != compareHash.fps) return false;				if( camerawidth != compareHash.camerawidth) return false;				if( cameraheight != compareHash.cameraheight) return false;				return true;// カメラの設定値はおなじ。			}			return false; 		}		// Microphoneに対する設定値に関してのみ比較する。		public function isEqualMicSetting( compareHash:Object) {			if( compareHash != null) {				if( rate != compareHash.rate) return false;				if( silencelevel != compareHash.silencelevel) return false;				if( gain != compareHash.gain) return false;				if( audio_codec != compareHash.audio_codec) return false;				return true; // マイクの設定値はおなじ。			}			return false;		}		public function getDataHash() :Object {			var hash = new Object();			hash.uid = uid;			hash.name = name;			hash.img = img;			hash.islecturer = islecturer;			hash.bandwidth = bandwidth;			hash.fps = fps;			hash.camerawidth = camerawidth;			hash.cameraheight = cameraheight;			hash.rate = rate;			hash.silencelevel = silencelevel;			hash.gain = gain;			hash.video = video;			hash.mic = mic;			hash.volume = volume;			hash.audio_codec = audio_codec;			hash.whiteboard = whiteboard;			hash.read = read;			hash.evicted = evicted;						return hash;					}		function alertDialog( str:String) {			Main.addErrMsg( "Member:" + str);		}	}}