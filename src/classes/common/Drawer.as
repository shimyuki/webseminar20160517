package common {	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;		// 題名（m_handle）をクリックすると開いたり閉じたりするやつ	public class Drawer extends Sprite {		static public const SIZE_CHANGED:String = "SIZE_CHANGED";		private const HANDLE_H:Number = 50;		private var m_handle:Sprite;		private var m_contents:Sprite;		private var m_opened:Boolean = true;		private var m_line:Shape;		private var m_arrow:Arrow01;		private var m_clickObj:Sprite;		private var m_contents_h:Number = 20;				public function Drawer( handleName:String, contents:Sprite, contents_h:Number = -9999) {						m_contents = contents;			m_contents_h = ( contents_h != -9999) ? contents_h : ( m_contents != null) ? m_contents.height : 0;			if( m_contents != null) m_contents.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onContentsHeightChanged);						var txt:TextField = TextField( addChild( new TextField()));			txt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 13, 0x000000);			txt.autoSize = TextFieldAutoSize.LEFT;			txt.text = handleName;			txt.x = 25;			txt.y = ( HANDLE_H - txt.height) / 2;						m_arrow = Arrow01( addChild( new Arrow01()));			m_arrow.x = 5;			m_arrow.y = HANDLE_H / 2;			m_arrow.rotation = 90; // opened						m_clickObj = Sprite( addChild( new Sprite()));			m_clickObj.graphics.beginFill( 0, 0);			m_clickObj.graphics.drawRect( 0, 0, txt.x + txt.width + 10, HANDLE_H);			m_clickObj.graphics.endFill();			m_clickObj.buttonMode = true;			m_clickObj.addEventListener( MouseEvent.CLICK, onClick);						if( m_contents != null) addChild( m_contents);			if( m_contents != null) m_contents.y = m_clickObj.y + HANDLE_H;						// しきり線			m_line = Shape( addChild( new Shape()));			m_line.graphics.lineStyle( 1, 0xd9d9d9, 1, false, "none");			m_line.graphics.lineTo( 1, 0);			if( m_contents != null) m_line.y = m_contents.y + m_contents_h + 10;		}		public function setContents( contents:Sprite) {			if( m_contents != null) {				m_contents.removeEventListener( DrawerEvent.CONTENTS_H_CHANGED, onContentsHeightChanged);				if( contains( m_contents)) removeChild( m_contents);			}			m_contents = contents;			if( m_contents_h == 0) m_contents_h = m_contents.height;			m_contents.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onContentsHeightChanged);			//addChild( m_contents);			m_contents.y = m_clickObj.y + HANDLE_H;			m_line.y = m_clickObj.y + HANDLE_H;			close();			dispatchEvent( new Event( SIZE_CHANGED));		}				public function open() {			if( m_opened) return;			onClick();		}		public function close() {			if( ! m_opened) return;			onClick();		}		function onContentsHeightChanged( e:DrawerEvent) {			m_contents_h = e.h;			if( m_contents) m_line.y = m_contents.y + m_contents_h + 10;			dispatchEvent( new Event( SIZE_CHANGED));		}		function onClick( e:MouseEvent = null) {			if( m_opened) {				m_arrow.rotation = 0;				if( m_contents && contains( m_contents)) removeChild( m_contents);				m_line.y = m_clickObj.y + HANDLE_H;				m_opened = false;			} else {				m_arrow.rotation = 90;				if( m_contents) addChild( m_contents);				if( m_contents) m_line.y = m_contents.y + m_contents_h + 10;				m_opened = true;			}						dispatchEvent( new Event( SIZE_CHANGED));		}				public function getViewHeight():Number {			return m_line.y;		}		public function setViewWidth( _w:Number) {			m_line.scaleX = _w;		}	}}