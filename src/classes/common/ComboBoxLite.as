package common {	import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.events.*;	// 軽いコンボボックス	public class ComboBoxLite extends Sprite {				private var m_selectedText:TextField;		private var m_bgUp;		private var m_bgOver;		private var m_bgDown;		//private var m_bgDisable;		private var m_mainClickArea:Sprite;		private var DEFAULT_W:Number;		private var DEFAULT_H:Number;		private var m_comboItemArr:Array = new Array();		private var m_itemCon:Sprite = new Sprite();				public var prompt:String = "---";		private var m_selectedItem:Object = null;				public function ComboBoxLite() {			m_bgUp = addChild( new ComboBox_upSkin());			m_bgOver = addChild( new ComboBox_overSkin());			m_bgDown = addChild( new ComboBox_downSkin());			//m_bgDisable = addChild( new ComboBox_disabledSkin());			m_bgOver.visible = m_bgDown.visible = /*m_bgDisable.visible = */false;			DEFAULT_W = m_bgUp.width;			DEFAULT_H = m_bgUp.height;						m_selectedText = TextField( addChild( new TextField()));			m_selectedText.defaultTextFormat = new TextFormat( "_ゴシック", 11, 0x000000);			m_selectedText.x = 4;			m_selectedText.y = 4;			m_selectedText.text = prompt;			m_selectedText.height = m_selectedText.textHeight + 4;						m_mainClickArea = Sprite( addChild( new Sprite()));			m_mainClickArea.buttonMode = true;			m_mainClickArea.addEventListener( MouseEvent.ROLL_OVER, onRollOVER);			m_mainClickArea.addEventListener( MouseEvent.ROLL_OUT, onRollOUT);			m_mainClickArea.addEventListener( MouseEvent.MOUSE_DOWN, openItems);						setSize( DEFAULT_W, DEFAULT_H);					}				public function setEnabled( b:Boolean, _data) {			for( var i = 0; i < m_comboItemArr.length; i++) {//trace( String(ComboBoxLiteItem( m_comboItemArr[ i]).item.data), String( _data));				if( String(ComboBoxLiteItem( m_comboItemArr[ i]).item.data) == String( _data)) {					ComboBoxLiteItem( m_comboItemArr[ i]).setEnabled( b);					break;				}			}		}		function openItems( e:MouseEvent) {			m_bgUp.visible = m_bgOver.visible = m_bgDown.visible = false;			m_bgDown.visible = true;			if( parent) parent.addChild( m_itemCon);			if( parent.parent) parent.parent.addChild( parent);			if( parent.parent.parent) parent.parent.parent.addChild( parent.parent);			if( parent.parent.parent.parent) parent.parent.parent.parent.addChild( parent.parent.parent);			m_itemCon.x = x;			m_itemCon.y = y;						stage.addEventListener( MouseEvent.CLICK, closeItems);		}				function onRollOVER( e:MouseEvent) {			m_mainClickArea.removeEventListener( MouseEvent.ROLL_OVER, onRollOVER);			m_mainClickArea.addEventListener( MouseEvent.ROLL_OUT, onRollOUT);			m_bgUp.visible = m_bgOver.visible = m_bgDown.visible = false;			m_bgOver.visible = true;		}		function onRollOUT( e:MouseEvent) {			m_mainClickArea.addEventListener( MouseEvent.ROLL_OVER, onRollOVER);			m_mainClickArea.removeEventListener( MouseEvent.MOUSE_OVER, onRollOUT);			m_bgUp.visible = m_bgOver.visible = m_bgDown.visible = false;			m_bgUp.visible = true;		}		function closeItems( e:MouseEvent = null) {			if( e != null && m_bgDown.visible) {				return;			}			if( parent && parent.contains( m_itemCon)) parent.removeChild( m_itemCon);			if( stage) stage.removeEventListener( MouseEvent.CLICK, closeItems);		}				public function set selectedItem( obj:Object):void{			m_selectedItem = obj;			if( obj == null) {				m_selectedText.text = prompt;			} else {				m_selectedText.text = obj.label;			}		}		public function get selectedItem():Object{			return m_selectedItem;		}				public function get length():Object{			return m_comboItemArr.length;		}		public function getItemAt( i:uint) :Object{			if( m_comboItemArr.length <= i) return null;			return ComboBoxLiteItem( m_comboItemArr[ i]).item;		}		public function addItem( obj:Object) {			var comboItem:ComboBoxLiteItem = ComboBoxLiteItem( m_itemCon.addChild( new ComboBoxLiteItem( obj)));			comboItem.addEventListener( ComboBoxLiteItem.SELECTED, onSelected);			m_comboItemArr.push( comboItem);			replaceComboItem();		}		function onSelected( e:Event) {			selectedItem = ComboBoxLiteItem( e.target).item;			closeItems();		}		function replaceComboItem() {			var posi_y = m_bgUp.scaleY * DEFAULT_H;			var max_w = 0;			for( var i = 0; i < m_comboItemArr.length; i++) {				ComboBoxLiteItem( m_comboItemArr[ i]).y = posi_y;				ComboBoxLiteItem( m_comboItemArr[ i]).resetWidth();				max_w = ComboBoxLiteItem( m_comboItemArr[ i]).width > max_w ? ComboBoxLiteItem( m_comboItemArr[ i]).width : max_w;				posi_y += ComboBoxLiteItem.H;			}			if( max_w < width) max_w = width;			for( i = 0; i < m_comboItemArr.length; i++) {				ComboBoxLiteItem( m_comboItemArr[ i]).width = max_w;			}					}		public function setSize( w:Number, h:Number):void{            m_bgUp.scaleX = m_bgOver.scaleX = m_bgDown.scaleX = w/DEFAULT_W;			m_bgUp.scaleY = m_bgOver.scaleY = m_bgDown.scaleY = h/DEFAULT_H;			m_selectedText.width = m_bgUp.scaleX * DEFAULT_W - 8;						m_mainClickArea.graphics.clear();			m_mainClickArea.graphics.beginFill( 0xcc0000, 0);			m_mainClickArea.graphics.drawRect( 0, 0, width, height);			m_mainClickArea.graphics.endFill();						replaceComboItem();        }		override public function set width( w:Number):void{            setSize( w, height);        }		override public function set height( h:Number):void{            setSize( width, h);        }		override public function get width():Number{            return m_bgUp.scaleX * DEFAULT_W;        }		override public function get height():Number{            return m_bgUp.scaleY * DEFAULT_H;        }			}}