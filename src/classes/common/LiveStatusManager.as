package common {	import flash.events.*;	import flash.net.*;	import window.chat.ChatContainer;	import window.quicklist.QuickListContainer;	import window.video.list.ListContainer;	import window.header.HeaderContentsStudent;	import window.header.InfoDialog;	import window.setting.MemberLog;	import window.video.ProVideo;	import window.whiteboard.WhiteboardContainer;	import window.joinLog.MyJoinLog;	import flash.utils.getTimer;		// 参加退席状態のSO監視、講師の場合はアクションログをDBに発行&チャットに書き込み	public class LiveStatusManager extends EventDispatcher {		//private var so_join:SharedObject;		private var m_hereStatus:Object;		private var m_joinStatus:Object;		private const JOIN_STATUS__JOIN = "JOIN_STATUS__JOIN"; // "参加";		private const JOIN_STATUS__LEAVE = "JOIN_STATUS__LEAVE"; // "完全に退室";		//private const JOIN_STATUS__JOIN_2_LEAVE = "参加していたが、退室したかな？";		private var m_chatCon:ChatContainer = null;		private var m_quickCon:QuickListContainer = null;		private var m_listCon:ListContainer = null;		private var m_memberLogHash:Object = null;		private var m_proVideo:ProVideo = null;		private var m_wbCon:WhiteboardContainer = null;		private var so_here:SharedObject = null;		// 自分自身の参加時setTime呼び出しと参加時のSO・DBへの個別アクションログ書き込み（実際に書き込むのは講師のみ）		private var m_myJoinLog:MyJoinLog;				public function LiveStatusManager() {			m_hereStatus = new Object(); // 挙手ステータス			m_joinStatus = new Object(); // 参加ステータス						m_myJoinLog = new MyJoinLog();		}				// ライブステータスを反映させるコンテンツをここでセット		public function setCon( chatCon:ChatContainer, quickCon:QuickListContainer, listCon:ListContainer, memberLogHash:Object, proVideo:ProVideo, wbCon:WhiteboardContainer) {			m_chatCon = chatCon;			m_quickCon = quickCon;			m_listCon = listCon;			m_memberLogHash = memberLogHash; // 自身が講師の場合のみ。受講生の場合は空			m_proVideo = proVideo;			m_wbCon = wbCon;		}				public function resetMemberLogHash( uid:String, memberLog:MemberLog) {			m_memberLogHash[ uid] = memberLog;		}				// 使用端末の状況の変更。Main:onSyncSoTerminal()から呼ばれる		public function updateTerminalStatus( uid:String, terminalType:String) {			switch( terminalType) {				case Main.TERMINAL_PC: break;				case Main.TERMINAL_ANDROID: break;				default: alertDialog( Main.LANG.getReplacedSentence( "未定義の端末タイプ: %s が指定されました", terminalType)); return;			}			if( m_quickCon) m_quickCon.setTerminalStatus( uid, terminalType);			if( m_listCon) m_listCon.setTerminalStatus( uid, terminalType);		}				// 挙手状況の変更。Main:onSyncSoHere()から呼ばれる		public function updateHereStatus( hereFlag:Object) {			if( Main.CONF.isView( Main.CONF.UID)) return;			for( var uid:String in hereFlag) {								var b_change:Boolean = false; // このユーザの挙手状況に変更があるか				if( m_hereStatus[ uid] == undefined && hereFlag[ uid] == true) {					// 初めて挙手した					b_change = true;					if( Main.CONF.isPro( Main.CONF.UID)) {						Main.HEADER_CON.showInfo( Main.LANG.getReplacedSentence( "%sさんが挙手しました", Main.CONF.getName( uid)), InfoDialog.HERE_SOUND);						setTime( uid, "handup");						if( m_memberLogHash[ uid] != undefined) MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "挙手しました"));					}				} else if( m_hereStatus[ uid] == false && hereFlag[ uid] == true) {					// 挙手した					b_change = true;					if( Main.CONF.isPro( Main.CONF.UID)) {						Main.HEADER_CON.showInfo( Main.LANG.getReplacedSentence( "%sさんが挙手しました", Main.CONF.getName( uid)), InfoDialog.HERE_SOUND);						setTime( uid, "handup");						if( m_memberLogHash[ uid] != undefined) MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "挙手しました"));					}				} else if( m_hereStatus[ uid] == true && hereFlag[ uid] == true) {					// 挙手し続けている				} else if( m_hereStatus[ uid] == false && hereFlag[ uid] == false) {					// 前も今も沈黙				} else if( m_hereStatus[ uid] == true && hereFlag[ uid] == false) {					// 挙手を取りやめた（若しくは指名されたか）					b_change = true;					if( Main.CONF.isPro( Main.CONF.UID)) {						if( m_memberLogHash[ uid] != undefined) MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "挙手終了"));					}				}				m_hereStatus[ uid] = hereFlag[ uid];								if( b_change) {					// このユーザの挙手状況に変更がある場合					var now:Date = new Date();					if( m_quickCon) m_quickCon.changeHereStatus( uid, hereFlag[ uid], now.getTime());					if( m_listCon) m_listCon.changeHereStatus( uid, hereFlag[ uid], now.getTime());				}								// この人が自分自身（受講生）の場合				if( uid == Main.CONF.UID && Main.CONF.isStudent( uid)) {					if( hereFlag[ uid]) Main.HEADER_CON.hereOn();					else Main.HEADER_CON.hereOff();				}			}		}				// 指名された（講師用関数）MainのonSyncSoHereから呼ばれる		public function named( uid:String) {						if( m_chatCon) m_chatCon.addLog( Main.LANG.getReplacedSentence( "%sさんが指名されました", Main.CONF.getName( uid)));			if( m_memberLogHash[ uid] != undefined) {				MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "指名されました")); // 講師が実行				MemberLog( m_memberLogHash[ uid]).addEventListener( Main.LANG.getParam( "指名されました"), handDownAfterNamed);			}		}		function handDownAfterNamed( e:Event) {			var memberLog:MemberLog = MemberLog( e.target);			memberLog.removeEventListener( Main.LANG.getParam( "指名されました"), handDownAfterNamed);						// 指名した人の挙手を取りやめさせるためのSO変更			if( so_here == null) {				alertDialog( Main.LANG.getParam( "通信エラー"));				return;			}			 			var hereFlag = so_here.data.hereFlag == undefined ? new Object() : so_here.data.hereFlag;			hereFlag[ memberLog.getUid()] = false;			so_here.data.hereFlag = hereFlag;			so_here.setDirty( "hereFlag");					}				// 参加不参加状況の初期化。Main:onSyncSoJoinStart()から呼ばれる		public function initJoinStatus( joinFlag:Object) {			m_joinStatus = new Object();			for( var uid:String in joinFlag) {				if( joinFlag[ uid]) {					m_joinStatus[ uid] = JOIN_STATUS__JOIN;				} else {					m_joinStatus[ uid] = JOIN_STATUS__LEAVE;				}//Main.addDebugMsg("liveStatusMana:参加不参加状況の初期化 " + uid + ":" + m_joinStatus[ uid]);				// このユーザの参加退席状況を変更				var now:Date = new Date();				if( m_quickCon) m_quickCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());				if( m_listCon) m_listCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());				if( m_proVideo && Main.CONF.isPro( uid) && ! Main.CONF.isPro( Main.CONF.UID)) m_proVideo.changeJoinStatus( joinFlag[ uid]);				if( m_wbCon) m_wbCon.changeJoinStatus( uid, joinFlag[ uid]);			}		}				// 参加不参加状況の変更。Main:onSyncJoin()から呼ばれる		public function updateJoinStatus( joinFlag:Object) {			return;			var lecLog_join:String = ""; // チャット&アクションログ用の、講師の「参加しました」ログ。講師が書き込む。			var stuLog_join:String = ""; // チャット&アクションログ用の、受講生の「参加しました」ログ。講師が書き込む。						for( var uid:String in joinFlag) {								//if( Main.CONF.getName( uid) == LoadConf.NOTFOUND) continue;								var now:Date = new Date();								if( m_joinStatus[ uid] == undefined) {					// はじめて参加したとき					if( joinFlag[ uid]) {Main.addDebugMsg("liveStatusMana: " + uid + "ははじめて参加");						m_joinStatus[ uid] = JOIN_STATUS__JOIN; // 確実に参加している												// 講師or受講生の参加状態の変化						if(( Main.CONF.isPro( uid) || Main.CONF.isStudent( uid))) {														if( Main.CONF.isStudent( uid) && !Main.CONF.isView( uid)) {								if( stuLog_join != "") stuLog_join += "・";								stuLog_join += Main.LANG.getReplacedSentence( "%sさん", uid/*Main.CONF.getName( uid)*/);							} else {								lecLog_join += Main.LANG.getReplacedSentence( "%sさん", Main.CONF.getName( uid));							}																					if( uid == Main.CONF.UID) {								// 自分自身の参加判定をDB書き込み//Main.addDebugMsg( "自分自身の参加判定をDB書き込み");																setTime( uid, "participation");//Main.addDebugMsg( "自分自身の参加判定をDB書き込み ok");																// 自分自身の「初参加時間」を個別アクションログに反映。								m_myJoinLog.write1stJoinTime();																/*								// 講師がいなかったら、自分でチャット&アクションログに書き込む								if( joinFlag[ Main.CONF.getProId()] == undefined || joinFlag[ Main.CONF.getProId()] == false) {									if( m_chatCon) {										if( Main.CONF.getName( uid) != LoadConf.NOTFOUND) {											m_chatCon.addLog( Main.LANG.getReplacedSentence( "%sさんが参加しました", Main.CONF.getName( uid)));Main.addDebugMsg( "入室ログ：" + Main.LANG.getReplacedSentence( "%sさんが参加しました", Main.CONF.getName( uid)));										} else {											m_chatCon.addLog( Main.LANG.getReplacedSentence( "%sさんが参加しました", uid));Main.addDebugMsg( "入室ログ：" + Main.LANG.getReplacedSentence( "%sさんが参加しました", uid));										}									}								}								*/								// 自分でチャット&アクションログに書き込む								if( m_chatCon) {									if( Main.CONF.getName( uid) != LoadConf.NOTFOUND) {										m_chatCon.addLog( Main.LANG.getReplacedSentence( "%sさんが参加しました", Main.CONF.getName( uid)));Main.addDebugMsg( "入室ログ：" + Main.LANG.getReplacedSentence( "%sさんが参加しました", Main.CONF.getName( uid)));									} else {										m_chatCon.addLog( Main.LANG.getReplacedSentence( "%sさんが参加しました", uid));Main.addDebugMsg( "入室ログ：" + Main.LANG.getReplacedSentence( "%sさんが参加しました", uid));									}								}							}														if( Main.CONF.isPro( Main.CONF.UID) && m_memberLogHash[ uid] != undefined) {								MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "接続確認しました")); // 講師が実行 							}						}					} else {//Main.addDebugMsg("liveStatusMana: " + uid + "は最初から退席している（自分のログイン前にログアウトしている）");						// 最初から退席している（自分のログイン前にログアウトしている）						m_joinStatus[ uid] = JOIN_STATUS__LEAVE;												if( Main.CONF.isPro( Main.CONF.UID) && m_memberLogHash[ uid] != undefined) {							MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "通信切断状態です")); // 講師が実行 [退席済みでした]						}					}										// このユーザの参加退席状況を変更					if( m_quickCon) m_quickCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());					if( m_listCon) m_listCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());					if( m_proVideo && Main.CONF.isPro( uid) && ! Main.CONF.isPro( Main.CONF.UID)) m_proVideo.changeJoinStatus( joinFlag[ uid]);					if( m_wbCon) m_wbCon.changeJoinStatus( uid, joinFlag[ uid]);									} else {										if( joinFlag[ uid] == false) {//Main.addDebugMsg("liveStatusMana: " + uid + "は途中退席");						// 途中退席						if( m_joinStatus[ uid] == JOIN_STATUS__JOIN) {							// 参加中だったけど、急に退室したとき（通信fpsが小さすぎのための誤認の可能性もあり）														// このユーザの参加退席状況を変更							if( m_quickCon) m_quickCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());							if( m_listCon) m_listCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());							if( m_proVideo && Main.CONF.isPro( uid) && ! Main.CONF.isPro( Main.CONF.UID)) m_proVideo.changeJoinStatus( joinFlag[ uid]);							if( m_wbCon) m_wbCon.changeJoinStatus( uid, joinFlag[ uid]);														// 講師が受講生の「退席」キャッチ							if( Main.CONF.isPro( Main.CONF.UID)) {								// 退席判定をDB書き込み								setTime( uid, "leave");//alertDialog( "講師が受講生の「退席」キャッチ");																	// 講師が受講生の「退席」を個別アクションログに反映。								if( m_memberLogHash[ uid] != undefined) MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "通信切断しました")); //通信切断しました							} else if( uid != Main.CONF.UID) {								// 受講生が自分以外の「退席」キャッチ																if( uid == Main.CONF.getProId()) {									// 受講生が講師の「退席」キャッチ									setTime( uid, "leave");									// 講師の退席をチャットに反映(受講生による)									//m_chatCon.addLog( Main.CONF.getName( uid) + "さんが退席（通信切断）しました"));								} else {									// 受講生が他の受講生の「退席」キャッチ								}							}						}						m_joinStatus[ uid] = JOIN_STATUS__LEAVE;					} else {//Main.addDebugMsg("liveStatusMana: " + uid + "は再参加");						// 再参加						if( m_joinStatus[ uid] == JOIN_STATUS__LEAVE) {														// このユーザの参加退席状況を変更							if( m_quickCon) m_quickCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());							if( m_listCon) m_listCon.changeJoinStatus( uid, joinFlag[ uid], now.getTime());							if( m_proVideo && Main.CONF.isPro( uid) && ! Main.CONF.isPro( Main.CONF.UID)) m_proVideo.changeJoinStatus( joinFlag[ uid]);							if( m_wbCon) m_wbCon.changeJoinStatus( uid, joinFlag[ uid]);														if( uid == Main.CONF.UID) {								// 自分自身の参加判定をDB書き込み//alertDialog( "自分自身の参加判定をDB書き込み");																setTime( uid, "participation");//alertDialog( "自分自身の参加判定をDB書き込み ok");																// 自分自身の「参加」を個別アクションログに反映。								//m_myJoinLog.addJoinLog();							}														if( Main.CONF.isPro( Main.CONF.UID) && m_memberLogHash[ uid] != undefined) {								MemberLog( m_memberLogHash[ uid]).addLog( Main.LANG.getParam( "接続確認しました")); // 講師が実行							}						}						m_joinStatus[ uid] = JOIN_STATUS__JOIN;					}				}			} // for( var uid:String in joinFlag)									// 講師が講師の「参加」や受講生「参加」をチャットに反映。			// （チャットからDBにも反映される。）			if( Main.CONF.isPro( Main.CONF.UID) &&			   ( lecLog_join != "" || stuLog_join != "")) {				//if( m_chatCon) m_chatCon.addLog( getMsg4Log( lecLog_join, stuLog_join, ""));				Main.HEADER_CON.showInfo( getMsg4Info( lecLog_join, stuLog_join, ""));//Main.addDebugMsg( "入室ログ：" + getMsg4Log( lecLog_join, stuLog_join, ""));			}		}				function getMsg4Info( lecLog_join:String, stuLog_join:String, stuLog_leave:String):String {			var maxLen = 100;			var msg:String = "";			if( lecLog_join != "") {				// 講師自身の参加時			} else {				// 講師は前から参加中				if( stuLog_join != "") {					if( stuLog_leave == "") {						msg = Main.LANG.getReplacedSentence( "%sが参加しました", stuLog_join);					} else {						//msg = stuLog_join + "が参加、" + stuLog_leave + "が退席しました";						msg = Main.LANG.getReplacedSentence( "%sが参加しました", stuLog_join);					}				} else if( stuLog_leave != "") {					//msg = stuLog_leave + "が退席しました";				}			}						msg = msg.length < maxLen ? msg : msg.substr( 0, maxLen) + "...";						return msg;		}				function getMsg4Log( lecLog_join:String, stuLog_join:String, stuLog_leave:String):String {			var msg:String = "";			if( lecLog_join != "") {				// 講師自身の参加時				msg += Main.LANG.getReplacedSentence( "%sが参加しました", lecLog_join);			} else {				// 講師は前から参加中				if( stuLog_join != "") {					if( stuLog_leave == "") {						msg = Main.LANG.getReplacedSentence( "%sが参加しました", stuLog_join);					} else {						msg = Main.LANG.getReplacedSentence( "%sが参加しました", stuLog_join);						msg += " / " + Main.LANG.getReplacedSentence( "%sの通信切断を確認しました", stuLog_leave);					}				} else if( stuLog_leave != "") {					msg = Main.LANG.getReplacedSentence( "%sの通信切断を確認しました", stuLog_leave);				}			}			return msg;		}		public function initSo( so_here:SharedObject, so_joinLog:SharedObject) {			this.so_here = so_here;			m_myJoinLog.initSo( so_joinLog);		}				// 講師用関数		// 授業終了ボタンクリック時に呼ばれる		public function setTimeEndclass() {			setTime( Main.CONF.UID, "endclass");		}				function setTime( uid:String, mode:String) {			var path:String = Main.CONF.getParam( "SETTIME_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETTIME_URL"));				return;			}			var req:URLRequest = new URLRequest( path);			req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.mode = mode;			variables.class_id = Main.CONF.CLASS_ID;			variables.uid = uid;			req.data = variables;									sendToURL( req);		}						function alertDialog( str:String) {			Main.addErrMsg( "LiveStatusManager:" + str);		}	}}