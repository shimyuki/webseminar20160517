package common {	import flash.events.*;	import flash.net.*;		// 講師用	// 参加者（講師or受講者）のSO監視役	public class MemberSoWatcher extends EventDispatcher {		private const IGNORE_CNT_4DB = 2; // 最初の読み込み時にDB書き込みをキャンセルする用。何回目までのSyncEventを無視するか。		private var m_uidSyncCntHash:Object; // UIDとSyncEventを呼んだ回数のHASH。最初の読み込み時にDB書き込みをキャンセルする用		private var m_preObjHash:Object; // UIDとSO変更前のHash値のHASH。SO更新時でも変更が無ければDB書き込みをキャンセルする用				private var m_flag:Boolean = false;				public function MemberSoWatcher() {			m_uidSyncCntHash = new Object();			var memberArr:Array = Main.CONF.getMemberArr();			for each( var member:Member in memberArr) {				m_uidSyncCntHash[ member.uid] = 0;			}			m_preObjHash = new Object();		}				public function initSo(/* nc:NetConnection*/) {			if( m_flag) return;			m_flag = true;			// 			//so_join = SharedObject.getRemote( CLASS_ID + "_joinFlag", m_nc.uri, false); 						// 全メンバーのSO変更イベントを監視し、DBに保存する			var memberArr:Array = Main.CONF.getMemberArr();			for each( var member:Member in memberArr) {				var so:SharedObject = SharedObject( Main.CONF.getSo( member.uid));				if( so == null) {					alertDialog( Main.LANG.getParam( "通信エラー") + " " + "cant get SharedObject of " + member.name);				} else {					so.addEventListener( SyncEvent.SYNC, onSync_member);				}								// SO変更前の値の設定（SO更新時でも変更が無ければDB書き込みをキャンセルする用）				m_preObjHash[ member.uid] = member.getDataHash();			}								}				function onSync_member( e:SyncEvent) {			var so:SharedObject = SharedObject( e.target);			if( so.data.hash == undefined) return;						/*			// 最初のCONF読み込みの結果SOが変更された分についてはDB書き込みをキャンセルする			if( m_uidSyncCntHash[ so.data.hash.uid] != undefined && m_uidSyncCntHash[ so.data.hash.uid] < IGNORE_CNT_4DB) {				m_uidSyncCntHash[ so.data.hash.uid] ++;				return;			}						if( m_preObjHash[ so.data.hash.uid] == undefined) {				alertDialog( Main.LANG.getReplacedSentence( "%sは未登録uidなのでDB反映が行えません", so.data.hash.uid));				return;			}			*/						// CONFのメンバーの状態を更新			Main.CONF.apply_member( so.data.hash.uid, so.data.hash);						/*			// DBに書き込み（ストリーム情報と権限情報のどちらかは変更なしの場合もある）			if( isStreamChanged( so.data.hash)) {				saveDB_stream( so.data.hash);			} else {			}			if( isStatusChanged( so.data.hash) && Main.CONF.isStudent( so.data.hash.uid)) {				saveDB_status( so.data.hash);			} else {			}			*/						m_preObjHash[ so.data.hash.uid] = so.data.hash;		}				function isStreamChanged( new_obj:Object) : Boolean {			// new_hashのうち、m_preHashと比べてストリーム情報に変更がある場合trueを返す			var pre_obj = m_preObjHash[ new_obj.uid];			if( pre_obj.bandwidth != new_obj.bandwidth) return true;			if( pre_obj.fps != new_obj.fps) return true;			if( pre_obj.camerawidth != new_obj.camerawidth) return true;			if( pre_obj.cameraheight != new_obj.cameraheight) return true;			if( pre_obj.rate != new_obj.rate) return true;			if( pre_obj.silencelevel != new_obj.silencelevel) return true;			if( pre_obj.gain != new_obj.gain) return true;			if( pre_obj.audio_codec != new_obj.audio_codec) return true;			return false;		}		function isStatusChanged( new_obj:Object) : Boolean {			// new_hashのうち、m_preHashと比べて権限情報に変更がある場合trueを返す			var pre_obj = m_preObjHash[ new_obj.uid];			if( pre_obj.video != new_obj.video) return true;			if( pre_obj.mic != new_obj.mic) return true;			if( pre_obj.whiteboard != new_obj.whiteboard) return true;			if( pre_obj.read != new_obj.read) return true;			if( pre_obj.evicted != new_obj.evicted) return true;			if( pre_obj.volume != new_obj.volume) return true;			return false;		}					/*		function saveDB_stream( hash:Object) {			var url = Main.CONF.getParam( "SETSTREAM_URL");			if( url == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETSTREAM_URL"));				return;			}			var val:URLVariables = new URLVariables();			val.class_id = Main.CONF.CLASS_ID;			val.uid = hash.uid;			val.bandwidth = hash.bandwidth;			val.fps = hash.fps;			val.camerawidth = hash.camerawidth;			val.cameraheight = hash.cameraheight;			val.rate = hash.rate;			val.silencelevel = hash.silencelevel;			val.gain = hash.gain;					var req:URLRequest = new URLRequest( url);			req.method = URLRequestMethod.POST;			req.data = val;			var loader:URLLoader = new URLLoader();			loader.addEventListener( IOErrorEvent.IO_ERROR, function( e:*) { alertDialog( "IO_ERROR: " + url);});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( e:*) { alertDialog( "SECURITY_ERROR: " + url);});			loader.load( req);					}		function saveDB_status( hash:Object) {			var url = Main.CONF.getParam( "SETSTATUS_URL");			if( url == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETSTREAM_URL"));				return;			}			var val:URLVariables = new URLVariables();			val.class_id = Main.CONF.CLASS_ID;			val.uid = hash.uid;						val.video = hash.video;			val.mic = hash.mic;			val.whiteboard = hash.whiteboard;			val.read = hash.read;			val.evicted = hash.evicted;			val.volume = hash.volume;						var req:URLRequest = new URLRequest( url);			req.method = URLRequestMethod.POST;			req.data = val;			var loader:URLLoader = new URLLoader();			loader.addEventListener( IOErrorEvent.IO_ERROR, function( e:*) { alertDialog( "IO_ERROR: " + url);});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( e:*) { alertDialog( "SECURITY_ERROR: " + url);});			loader.load( req);		}				*/					function alertDialog( str:String) {			Main.addErrMsg( "MemberSoWatcher:" + str);		}	}}