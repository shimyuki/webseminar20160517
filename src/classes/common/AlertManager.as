package common {	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.geom.*;	import flash.filters.*;	import window.whiteboard.WhiteboardContainer;	public class AlertManager {		static private var m_container:Sprite = new Sprite();		static private var m_message:TextField = new TextField();		static private var m_btnset:BtnSet = null;		static private var m_w:Number;		static private var m_h:Number;		static private var m_parent;		static private var m_func:Function =null;		static private const PAD_LR = 30;		static private const PAD_TB = 10;		public function AlertManager() {		}		static public function createAlert( _parent, _message:String, _title:String="", btntext_arr:Array = null, func:Function = null){			//trace( _message);			//Main.addErrMsg( "AlertManager.createAlert(" + _message + ")");						m_message.autoSize = TextFieldAutoSize.LEFT;			m_message.defaultTextFormat = new TextFormat( Main.CONF.getMainFont());			m_message.text = _message;						if( m_btnset == null) {				m_btnset = new BtnSet();				m_btnset.addEventListener( "done", done);			}			if( btntext_arr == null) {				btntext_arr = ["OK"];			}			m_btnset.resetBtns( btntext_arr);			if( m_func != null) m_btnset.removeEventListener( "clicked", m_func);			if( func != null) m_btnset.addEventListener( "clicked", func);			m_func = func;						m_w = (( m_message.width > m_btnset.width) ? m_message.width : m_btnset.width) + PAD_LR * 2;			m_h = PAD_TB + m_message.height + PAD_TB + m_btnset.height + PAD_TB;						m_container.addChild( m_message);			m_message.x = ( m_w - m_message.width) / 2;			m_message.y = PAD_TB;						m_container.addChild( m_btnset);			m_btnset.x = ( m_w - m_btnset.width) / 2;			m_btnset.y = PAD_TB + m_message.height + PAD_TB;						m_container.graphics.clear();			m_container.graphics.beginFill( Main.BASE_COLOR_01);			m_container.graphics.lineStyle( 2, Main.MAIN_COLOR_02);			m_container.graphics.drawRoundRect( 0, 0, m_w, m_h, 10);			m_container.graphics.endFill();			m_container.filters = [ getBitmapFilter()];						//_parent.addChild( m_container);			//m_container.x = _parent.x + ( _parent.width - m_container.width) / 2;			//m_container.y = _parent.y + ( _parent.height - m_container.height) / 2;			_parent.stage.addChild( m_container);			m_container.x = ( _parent.stage.stageWidth - m_container.width) / 2;			m_container.y = ( _parent.stage.stageHeight - m_container.height) / 2;						_parent.stage.addEventListener( Event.RESIZE, onResize);						WhiteboardContainer.CURSOR_BUSY = true;			Main.DROP_OPENED = true;						m_parent = _parent;		}		static function done(e:Event) {			WhiteboardContainer.CURSOR_BUSY = false;			Main.DROP_OPENED = false;			m_parent.stage.removeChild( m_container);		}		static function onResize( e:Event) {			m_container.x = ( e.target.stageWidth - m_container.width) / 2;			m_container.y = ( e.target.stageHeight - m_container.height) / 2;		}				static function getBitmapFilter():BitmapFilter {            var color:Number = 0x000000;            var angle:Number = 45;            var alpha:Number = 0.5;            var blurX:Number = 8;            var blurY:Number = 8;            var distance:Number = 15;            var strength:Number = 0.65;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.HIGH;            return new DropShadowFilter(distance,                                        angle,                                        color,                                        alpha,                                        blurX,                                        blurY,                                        strength,                                        quality,                                        inner,                                        knockout);        }	}}import flash.display.Sprite;import flash.events.*;import common.DynamicTextBtn;class BtnSet extends Sprite {	public function BtnSet() {			}	function resetBtns( btntext_arr:Array) {		var i:uint;		while( this.numChildren) {			getChildAt( 0).removeEventListener( MouseEvent.CLICK, onClick);			removeChildAt( 0);		}		var posi_x:Number = 0;		for( i = 0; i < btntext_arr.length; i++) {			var btn:DynamicTextBtn = new DynamicTextBtn( btntext_arr[i]);			addChild( btn);			btn.x = posi_x;			posi_x += btn.width + 10;			btn.name = btntext_arr[i];			btn.setEnabled( true);						btn.addEventListener( MouseEvent.CLICK, onClick);		}	}	function onClick( e:MouseEvent) {		var target = e.target as DynamicTextBtn;		if( target == null) target = e.target.parent as DynamicTextBtn;		//trace( target.name, "がクリックされた");		this.name = target.name;		this.dispatchEvent( new Event( "clicked"));				this.dispatchEvent( new Event( "done"));	}}