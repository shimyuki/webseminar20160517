package common {	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;	import caurina.transitions.*;		public class DynamicTextBtn extends Sprite {						private var m_on:Shape;		private var m_blink:Sprite;		private var m_clickObj:Sprite;		private const FONT_COLOR:uint = 0xffffff;		private const LINE_COLOR:uint = Main.MAIN_COLOR_02;		private const BASE_COLOR_01:uint = Main.MAIN_COLOR_02;//0xffffff;		private const BASE_COLOR_02:uint = Main.MAIN_COLOR_03;//0xe7e7e7;		static public const BLINK_COLOR_01:uint = 0xffc2c2;		static public const BLINK_COLOR_02:uint = 0xff9494;		private var PAD_LR:Number = 8;		private var PAD_TB:Number = 5;		private const ELLIPSE_W:Number = 10;				public function DynamicTextBtn( str:String, fontsize:Number = 10, base_h:Number = 0, pad_tb:Number = 5, pad_lr:Number = 8) {			name = str;						PAD_TB = pad_tb;			PAD_LR = pad_lr;						var txt:TextField = new TextField();			txt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), fontsize, FONT_COLOR);			txt.autoSize = TextFieldAutoSize.LEFT;			txt.text = str;						// ベース			var w:Number = txt.width + PAD_LR * 2;			var h:Number = base_h != 0 ? base_h : txt.height + PAD_TB * 2;			var matrix:Matrix = new Matrix();			matrix.createGradientBox( w, h, - Math.PI / 2);			var base:Shape = Shape( addChild( new Shape()));			base.graphics.lineStyle( 1, LINE_COLOR, 1, true);			base.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_02, BASE_COLOR_01],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			base.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			base.graphics.endFill();						// ONベース			m_on = Shape( addChild( new Shape()));			m_on.graphics.lineStyle( 1, LINE_COLOR, 1, true);			m_on.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_01, BASE_COLOR_02],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_on.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_on.graphics.endFill();			m_on.visible = false;						// チカチカベース			m_blink = Sprite( addChild( new Sprite()));			m_blink.graphics.lineStyle( 1, LINE_COLOR, 1, true);			m_blink.graphics.beginGradientFill( GradientType.LINEAR,											[BLINK_COLOR_02, BLINK_COLOR_01],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_blink.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_blink.graphics.endFill();			m_blink.alpha = 0;					// テキスト配置			txt.x = PAD_LR;			txt.y = PAD_TB;			addChild( txt);						m_clickObj = Sprite( addChild( new Sprite()));			m_clickObj.graphics.beginFill( 0, 0);			m_clickObj.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_clickObj.graphics.endFill();					}				// チカチカ1回（HeaderContentsから呼ばれる）		public function blink() {			Tweener.removeTweens( m_blink);			m_blink.alpha = 1;			Tweener.addTween( m_blink, { alpha: 0, transition:"liner", time:1, delay:1});		}		public function setEnabled( b:Boolean):void {			buttonMode = b;			if( b) {				m_clickObj.addEventListener( MouseEvent.ROLL_OVER, onRollOVER);				m_clickObj.addEventListener( MouseEvent.ROLL_OUT, onRollOUT);			} else {				m_clickObj.removeEventListener( MouseEvent.ROLL_OVER, onRollOVER);				m_clickObj.removeEventListener( MouseEvent.ROLL_OUT, onRollOUT);				onRollOUT();			}		}		function onRollOVER( e:MouseEvent) {			m_on.visible = true;		}		function onRollOUT( e:MouseEvent = null) {			m_on.visible = false;		}	}}