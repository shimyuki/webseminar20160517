package {    import flash.net.*;	import flash.utils.*;	import flash.events.*;    public class StreamChecker extends EventDispatcher {		private var m_ns_hash:Object; // 監視中のMyNetStreamの連想配列		private var m_prevStatus_hash:Object;  // 監視中のMyNetStreamの連想配列、値は5秒前の生死		//private var m_liveNs_arr:Array; // ストリーム受信中のMyNetStreamの配列				private var m_checkAliveTimer:Timer; // ネットストリームのfpsから出席判定するためのタイマー。引っかかったら「生きてますか？」を発信		private var m_afterKnockTimer:Timer; // 「生きてますか？」を発信してからスタートする、最終的な出席判定をするタイミングをとるタイマー		private var so_knock:SharedObject;				public function StreamChecker() {			//m_liveNs_arr = new Array();			m_ns_hash = new Object();			m_prevStatus_hash = new Object();						if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) {				m_checkAliveTimer = new Timer( 5000);				m_checkAliveTimer.addEventListener( TimerEvent.TIMER, onTimer);				m_afterKnockTimer = new Timer( 5000, 1);				m_afterKnockTimer.addEventListener( TimerEvent.TIMER, onAfterKnockTimer);			}					}				public function initSo( str:String, nc:NetConnection) {			// ノック（ダイレクト出席確認）の共有オブジェクト			if( so_knock == null) {				so_knock = SharedObject.getRemote( str, nc.uri, false);			} else {				so_knock.removeEventListener( SyncEvent.SYNC, onSync);			}			so_knock.addEventListener( SyncEvent.SYNC, onSync1st);			so_knock.connect( nc);		}		function onSync1st( e:SyncEvent):void {			if( so_knock.data[ Main.CONF.UID] == undefined || so_knock.data[ Main.CONF.UID] == false) so_knock.setProperty( Main.CONF.UID, true);			so_knock.removeEventListener( SyncEvent.SYNC, onSync1st);			dispatchEvent( new Event( "so_knock ready"));			so_knock.addEventListener( SyncEvent.SYNC, onSync);			if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_checkAliveTimer.start();		}		function onSync( e:SyncEvent):void {			if( so_knock.data[ Main.CONF.UID] == undefined || so_knock.data[ Main.CONF.UID] == false) so_knock.setProperty( Main.CONF.UID, true);		}				function onTimer( e:TimerEvent) : void {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:onTimer" + Math.random());			for each ( var ns:MyNetStream in m_ns_hash) {				var isAlive = checkAlive( ns);				if( isAlive != m_prevStatus_hash[ ns.getId()]) {				   // ステータスが変わった人がひとつでもあったとき//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:onTimer " + ns.getId()+":" + m_prevStatus_hash[ ns.getId()] + "->" + isAlive);				   if( Main.CONF.isPro( Main.CONF.UID) &&					  ns.getId() == Main.CONF.getWhiteboardUID() &&					  isAlive == false) {					   // 講師からみて、ホワイトボードのステータスがfalseになったときは					   // onAfterKnockTimerのcheckAliveはどうしtもtrueになってしまう					   // (講師とWBポップアップ画面が同じPCの場合だけだけど)ので					   // onAfterKnockTimer判定は省略して、DIE判定をする					   // これをしないと、WBポップアップ画面を閉じても、WB背景映像が講師映像に切り替わらない					   dispatchEvent( new StreamCheckerEvent( StreamCheckerEvent.STATUS_DIE, Main.CONF.getWhiteboardUID()));				   } else {					   if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_checkAliveTimer.stop();					   so_knock.setProperty( ns.getId(), isAlive);					   // m_afterKnockTimerが開始する前にso_knockに正しい値が入っているはず					   if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_afterKnockTimer.reset();					   if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_afterKnockTimer.start();					   break;				   }				   				 //  m_prevStatus_hash[ ns.getId()] = isAlive;				}			}		}		function onAfterKnockTimer( e:TimerEvent) : void {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:onAfterKnockTimer");			for each ( var ns:MyNetStream in m_ns_hash) {				var isAlive = checkAlive( ns);//if( ns.getId() == "lecturer_whiteboard") if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:onAfterKnockTimer " + ns.getId()+":" + m_prevStatus_hash[ ns.getId()] + "->" + isAlive);				if( isAlive != m_prevStatus_hash[ ns.getId()]) {					// ステータスが変わってるとき					if( so_knock.data[ ns.getId()] == undefined) {						alertDialog( Main.LANG.getReplacedSentence( "TO_BE_REPLACED_01", ns.getId()));						return;					}//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:onAfterKnockTimer " + ns.getId()+":" + m_prevStatus_hash[ ns.getId()] + "->" + isAlive);				   				   if( so_knock.data[ ns.getId()] == isAlive) {//alertDialog( ns.getId() + "のonAfterKnockTimer:" + isAlive);									   m_prevStatus_hash[ ns.getId()] = isAlive;					   if( isAlive) dispatchEvent( new StreamCheckerEvent( StreamCheckerEvent.STATUS_ALIVE, ns.getId()));					   else dispatchEvent( new StreamCheckerEvent( StreamCheckerEvent.STATUS_DIE, ns.getId()));				   } else {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "StreamChecker:"+ ns.getId() +  ":" + isAlive + " スルーしました" + Math.random());				   }				}			}			if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_checkAliveTimer.reset();			if( ! Main.DEBUG_CANSEL_TIMER_STREAMCHECKER) m_checkAliveTimer.start();		}		public function addStream( ns:MyNetStream) {			if( ns == null) return;						m_ns_hash[ ns.getId()] = ns;						var isAlive = checkAlive( ns);			m_prevStatus_hash[ ns.getId()] = isAlive;						// さいしょの状態をdispatch			if( so_knock == null || so_knock.data == null) {				alertDialog( "addStream() so_knock is null");			} else if( so_knock.data[ ns.getId()] == undefined) {//alertDialog( "さいしょの状態をdispatch:" + ns.getId());			   if( isAlive) dispatchEvent( new StreamCheckerEvent( StreamCheckerEvent.STATUS_ALIVE, ns.getId()));			   else dispatchEvent( new StreamCheckerEvent( StreamCheckerEvent.STATUS_DIE, ns.getId()));			} else {//alertDialog( ns.getId() + "のさいしょの状態は:" + isAlive);							}		}		function checkAlive( ns:MyNetStream) : Boolean {			var fps : Number = ns.currentFPS;			if( fps < 0.2) {				return ns.checkFPSHistory();			} else {				return true;			}		}		function alertDialog( str:String) {			Main.addErrMsg( "StreamChecker:" + str);		}	}}