package window.video {	import fl.controls.Slider;    import flash.display.*;	import flash.events.*;	import flash.geom.*;	import caurina.transitions.*;		// 受信ストリーム用のボリューム調整バー    public class VolumeCtl extends Sprite {		static public const MUTE_ON:String = "MUTE_ON";		static public const MUTE_OFF:String = "MUTE_OFF";		public static const W = 24;		private const H = 24;		public static const SLIDER_PAD = 8;		private var m_iconVolume;		private var m_sliderContainer:Sprite;		private var m_sliderBase:Shape;		private var m_slider:Slider;		private var m_sliderMask:Shape;		private var m_mute:Boolean;				private var MAX:Number;		private var MIN:Number;				private var m_startFlag:Boolean = false;		private var m_useMute:Boolean;				private var m_clickObj_mute:Sprite;				public function VolumeCtl( min:Number, max:Number, useMute:Boolean = true) {			MIN = min;			MAX = max;			m_useMute = useMute;						// ベース（グラデーション）			var fillType:String = GradientType.LINEAR;			var colors:Array = [0xf0f0f0, 0xcccccc];			var alphas:Array = [1, 1];			var ratios:Array = [0x00, 0xFF];			var matr:Matrix = new Matrix();			matr.createGradientBox( W, H , Math.PI/2, 0, 0);			graphics.lineStyle( 1, 0xd9d9d9);			graphics.beginGradientFill( fillType, colors, alphas, ratios, matr, SpreadMethod.PAD);			graphics.drawRect( 0.5, 0.5, W-1, H-1);			graphics.endFill();						m_sliderContainer = Sprite( addChild( new Sprite()));						// スライダーベース（グラデーション）			m_sliderBase = Shape( m_sliderContainer.addChild( new Shape()));			/*			var colors2:Array = [ 0xcccccc, 0xf0f0f0];			var matr2:Matrix = new Matrix();			matr2.createGradientBox( 1, H , Math.PI/2, 0, 0);			m_sliderBase.graphics.lineStyle( 1, 0xd9d9d9, 1, false, "none");			m_sliderBase.graphics.beginGradientFill( fillType, colors2, alphas, ratios, matr2, SpreadMethod.PAD);			m_sliderBase.graphics.drawRect( 0.5, 0.5, 1, H-1);			m_sliderBase.graphics.endFill();			*/			m_slider = Slider( m_sliderContainer.addChild( new Slider()));			m_slider.maximum = MAX;			m_slider.minimum = MIN;			m_slider.snapInterval = MAX / 100;			m_slider.x = SLIDER_PAD;			m_slider.y = SLIDER_PAD * 1.15;						// マスク			m_sliderMask = Shape( addChild( new Shape()));			m_sliderMask.x = W;			m_sliderContainer.mask = m_sliderMask;						m_sliderContainer.x = W - m_sliderContainer.width;						m_iconVolume = addChild( new IconVolumeMic());			//m_iconVolume = addChild( new IconVolume());			m_iconVolume.x = ( W - m_iconVolume.width) / 2;			m_iconVolume.y = ( H - m_iconVolume.height) / 2;						if( m_mute && m_useMute) {				m_iconVolume.mute.visible = true;				m_iconVolume.vol1.visible = false;				m_iconVolume.vol2.visible = false;			} else {				m_iconVolume.mute.visible = false;				m_iconVolume.vol1.visible = true;				m_iconVolume.vol2.visible = true;			}						if( m_useMute) {				// ミュート（=音声）OnOff変更用の透明ボタン				m_clickObj_mute = Sprite( addChild( new Sprite()));				m_clickObj_mute.graphics.beginFill( 0, 0);				m_clickObj_mute.graphics.drawRect( 0, 0, W, W);				m_clickObj_mute.graphics.endFill();				m_clickObj_mute.addEventListener( MouseEvent.CLICK, changeMute);			}						buttonMode = true;						addEventListener( MouseEvent.ROLL_OVER, showBar);			addEventListener( MouseEvent.ROLL_OUT, hideBar);						m_slider.addEventListener( Event.CHANGE, onChangeSlider);					}		public function dispose() {			removeEventListener( MouseEvent.ROLL_OVER, showBar);			removeEventListener( MouseEvent.ROLL_OUT, hideBar);						m_slider.removeEventListener( Event.CHANGE, onChangeSlider);						if( m_useMute) m_clickObj_mute.removeEventListener( MouseEvent.CLICK, changeMute);		}				function changeMute( e:MouseEvent) {			m_mute = !m_mute;			changeIcon( m_slider.value);						// dispatchして講師にSOを変更してもらう			if( m_mute) {				dispatchEvent( new Event( MUTE_ON));				hideBar();			} else {				dispatchEvent( new Event( MUTE_OFF));				showBar();			}		}		public function setMute( b:Boolean) {			m_mute = b;			changeIcon( m_slider.value);		}		public function getVolume() :Number {			return m_slider.value;		}		function showBar( e:MouseEvent = null) {			if( m_mute && m_useMute) return;			Tweener.addTween( m_sliderContainer, { x: W, transition:"liner", time:0.5});		}		function hideBar( e:MouseEvent = null) {			Tweener.addTween( m_sliderContainer, { x: W - m_sliderMask.width, transition:"liner", time:0.5});		}				function onChangeSlider( e:Event) {			changeIcon( m_slider.value);			dispatchEvent( e);		}				function changeIcon( vol:Number) {			if( m_mute && m_useMute) {				m_iconVolume.mute.visible = true;				m_iconVolume.vol1.visible = false;				m_iconVolume.vol2.visible = false;			} else {				m_iconVolume.mute.visible = false;				if( vol == MIN) {					m_iconVolume.vol1.visible = false;					m_iconVolume.vol2.visible = false;				} else if( vol < ( MAX - MIN) / 3) {					m_iconVolume.vol1.visible = true;					m_iconVolume.vol2.visible = false;				} else {					m_iconVolume.vol1.visible = true;					m_iconVolume.vol2.visible = true;				}			}		}				public function setVolume( vol:Number) {			m_sliderContainer.x = W - m_sliderBase.width; // このままで。気にしないで〜					m_slider.value = vol;			changeIcon( vol);		}						public function setViewWidth( w:Number) {									// スライダーベース（グラデーション）			m_sliderBase.graphics.clear();			var fillType:String = GradientType.LINEAR;			var alphas:Array = [1, 1];			var ratios:Array = [0x00, 0xFF];			var colors2:Array = [ 0xcccccc, 0xf0f0f0];			var matr2:Matrix = new Matrix();			matr2.createGradientBox( ( w - W - 1), H , Math.PI/2, 0, 0);			m_sliderBase.graphics.lineStyle( 1, 0xd9d9d9, 1);			m_sliderBase.graphics.beginGradientFill( fillType, colors2, alphas, ratios, matr2, SpreadMethod.PAD);			m_sliderBase.graphics.drawRect( 0.5, 0.5, ( w - W - 1), H-1);			m_sliderBase.graphics.endFill();						// マスク			m_sliderMask.graphics.clear();			m_sliderMask.graphics.lineStyle( 1, 0);			m_sliderMask.graphics.beginFill( 0);			m_sliderMask.graphics.drawRect( 0.5, 0.5, ( w - W - 1), H-1);			m_sliderMask.graphics.endFill();						m_slider.setSize( ( w - W - 1) - SLIDER_PAD * 2, H -  SLIDER_PAD * 2);						if( m_sliderContainer.x != W) m_sliderContainer.x = W - w;					}	}}