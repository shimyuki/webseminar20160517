package window.video.list {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import fl.controls.CheckBox;	import caurina.transitions.*;	import fl.events.ListEvent;	// 受講生一覧	// 全員リストとピックアップの切り替え表示を管理してる。	// （全員リストはサムネイル表示と一覧表示の２パターンあるよ）	public class ListContainer extends ResizableContainer {		private var _MIN_W = 100;		private var _MIN_H = 20;		private const LABEL_ALL:String = Main.LANG.getParam( "全員");		private const LABEL_PICKUP:String = Main.LANG.getParam( "ピックアップ表示");		private const INIT_Y = 0;		private const PAD = 0;		private var FOOTER_H = 15;		private var m_container:Sprite;		private var m_containerMask:Sprite;		private var m_scroll:SimpleScrollBar;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				private var m_titleBarCon:TitleBarContents;		private var m_chkbox_all:CheckBox;		private var m_chkbox_pickup:CheckBox;		protected var m_allList:AllList;		private var m_pickupList:PickupList;				// 		private var so_all:SharedObject;		private var so_pick:SharedObject;		private var m_all_selected:Boolean = true;		private var m_pick_selected:Boolean = false;		private var m_1st_all:Boolean = true;		private var m_1st_pick:Boolean = true;				public function ListContainer( w:Number, h:Number, titleText:TextField) {			super( w, h, _MIN_W, _MIN_H); // min_w は後で設定し直すのでとりあえずゼロ						if( Main.CONF.TERMINAL == Main.TERMINAL_ANDROID) {				FOOTER_H = 1;			}						// 一覧表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.y = INIT_Y;						// 一覧表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, 1);			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// 一覧表示コンテナのスクロールバー			m_scroll = addChild( new SimpleScrollBar()) as SimpleScrollBar;			m_scroll.y = INIT_Y;			m_scroll.setSize( m_scroll.width, 200);						m_scroll.setScrollTarget( m_container);			m_scroll.scrollMask = m_containerMask;						// 全員リスト			m_allList = newAllList( w, h);			m_allList.x = PAD;			m_allList.y = PAD;			m_allList.addEventListener( MemberEvent.POPUP_SETTING, reDispatchMemberEvent);			m_allList.addEventListener( MemberEvent.POPUP_SETTING_CHAT, reDispatchMemberEvent);			m_allList.addEventListener( "replaced", function( e:*){ /*alertDialog(String( m_container.height - m_allList.height));*/ m_scroll.update();});			// 講師が受講生の不具合を報告する			if( Main.USE_RECEIVE_IDLE_CHECK_BY_LEC && Main.CONF.isPro( Main.CONF.UID))  {				m_allList.addEventListener( MemberEvent.SOMETHING_WRONG_WITH_FPSMETER, reDispatchMemberEvent);			}						// ピックアップリスト			if( Main.CONF.isPro( Main.CONF.UID)) m_pickupList = new PickupList_lec( w, h);			else  m_pickupList = new PickupList_stu( w, h);			m_pickupList.x = PAD;			m_pickupList.y = PAD;			m_pickupList.addEventListener( MemberEvent.POPUP_SETTING, reDispatchMemberEvent);			m_pickupList.addEventListener( MemberEvent.POPUP_SETTING_CHAT, reDispatchMemberEvent);						// 受講生一覧のタイトルバーコンテンツ			m_titleBarCon = new TitleBarContents();			m_titleBarCon.addContents( titleText);						m_chkbox_pickup = new CheckBox();			m_chkbox_pickup.label = LABEL_PICKUP;			m_chkbox_pickup.textField.width = m_chkbox_pickup.textField.textWidth + 30;			m_chkbox_pickup.width = m_chkbox_pickup.width + m_chkbox_pickup.textField.width;			m_titleBarCon.addContents( m_chkbox_pickup);			m_chkbox_all = new CheckBox();			m_chkbox_all.label = LABEL_ALL;			m_chkbox_all.width = m_chkbox_all.width + m_chkbox_all.textField.textWidth;			m_titleBarCon.addContents( m_chkbox_all);						if( ! Main.CONF.isPro( Main.CONF.UID)) {				// 受講生の場合は、全員／ピックアップのチェックボックスは非表示にする				m_chkbox_pickup.visible = m_chkbox_all.visible = false;			} else {				m_titleBarCon.addContents( m_allList.getListTypeBtn(), m_chkbox_all.x + 60);			}					// 初期状態の全員表示はONにする			m_chkbox_all.selected = m_all_selected = true;			m_pick_selected = false;			m_container.addChild( m_allList);			m_chkbox_all.addEventListener( Event.CHANGE, changeAllSo);			m_chkbox_pickup.addEventListener( Event.CHANGE, changePickupSo);						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					// スクロールバーを一番上の状態に。					m_container.y = INIT_Y;					m_scroll.setBarYMin();					m_scroll.update();										// なんかポップアップするとピックアップと全員の位置がずれるので					// 一応ここでも位置調整を行う					// なぜかm_pickupList.getViewHeight()の値が、ポップアップ時にはちょっと小さくなってしまっている！！					if( m_pick_selected) {						m_allList.y = m_pickupList.getViewHeight();						//alertDialog( "m_allListの位置調整" + String( m_allList.y));														} else {						m_pickupList.y = - m_pickupList.getViewHeight() - 50; // よくわからんが…					}										// 個々のサムネイルの、FPSメーターの値を設定する用					if( ! Main.DEBUG_CANSEL_ENTERFRAME) addEventListener( Event.ENTER_FRAME, onEnterFrame);									});			addEventListener( Event.REMOVED_FROM_STAGE,				function( e:Event) {					removeEventListener( Event.ENTER_FRAME, onEnterFrame);				});		}		function onEnterFrame( e:Event) {			m_allList.setFpsMeter();			m_pickupList.setFpsMeter();		}		// 録画画面がoverrideする		protected function newAllList( w, h) {			return new AllList( w, h);		}		// LiveStatusManagerから呼ばれる		public function setTerminalStatus( uid:String, terminalType:String) {			m_allList.setTerminalStatus( uid, terminalType);		}				// 挙手状況の変更。Main:onSyncHere()からLiveStatusManager経由で呼ばれる		public function changeHereStatus( uid:String, hereFlag:Boolean, nowTime:Number) {			m_allList.changeHereStatus( uid, hereFlag, nowTime);		}		// 参加不参加状況の変更。Main:onSyncJoin()からLiveStatusManager経由で呼ばれる		public function changeJoinStatus( uid:String, joinFlag:Boolean, nowTime:Number) {			m_allList.changeJoinStatus( uid, joinFlag, nowTime);			m_pickupList.changeJoinStatus( uid, joinFlag);		}				// 自分自身が強制退室になった後（ネットコネクション切断直後）にMainから呼ばれる		public function setStatusDisconnect() {						if( m_container.contains( m_pickupList)) m_container.removeChild( m_pickupList);			m_container.addChild( m_allList);			m_allList.y = 0;			m_allList.setStatusDisconnect();		}				public function startBlinkChatBtn( uid:String){			m_allList.startBlinkChatBtn( uid);		}		public function stopBlinkChatBtn( uid:String){			m_allList.stopBlinkChatBtn( uid);		}				public function getNetStream( uid:String) : MyNetStream  {			return m_allList.getNetStream( uid);		}		public function setCamera( cam) {			m_allList.setCamera( cam);			m_pickupList.setCamera( cam);		}				// 録画画面の時にMain_viewから呼ばれる		public function hideScroll() {			m_scroll.visible = false;		}				// 全員表示のチェックボックス変更時		function changeAllSo( e:Event) {			if( so_all == null) {				alertDialog( Main.LANG.getParam( "通信エラーにより、表示状態を受講生画面と共有できませんでした"));			} else {				so_all.setProperty( "bool", m_chkbox_all.selected);				m_allList.getListTypeBtn().visible = m_chkbox_all.selected;			}		}		// ピックアップ表示のチェックボックス変更時		function changePickupSo( e:Event) {			if( so_pick == null) {				alertDialog( Main.LANG.getParam( "通信エラーにより、表示状態を受講生画面と共有できませんでした"));			} else {				//so_pick.setProperty( "bool", m_chkbox_pickup.selected);				so_pick.data.bool = m_chkbox_pickup.selected;				so_pick.setDirty( "bool");			}		}		// 全員表示のSharedObject変更時		function onChangeAll() {			if( so_all.data.bool) {				m_container.addChild( m_allList);				if( so_pick.data.bool) m_allList.y = m_pickupList.getViewHeight();				else m_allList.y = 0;			} else {				m_container.removeChild( m_allList);			}		}		// ピックアップ表示のSharedObject変更時		function onChangePickup() {			if( so_pick.data.bool) {//alertDialog("ピックアップ表示のSharedObject 表示");				// ピックアップをスライド表示				m_container.addChild( m_pickupList);				m_pickupList.y = - m_pickupList.getViewHeight();				Tweener.addTween( m_pickupList, { y: 0, transition:"liner", time:0.5, onComplete:onComplete});				if( m_container.contains( m_allList)) {					// 全員もスライド移動					Tweener.addTween( m_allList, { y: m_pickupList.getViewHeight(), transition:"liner", time:0.5, onComplete:onComplete});				}			} else {//alertDialog("ピックアップ表示のSharedObject 非表示");				// ピックアップをスライドで非表示				Tweener.addTween( m_pickupList, { y: - m_pickupList.getViewHeight(), transition:"liner", time:0.5, onComplete:onCompleteRemovePickup});				if( m_container.contains( m_allList)) {					// 全員もスライド移動					Tweener.addTween( m_allList, { y: 0, transition:"liner", time:0.5, onComplete:onComplete});				}			}		}		function onComplete() {			m_scroll.update();		}		function onCompleteRemovePickup() {			//if( m_container.contains( m_chkbox_pickup)) m_container.removeChild( m_chkbox_pickup);			if( m_container.contains( m_pickupList)) m_container.removeChild( m_pickupList);			m_scroll.update();		}		public function getTitlebar() : TitleBarContents {			return m_titleBarCon;		}				public function setVolume( uid:String, volume:Number) {			m_allList.setVolume( uid, volume);			m_pickupList.setVolume( uid, volume);		}		// Mainから、ネットコネクションが切れたときに呼ばれる。		public function resetNetStream() {			// 次にinitSoが再度呼ばれたときのための準備。			m_allList.resetNetStream();			m_pickupList.resetNetStream();		}		public function initSo( objname:String, nc:NetConnection, so_here:SharedObject) : void {			m_allList.initSo( objname, nc, so_here);//Main.addDebugMsg( "ネットワーク系初期化 m_allList OK");				m_pickupList.initSo( objname, nc);//Main.addDebugMsg( "ネットワーク系初期化 m_pickupList OK");				// m_allListの全受信ストリームをm_pickupListと共有するため、渡す			//m_pickupList.setUidNsHash( uidNsHash);									// 講師による全員表示とピックアップ表示のチェックボックス操作を生徒にも反映する			if( so_all == null) {				so_all = SharedObject.getRemote( objname + "_all", nc.uri, false);				so_all.fps = LoadConf.SO_FPS_LIST_ALL;				so_all.addEventListener( SyncEvent.SYNC, onSyncEvent);				function onSyncEvent( e:SyncEvent):void {					if( so_all.data.bool == undefined || ( m_1st_all && m_chkbox_all.visible)) {						so_all.setProperty( "bool", m_chkbox_all.selected);					} else if( so_all.data.bool != m_all_selected) {						onChangeAll();						m_all_selected = so_all.data.bool;					}					m_1st_all = false;				}			}			if( so_pick == null) {				so_pick = SharedObject.getRemote( objname + "_pick", nc.uri, false);				so_pick.fps = LoadConf.SO_FPS_LIST_PICK;				so_pick.addEventListener( SyncEvent.SYNC, onSyncEventPick);				function onSyncEventPick( e:SyncEvent):void {//alertDialog( String( so_pick.data.bool));					if( so_pick.data.bool == undefined || ( m_1st_pick && m_chkbox_pickup.visible)) {						so_pick.setProperty( "bool", m_chkbox_pickup.selected);					} else if( so_pick.data.pick != m_pick_selected) {						onChangePickup();						m_pick_selected = so_pick.data.bool;					}					m_1st_pick = false;				}			}			so_all.connect( nc);			so_pick.connect( nc);		}				public function set1stAttendTime( uid:String, time:Number) {			m_allList.set1stAttendTime( uid, time);		}				public function resetLayout( memberCol:int, memberUids:Array, memberCol_pickup:int, memberUids_pickup:Array) {			/*/// デバッグライト用 ここから ------------------var tmp_uids:String = "";var tmp_uids_pickup:String = "";if( memberUids) {	for each( var uid:String in memberUids) {		tmp_uids += "[" + uid + "] ";	}} else {	tmp_uids = "無し";}if( memberUids_pickup) {	for each( var uid:String in memberUids_pickup) {		tmp_uids_pickup += "[" + uid + "] ";	}} else {	tmp_uids_pickup = "無し";}alertDialog( "resetLayout() \n全員表示の列数：" + memberCol + "\n"			//+ "全員表示のuid：" + tmp_uids + "\n"			+ "ピックアップ表示の列数：" + memberCol_pickup + "\n"			//+ "ピックアップ表示のuid：" + tmp_uids_pickup + "\n"			);/// デバッグライト用 ここまで ------------------*/						m_allList.resetLayout( memberCol, memberUids);			m_pickupList.resetLayout( memberCol_pickup, memberUids_pickup);					if( ! m_chkbox_all.selected) {				m_chkbox_all.selected = true;				// チェックボックスの変更イベントがなぜか発生しないので、手動でSO変更				if( so_all != null) so_all.setProperty( "bool", m_chkbox_all.selected);			}												if( Main.CONF.isStudent( Main.CONF.UID) && so_pick != null && so_pick.data.bool != undefined && so_pick.data.bool) {				m_chkbox_pickup.selected = true;				m_allList.y = m_pickupList.getViewHeight();				m_pickupList.y = 0;				m_pick_selected = true;			} else {				m_chkbox_pickup.selected = false;				// チェックボックスの変更イベントがなぜか発生しないので、手動で変更				if( so_pick != null) so_pick.setProperty( "bool", m_chkbox_pickup.selected);								m_allList.y = 0;				m_pickupList.y = - m_pickupList.getViewHeight();				m_pick_selected = false;			}						m_scroll.update();		}								override public function setEnabled( b:Boolean):void {			m_allList.setEnabled( b);			m_pickupList.setEnabled( b);		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW ) {									m_containerMask.width = w - m_scroll.width;				m_scroll.x = w - m_scroll.width;										m_allList.setViewWidth( w - m_scroll.width - PAD * 2);				m_pickupList.setViewWidth( w - m_scroll.width - PAD * 2);											if( so_pick != null && so_pick.data.bool != undefined) {					if( so_pick.data.bool) m_allList.y = m_pickupList.getViewHeight();					else m_allList.y = 0;				}				m_preW = w;				m_scroll.update();			}					}				override public function setViewHeight( h:Number):void {			super.setViewHeight( h);									// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( h != m_preH ) {				m_containerMask.height = h - INIT_Y - FOOTER_H - PAD * 2;				m_preH = h;				m_scroll.setSize( m_scroll.width, h - INIT_Y - FOOTER_H);				m_scroll.update();			}		}				function reDispatchMemberEvent( e:MemberEvent) {			dispatchEvent( new MemberEvent( e.type, e.uid));		}		function alertDialog( str:String) {			Main.addErrMsg( "ListContainer:" + str);		}	}}