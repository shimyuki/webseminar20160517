package window.video.list {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	import window.video.list.parts.*;	// 受講生一覧の全員リスト	// サムネイル表示と一覧表示の２パターン	public class AllList extends ResizableContainer {		static public const LISTTYPE_CHANGED = "LISTTYPE_CHANGED";		private const PAD = 8;		private const THU_PAD = 2; // サムネイル同士の隙間		private var m_btnListType;		private var m_listtype:String;		private var m_memberConArr:Array;		private var m_col:int = 6; // サムネイル表示の場合の分割数				private var m_textlistLabels:TextlistLabel;				public function AllList( w:Number, h:Number) {			super( w, h, 100, 100); // min_w は後で設定し直すのでとりあえず						// サムネイル表示かテキスト表示かの選択ボタン			//m_btnListType = ListTypeBtn( addChild( new ListTypeBtn()));			m_btnListType = new ListTypeBtn();			m_btnListType.onClickThumb();			m_listtype = ListTypeBtn.THUMB_CLICKED;			//m_btnListType.x = PAD;			//m_btnListType.y = PAD;						// テキスト表示の際の、見出しラベル			m_textlistLabels = new TextlistLabel();			m_textlistLabels.x = PAD;			m_textlistLabels.y = PAD; // m_btnListType.y + m_btnListType.height + PAD;						// 人数分のメンバーコンテナ格納配列			m_memberConArr = new Array();			var arr:Array = Main.CONF.getMemberArr();			for each( var member:Member in arr) {								// 講師は除く				if( Main.CONF.isPro( member.uid)) continue;//Main.addDebugMsg("AllList " + member.uid);				var con:MemberContainer = new MemberContainer( member.uid);				m_memberConArr.push( con);				con.addEventListener( MemberEvent.POPUP_SETTING, reDispatchMemberEvent);				con.addEventListener( MemberEvent.POPUP_SETTING_CHAT, reDispatchMemberEvent);								// 講師が受講生の不具合を報告する				if( Main.USE_RECEIVE_IDLE_CHECK_BY_LEC && Main.CONF.isPro( Main.CONF.UID))  {					con.addEventListener( MemberEvent.SOMETHING_WRONG_WITH_FPSMETER, reDispatchMemberEvent);				}			}		}		// 自分自身が強制退室になった後（ネットコネクション切断直後）に呼ばれる		public function setStatusDisconnect() {						for each( var con:MemberContainer in m_memberConArr) {				if( con.uid != Main.CONF.UID) {					con.setStatusDisconnect();					con.setVolume( 0);				} else {					con.setCamera( null);					con.setVolume( 0);				}			}		}				public function startBlinkChatBtn( uid:String){			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) con.startBlinkChatBtn();			}		}		public function stopBlinkChatBtn( uid:String){			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) con.stopBlinkChatBtn();			}		}				// LiveStatusManager経由で呼ばれる		public function setTerminalStatus( uid:String, terminalType:String) {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) {					con.setTerminalStatus( terminalType);					break;				}			}		}				// 挙手状況の変更。Main:onSyncHere()からLiveStatusManager経由で呼ばれる		public function changeHereStatus( uid:String, hereFlag:Boolean, nowTime:Number) {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) con.changeHereStatus( hereFlag, nowTime);			}						// ソートしてreplace			//m_memberConArr.sortOn([ "status", "lastHereTime", "firstAttendTime"], 					//  [ Array.NUMERIC | Array.DESCENDING, Array.NUMERIC, Array.NUMERIC]);			m_memberConArr.sortOn([ "firstAttendTime"], [ Array.NUMERIC]);			if( m_listtype == ListTypeBtn.TEXT_CLICKED) replaceAsTextlist();// テキスト一覧			else replaceAsThumblist();// サムネイル一覧//alertDialog( "changeHereStatus()");		}		// 参加不参加状況の変更。Main:onSyncJoin()からLiveStatusManager経由で呼ばれる		public function changeJoinStatus( uid:String, joinFlag:Boolean, nowTime:Number) {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) con.changeJoinStatus( joinFlag, nowTime);			}						// ソートしてreplace			m_memberConArr.sortOn([ "firstAttendTime"], [ Array.NUMERIC]);			if( m_listtype == ListTypeBtn.TEXT_CLICKED) replaceAsTextlist();// テキスト一覧			else replaceAsThumblist();// サムネイル一覧//alertDialog( "changeJoinStatus()");		}		// 最初の参加時間の変更。Main:onSyncSo1stJoinTime()から呼ばれる		public function set1stAttendTime( uid:String, time:Number) {			var changed = false;			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid && con.firstAttendTime != time) {					con.firstAttendTime = time;					changed = true;				}			}			if( !changed) return; // 変更なし						// ソートしてreplace			m_memberConArr.sortOn([ "firstAttendTime"], [ Array.NUMERIC]);			if( m_listtype == ListTypeBtn.TEXT_CLICKED) replaceAsTextlist();// テキスト一覧			else replaceAsThumblist();// サムネイル一覧//alertDialog( "set1stAttendTime()");		}		public function setCamera( camera) {			for each( var con:MemberContainer in m_memberConArr) {				if( Main.CONF.UID == con.uid) con.setCamera( camera);			}		}				public function getListTypeBtn() : ListTypeBtn { return m_btnListType;}				// 録画画面がoverrideする		protected function needsRemove( con:MemberContainer) : Boolean {			/*			// 退席判定だったら非表示			if( con.status == MemberContainer.STATUS_ABSENCE) {				return true;			}*/			// 未参加だったら非表示			if( con.firstAttendTime == Number.MAX_VALUE) {				return true;			}			return false;		}		function replaceAsTextlist() {			// テキスト一覧			addChild( m_textlistLabels);						// 各カラムの横幅の最大値を求める			var maxW:Object = { namae:	m_textlistLabels.getNameW(),								attend:	m_textlistLabels.getAttendW(),								cam:	m_textlistLabels.getCamW(),								mic:	m_textlistLabels.getMicW(),								wb:	m_textlistLabels.getWbW()};			var con:MemberContainer = null;			for each( con in m_memberConArr) {				if(! con.available) continue;								maxW.namae = maxW.namae < con.getNameW() ? con.getNameW() : maxW.namae;				maxW.attend = maxW.attend < con.getAttendW() ? con.getAttendW() : maxW.attend;				maxW.cam = maxW.cam < con.getCamW() ? con.getCamW() : maxW.cam;				maxW.mic = maxW.mic < con.getMicW() ? con.getMicW() : maxW.mic;				maxW.wb = maxW.wb < con.getWbW() ? con.getWbW() : maxW.wb;								if( con.status == MemberContainer.STATUS_ABSENCE) continue;			}						var odd:Boolean = true; // 奇数列			var posi_y = m_textlistLabels.y + m_textlistLabels.height;			// 各カラムの横幅を統一して、add			for each( con in m_memberConArr) {				if(! con.available) {					if( contains( con)) removeChild( con);					continue;				}				// 未参加だったら非表示				if( needsRemove( con)) {					if( contains( con)) removeChild( con);					continue;				}				con.showAsTextlist( odd ? 0xffffff : 0xe0f7ff);				odd = !odd;								con.setNameW( maxW.namae);				con.setAttendW( maxW.attend);				con.setCamW( maxW.cam);				con.setMicW( maxW.mic);				con.setWbW( maxW.wb);								con.x = PAD;				con.y = posi_y;				posi_y += con.getViewHeight();				addChild( con);			}			m_textlistLabels.setNameW( maxW.namae);			m_textlistLabels.setAttendW( maxW.attend);			m_textlistLabels.setCamW( maxW.cam);			m_textlistLabels.setMicW( maxW.mic);			m_textlistLabels.setWbW( maxW.wb);						var sizecheck:MemberContainer = null;			for each( con in m_memberConArr) {				if( con.available && con.status != MemberContainer.STATUS_ABSENCE) {					sizecheck = con;					break;				}			}			if( sizecheck != null) m_textlistLabels.setBg( sizecheck.getViewWidth());			else m_textlistLabels.setBg( m_textlistLabels.width + 20);			dispatchEvent( new Event( "replaced"));		}		function replaceAsThumblist() {			// サムネイル一覧			if( contains( m_textlistLabels)) removeChild( m_textlistLabels);			var posi_y = PAD;//m_btnListType.y + m_btnListType.height + PAD;			var posi_x = PAD;			var col:int = 0;			var padding = 2;			for each( var con:MemberContainer in m_memberConArr) {				if(! con.available) {					if( contains( con)) removeChild( con);					continue;				}				con.showAsThumblist();								// 未参加だったら非表示				if( needsRemove( con)) {					if( contains( con)) removeChild( con);					continue;				}								con.x = posi_x;				con.y = posi_y;				addChild( con);								posi_x += con.getViewWidth() + THU_PAD;				col++;				if( col == m_col) {					col = 0;					posi_x = PAD;					posi_y += con.getViewHeight() + THU_PAD;				}			}			dispatchEvent( new Event( "replaced"));		}				public function resetNetStream() {			// 次にinitSoが再度呼ばれたときのための準備			for each( var con:MemberContainer in m_memberConArr) {				con.resetNetStream();			}		}		public function initSo( objname:String, nc:NetConnection, so_here:SharedObject) {			for each( var con:MemberContainer in m_memberConArr) {				con.initSo( nc, so_here);			}		}		public function setVolume( _uid:String, volume:Number) {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == _uid) {					con.setVolume( volume);					return;				}			}		}		public function setFpsMeter() {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid != Main.CONF.UID) con.setFpsMeter();			}		}		public function getNetStream( uid:String) : MyNetStream  {			for each( var con:MemberContainer in m_memberConArr) {				if( con.uid == uid) return con.getNetStream();			}			return null;		}				// 画面モード変更時にMainからListContainer経由で呼ばれる		public function resetLayout( memberCol:int, memberUids:Array) {			m_col = memberCol;						for each( var con:MemberContainer in m_memberConArr) {								// 列数と全体幅に応じて、サムネイルの横幅を変更				con.setViewWidth( getThuWidth());								// 表示非表示の設定				var exist:Boolean = false;				if( memberUids != null) {					for each( var uid:String in memberUids) {						if( con.uid == uid) {							exist = true;							break;						}					}				} else {					// プリセットなので、全員表示					exist = true;				}				con.available = exist;			}						// ソートしてreplace			m_memberConArr.sortOn([ "firstAttendTime"], [ Array.NUMERIC]);						if( m_listtype == ListTypeBtn.TEXT_CLICKED) replaceAsTextlist();// テキスト一覧			else replaceAsThumblist();// サムネイル一覧		}				function getThuWidth() : Number {			// 列数と全体幅に応じて、サムネイルの横幅を取得			return ( getViewWidth() - PAD * 2 - ( m_col - 1) * THU_PAD) / m_col;		}				function setListType( e:Event) {			m_listtype = e.type;						if( m_listtype == ListTypeBtn.TEXT_CLICKED) replaceAsTextlist();// テキスト一覧			else  replaceAsThumblist();// サムネイル一覧						dispatchEvent( new Event( LISTTYPE_CHANGED));		}								override public function setEnabled( b:Boolean):void {			m_btnListType.setEnabled( b);			if( b) {				m_btnListType.addEventListener( ListTypeBtn.THUMB_CLICKED, setListType);				m_btnListType.addEventListener( ListTypeBtn.TEXT_CLICKED, setListType);			} else {				m_btnListType.removeEventListener( ListTypeBtn.THUMB_CLICKED, setListType);				m_btnListType.removeEventListener( ListTypeBtn.TEXT_CLICKED, setListType);			}		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						for each( var con:MemberContainer in m_memberConArr) {				// 列数と全体幅に応じて、サムネイルの横幅を変更				con.setViewWidth( getThuWidth());			}			// サムネイルの高さも変わっただろうから、並べ直し			if( m_listtype == ListTypeBtn.THUMB_CLICKED) replaceAsThumblist();// サムネイル一覧		}				override public function setViewHeight( h:Number):void {			super.setViewHeight( h);		}		function reDispatchMemberEvent( e:MemberEvent) {			dispatchEvent( new MemberEvent( e.type, e.uid));		}				function alertDialog( str:String) {			Main.addErrMsg( "AllList:" + str);		}	}}