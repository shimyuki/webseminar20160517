package window.video.list {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	import window.video.list.parts.*;	import flash.media.Camera;	// 受講生一覧のピックアップリスト	public class PickupList_stu extends PickupList {				public function PickupList_stu( w:Number, h:Number) {			super( w, h);		}		override protected function resetMember() {			// サムネイル一覧を生成しなおす。			// 全てのサムネイルをとりあえずremoveして削除。			for( var i = 0; i < numChildren; i++) {				var con_added = getChildAt( i) as PickupMemberContainer_stu;				if( con_added != null) {					con_added.unload(); // もう使わない処理					con_added.removeEventListener( PickupMemberContainer_stu.UID_CHANGED, onChangeUid);					removeChild( con_added);					i--;				}			}						// サムネイルを生成			var cnt:uint = 0;			for each( var uid:String in m_memberUids) {							var con:PickupMemberContainer = PickupMemberContainer( addChild( new PickupMemberContainer_stu( cnt)));				con.addEventListener( PickupMemberContainer_stu.UID_CHANGED, onChangeUid);				con.init( uid);								if( uid == Main.CONF.UID) {					con.setCamera( m_myCamera);				} else if( m_nc != null) {					con.setNc( m_nc);					con.startReceive();				}				addChild( con);				cnt ++;			}			if( cnt == 0) {				// 表示リスト無し				H = 0;				setViewHeight( H);			}		}						// 受講生の場合呼ばれる。		function onChangeUid( e:Event) {			var con_target:PickupMemberContainer = e.target as PickupMemberContainer;			m_memberUids[ con_target.getNum()] = con_target.getCurrentUid();						if( con_target.getCurrentUid() == Main.CONF.UID) {				con_target.setCamera( m_myCamera);			} else {				// 参加状態を反映				if( m_joinStatus[ con_target.getCurrentUid()] != undefined) con_target.changeJoinStatus( m_joinStatus[ con_target.getCurrentUid()]);				else con_target.changeJoinStatus( false);			}						// マイク状態などをSOと合わせる			var hash:Object = Main.CONF.getMemberDataHash( con_target.getCurrentUid());			if( hash != null) applySo( con_target, hash);			con_target.setVolumeMeterLevel( 0);		}				override public function initSo( objname:String, nc:NetConnection) : void {			// ピックアップ表示の並びの変更を監視する			if( so_pickup == null) {				so_pickup = SharedObject.getRemote( objname + "_pickup", nc.uri, false); 				so_pickup.addEventListener( SyncEvent.SYNC, onSyncSoPickup_stu);			}						so_pickup.connect( nc);						super.initSo( objname, nc);					}						// 受講生の場合呼ばれる		function onSyncSoPickup_stu( e:SyncEvent) {			var needReset:Boolean = false;			var needReplace:Boolean = false;						for each( var obj in e.changeList) {				//alertDialog(obj.name + "," + obj.code+ "," + obj.oldValue);				if( obj.code == "change" && obj.name == "uidNumObj") {					// 講師のコンボボックスの変更を反映する					for( var i = 0; i < numChildren; i++) {						var con:PickupMemberContainer_stu = getChildAt( i) as PickupMemberContainer_stu;						if( con != null && con.getNum() == so_pickup.data.uidNumObj["targetNum"]) {//alertDialog( "講師のコンボボックスの変更を反映:" + con.getCurrentUid()+ "->" + so_pickup.data.uidNumObj["newUid"]);							con.change( so_pickup.data.uidNumObj["newUid"]);							break;						}					}				} else if( obj.code == "change" && obj.name == "refreshData") {										if( ! isSameArr( m_memberUids, so_pickup.data.refreshData[ "memberUids"])) {						m_memberUids = so_pickup.data.refreshData[ "memberUids"];						needReset = true;					}					m_col = so_pickup.data.refreshData[ "memberCol"];					needReplace = true;				}			}			if( needReset) {				// 生成し直し				resetMember();			}			if( needReset || needReplace) {				// 並び替え直し				replace();			}		}			}}