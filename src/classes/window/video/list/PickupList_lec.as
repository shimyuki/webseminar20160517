package window.video.list {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	import window.video.list.parts.*;	import flash.media.Camera;	// 受講生一覧のピックアップリスト	public class PickupList_lec extends PickupList {		private const MSG_VACANT = Main.LANG.getParam( "※ ピックアップリストは環境設定 > 画面モード一覧 から設定できます。");		private var m_vacantText:TextField;				public function PickupList_lec( w:Number, h:Number) {			super( w, h);						m_vacantText = new TextField();			m_vacantText.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 12);			m_vacantText.autoSize = TextFieldAutoSize.LEFT;			m_vacantText.text = MSG_VACANT;			m_vacantText.x = PAD;			m_vacantText.y = PAD;		}		override protected function resetMember() {			// サムネイル一覧を生成しなおす。									// 全てのサムネイルをとりあえずremoveして削除。			for( var i = 0; i < numChildren; i++) {				var con_added = getChildAt( i) as PickupMemberContainer_lec;				if( con_added != null) {					con_added.unload(); // もう使わない処理					con_added.removeEventListener( PickupMemberContainer_lec.COMBO_CHANGED, onChangeCombo);					con_added.removeEventListener( MemberEvent.POPUP_SETTING, reDispatchMemberEvent);					removeChild( con_added);					con_added = null;					i--;				}			}						// サムネイルを生成			var cnt:uint = 0;			for each( var uid:String in m_memberUids) {							var con:PickupMemberContainer = PickupMemberContainer( addChild( new PickupMemberContainer_lec( cnt)));									// 参加状態を反映				if( m_joinStatus[ uid] != undefined) con.changeJoinStatus( m_joinStatus[ uid]);				else con.changeJoinStatus( false);								con.addEventListener( PickupMemberContainer_lec.COMBO_CHANGED, onChangeCombo);													con.addEventListener( MemberEvent.POPUP_SETTING, reDispatchMemberEvent);				con.init( uid);								if( m_nc != null) {					con.setNc( m_nc);					con.startReceive();				}				addChild( con);				cnt ++;			}			if( cnt == 0) {				// 表示リスト無し				addChild( m_vacantText);				H = m_vacantText.y + m_vacantText.height + PAD;				setViewHeight( H);			} else {				if( contains( m_vacantText)) removeChild( m_vacantText);			}		}				// 講師の場合呼ばれる。どれかのサムネイルを入れ替える		function onChangeCombo( e:Event) {			var con_target:PickupMemberContainer = e.target as PickupMemberContainer;			m_memberUids[ con_target.getNum()] = con_target.getCurrentUid();						if( so_pickup != null) {				var obj = new Object;				obj["targetNum"] = con_target.getNum();				obj["newUid"] = con_target.getCurrentUid();				so_pickup.data.uidNumObj = obj;				so_pickup.setDirty( "uidNumObj");								m_memberUids[ obj["targetNum"]] = obj["newUid"];				so_pickup.data.refreshData = { memberUids:m_memberUids, memberCol:so_pickup.data.refreshData[ "memberCol"]};				so_pickup.setDirty( "refreshData");							}			// 参加状態を反映			if( m_joinStatus[ con_target.getCurrentUid()] != undefined) con_target.changeJoinStatus( m_joinStatus[ con_target.getCurrentUid()]);			else con_target.changeJoinStatus( false);						// マイク状態などをSOと合わせる			var hash:Object = Main.CONF.getMemberDataHash( con_target.getCurrentUid());			if( hash != null) applySo( con_target, hash);			con_target.setVolumeMeterLevel( 0);		}				override public function initSo( objname:String, nc:NetConnection) : void {						// ピックアップ表示の並びの変更を監視する			if( so_pickup == null) {				so_pickup = SharedObject.getRemote( objname + "_pickup", nc.uri, false); 			}			so_pickup.addEventListener( SyncEvent.SYNC, onSyncSoPickup_lec_1st);			so_pickup.connect( nc);						super.initSo( objname, nc);		}				override protected function applySo( con:PickupMemberContainer, hash:Object) {			PickupMemberContainer_lec( con).setVolumeCtlMute( hash.mic == 1 ? false : true);			if( hash.gain != PickupMemberContainer_lec( con).getVolumeCtl())  PickupMemberContainer_lec( con).setVolumeCtl( hash.gain);			super.applySo( con, hash);		}		// 講師の場合呼ばれる		function onSyncSoPickup_lec_1st( e:SyncEvent) {			if( so_pickup.data.refreshData == undefined) {				// 一番最初のアクセス				so_pickup.data.refreshData = { memberUids:m_memberUids, memberCol:m_col};				so_pickup.setDirty( "refreshData");							} else {				// 受講生がいる状態で、講師が再ログインした場合				m_memberUids = so_pickup.data.refreshData[ "memberUids"];				m_col = so_pickup.data.refreshData[ "memberCol"];				resetMember();				replace();			}			so_pickup.removeEventListener( SyncEvent.SYNC, onSyncSoPickup_lec_1st);			//so_pickup.addEventListener( SyncEvent.SYNC, onSyncSoPickup_lec);		}	}}