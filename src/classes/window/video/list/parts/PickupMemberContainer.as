package window.video.list.parts {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import window.setting.*;	import flash.text.*;	import flash.events.*;	import fl.controls.ComboBox;	import flash.net.*;	import caurina.transitions.*;	import window.video.VoiceMeter;	import flash.media.Camera;	import flash.media.Video;	// ピックアップ用の受講生一覧のメンバー表示コンテナ	public class PickupMemberContainer extends Sprite {		protected const HEADER_H = 27;		protected const FOOTER_H = 24;		protected var m_bitmap:Bitmap;		//private var m_uidImgHash:Object; // uidと顔写真の連想配列		private var W:Number;		protected var H:Number;		private var IMG_W:Number;		private var IMG_H:Number;		private var m_video:Video;		protected var m_fpsMeter:FpsMeter = null;		protected var m_volumeMeter:VoiceMeter;				protected var m_currentUid:String = "";		protected var m_absence:Sprite;				private var m_num:uint;				protected var m_nc:NetConnection;		//protected var m_receive_ns:MyNetStream = null;		//private var so:SharedObject = null;		//private var so_volume:SharedObject = null;		protected var m_receive_ns:NetStream = null;		//private var tmp_createdate:Date;						public function PickupMemberContainer( num:uint) {			m_num = num;			//tmp_createdate = new Date();			// 顔写真表示m_bitmapの用意			m_bitmap = new Bitmap( null);			addChild( m_bitmap);			/*m_loader = Loader( addChild( new Loader()));			m_loader.x = 2;			m_loader.y = HEADER_H + 2;			m_loader.contentLoaderInfo.addEventListener( Event.COMPLETE, function( e:*) { setLoaderSizePosi();});			m_loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, function(e:*){});*/						m_video = Video( addChild( new Video()));			m_video.smoothing = true;			m_video.x = 2;			m_video.y = HEADER_H + 2;						// fps割合メーター			m_fpsMeter = new FpsMeter();			m_fpsMeter.x = m_video.x + 5;			m_fpsMeter.y = 5;			addChild( m_fpsMeter);						// 欠席用半透明四角			m_absence = Sprite( addChild( new Sprite()));			m_absence.x = m_video.x;			m_absence.y = m_video.y;			var iconNetworkOff = m_absence.addChild( new IconNetworkOff());			iconNetworkOff.x = m_fpsMeter.x - m_video.x;			iconNetworkOff.y = m_fpsMeter.y - m_video.y;						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage);		}		function onAddedToStage( e:Event) {						if( !m_currentUid || m_currentUid == "") return;			var memberData = Main.CONF.getMemberDataHash( m_currentUid);			if( memberData != null) m_bitmap.bitmapData = Main.CONF.getMemberImgBmpdata( memberData.img);						setLoaderSizePosi();		}				public function resetNum( num:uint) { m_num = num;}		public function getNum():uint { return m_num;}				// 映像の受信開始		public function startVideo( e:* = null):void {//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] startVideo m_receive_ns:" + m_receive_ns);			if( m_receive_ns == null) return;			m_video.attachCamera( null);			m_video.clear();						m_receive_ns.receiveVideo( true);			m_receive_ns.receiveAudio( false);			m_receive_ns.play( m_currentUid);			m_video.attachNetStream( m_receive_ns);		}		// 映像の受信停止		public function stopVideo( e:* = null):void {//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] stopVideo");						m_receive_ns.receiveVideo( false);			m_video.attachNetStream( null);			m_video.clear();			m_receive_ns.close();		}		public function setNc( nc:NetConnection):void {//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] setNc");			if( nc && m_receive_ns == null) {				m_receive_ns = new NetStream( nc);				m_receive_ns.receiveAudio( false);				m_receive_ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus);			}		}		function onNetStatus( e:NetStatusEvent) {//if( m_num == 1) Main.addErrMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] "+ e.info.code);			switch( e.info.code) {				case "NetStream.Play.StreamNotFound":				case "NetStream.Play.Stop":				m_video.clear();				break;			}		}				public function resetNetStream() {//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] resetNetStream");			// 次にsetNcやらstartReceiveが再度呼ばれたときのための準備。			m_video.attachNetStream( null);			if( m_receive_ns != null) {				m_receive_ns.removeEventListener( NetStatusEvent.NET_STATUS, onNetStatus);				m_receive_ns.close();				m_receive_ns = null;			}		}				// 受信開始		public function startReceive():void {			if( m_receive_ns == null) {				alertDialog( "NetStream is null.");				return;			}//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] startReceive");			m_video.clear();			m_receive_ns.receiveVideo( true);						m_receive_ns.play( m_currentUid);			m_video.attachNetStream( m_receive_ns);			m_video.visible = true; // setCameraのとき、clearだけじゃだめだったので…		}		public function unload() { 			//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] unload");			if( m_receive_ns != null) {				stopVideo();				m_receive_ns.receiveVideo( false);				m_video.attachNetStream( null);				m_video.attachCamera( null);				m_receive_ns.removeEventListener( NetStatusEvent.NET_STATUS, onNetStatus);				m_receive_ns.close();			}						removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage);		}				public function init( uid:String) {			m_currentUid = uid;		}				public function getCurrentUid() : String {			return m_currentUid; // 受講生、講師の場合、ともによばれる、かも。		}		public function setCamera( cam:Camera) {//if( m_num == 1) Main.addDebugMsg( "PickupMemberContainer "+ String( m_num) + "-" + String( tmp_createdate) +" ["+ m_currentUid+"] setCamera");			m_absence.visible = false;			if( m_receive_ns != null) {				stopVideo();			}			m_video.attachCamera( cam);			//m_video.clear();			if( cam == null) m_video.visible = false; // clearだけじゃだめみたい…		}		public function setFpsMeterDenominator( val:Number) {//if( m_receive_ns != null && m_currentUid == "student01") if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "PickupMemberContainer:" + val);			m_fpsMeter.setDenominator( val);		}		public function setVolumeMeterLevel( val:Number) {			m_volumeMeter.setLevel( val);		}				public function changeJoinStatus( b:Boolean) {			if( b) {				Tweener.removeTweens( m_absence);				m_absence.visible = false;			} else {				m_absence.visible = true;				m_absence.alpha = 1;				//m_absence.alpha = 0;				//Tweener.removeTweens( m_absence);				//Tweener.addTween( m_absence,{ alpha:1, time:3, transition:"linear", onComplete:onCompleteAbsence});			}		}		/*		function onCompleteAbsence() {			m_video.clear();		}*/		public function setFpsMeter() {			if( m_receive_ns != null) m_fpsMeter.setNumerator( m_receive_ns.currentFPS);//if( m_receive_ns != null && m_currentUid == "student01") if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "PickupMemberContainer:" + m_receive_ns.currentFPS);		}		function getText( str:String) : TextField {			var txt = new TextField();			txt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			txt.text = str;			txt.width = txt.textWidth + 4;			txt.height = txt.textHeight + 4;			return txt;		}				function setLoaderSizePosi() {			if( m_bitmap.bitmapData != null) {				var scale_x:Number = IMG_W / m_bitmap.bitmapData.width < 1 ? IMG_W / m_bitmap.bitmapData.width : 1;				var scale_y:Number = IMG_H / m_bitmap.bitmapData.height < 1 ? IMG_H / m_bitmap.bitmapData.height : 1;				m_bitmap.scaleX = m_bitmap.scaleY = scale_x < scale_y ? scale_x : scale_y;			} else {				m_bitmap.width = IMG_W;				m_bitmap.height = IMG_H;			}						var x0:Number = 2;			var y0:Number = 2 + HEADER_H + 1;			m_bitmap.x = x0 + ( IMG_W - m_bitmap.width) / 2;			m_bitmap.y = y0 + ( IMG_H - m_bitmap.height) / 2;					}								public function setViewWidth( _w:Number):void {			W = _w;			IMG_W = _w - 6;			IMG_H = IMG_W / 4 * 3;			H = 2+HEADER_H+1+IMG_H+1+FOOTER_H+2; // 全体の高さ			graphics.clear();			//グレー枠			graphics.beginFill( 0xd9d9d9);			graphics.drawRect( 0, 0, _w, H);			graphics.endFill();			// パディング白ベース			graphics.beginFill( 0xffffff);			graphics.drawRect( 1, 1, _w-2, H - 2);			graphics.endFill();			// ヘッダーベース			graphics.beginFill( 0xcccccc);			graphics.drawRect( 2, 2, _w - 4, HEADER_H - 1);			graphics.endFill();			// フッターベース			graphics.beginFill( 0xf0f0f0);			graphics.drawRect( 2, H - 2 - FOOTER_H, _w - 4, FOOTER_H);			graphics.endFill();						// 画像サイズと位置			setLoaderSizePosi();			var inner_w = _w - 4;						m_video.width = inner_w;			m_video.height = inner_w / 4 * 3;						// 欠席用の半透明			m_absence.graphics.clear();			m_absence.graphics.beginFill( 0, 0.5);			m_absence.graphics.drawRect( 0, 0, m_video.width, m_video.height + 0.5);			m_absence.graphics.endFill();		}				public function getViewWidth():Number { return W;}		public function getViewHeight():Number { return H;}				function alertDialog( str:String) {			Main.addErrMsg(  "PickupMemberContainer:" + str);		}		function reDispatchMemberEvent( e:MemberEvent) {			dispatchEvent( new MemberEvent( e.type, e.uid));		}	}}