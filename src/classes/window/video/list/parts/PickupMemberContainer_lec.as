package window.video.list.parts {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import window.setting.*;	import flash.text.*;	import flash.events.*;	import fl.controls.ComboBox;	import flash.net.*;	import caurina.transitions.*;	import window.video.VoiceMeter;	import window.video.VolumeCtl;	import flash.media.Camera;	import flash.media.Video;	// ピックアップ用の受講生一覧のメンバー表示コンテナ	public class PickupMemberContainer_lec extends PickupMemberContainer {		private const INNER_PAD = 4;		private const LABEL_DETAIL = Main.LANG.getParam( "詳細");		private var m_combo:ComboBox = null; // 名前選択のコンボボックス		static public const COMBO_CHANGED:String = "COMBO_CHANGED";		private var m_volumeCtl:VolumeCtl;		private var m_btnDetail:DynamicTextBtn;				public function PickupMemberContainer_lec( num:uint) {			super( num);						// 名前選択コンボボックスの設定			m_combo = ComboBox( addChild( new ComboBox()));			m_combo.x = m_fpsMeter.x + m_fpsMeter.width + 6;			m_combo.y = 4;						var allMember = Main.CONF.getMemberArr();			if( ! allMember) {				alertDialog( Main.LANG.getParam( "参加メンバーが登録されていません"));			}  else {				for each( var member:Member in allMember) {										// 講師は除く					if( Main.CONF.isPro( member.uid)) continue;					var item:Object = { label: Main.CONF.getName( member.uid), data: member.uid};					m_combo.addItem( item);				}			}			m_combo.addItem( { label: LayoutComponents.LABEL_NOUSE, data: null}); // 使用しない			m_combo.addEventListener( Event.CHANGE, onChange);						m_volumeMeter = VoiceMeter( addChild( new VoiceMeter( 125, 15)));						m_volumeCtl = VolumeCtl( addChild( new VolumeCtl( 0, 100, true)));			m_volumeCtl.x = 0.5;			m_volumeCtl.addEventListener( Event.CHANGE, changeSoGain);			m_volumeCtl.addEventListener( VolumeCtl.MUTE_OFF, changeSoMicOn);			m_volumeCtl.addEventListener( VolumeCtl.MUTE_ON, changeSoMicOff);						m_btnDetail = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_DETAIL, 9, 0, 2, 3)));			m_btnDetail.setEnabled( true);			m_btnDetail.addEventListener( MouseEvent.CLICK, onClick_detail);		}		override public function unload() { 			super.unload();			m_combo.removeEventListener( Event.CHANGE, onChange);			m_volumeCtl.removeEventListener( Event.CHANGE, changeSoGain);			m_volumeCtl.removeEventListener( VolumeCtl.MUTE_OFF, changeSoMicOn);			m_volumeCtl.removeEventListener( VolumeCtl.MUTE_ON, changeSoMicOff);			m_btnDetail.removeEventListener( MouseEvent.CLICK, onClick_detail);						m_volumeCtl.dispose();		}				public function setVolumeCtlMute( b:Boolean) { m_volumeCtl.setMute( b);}		public function getVolumeCtl():Number { return m_volumeCtl.getVolume();}		public function setVolumeCtl( val:Number) { m_volumeCtl.setVolume( val);}				// この人のm_volumeCtl（ゲイン）変更時		// 講師の場合だけ呼ばれる		function changeSoGain( e:Event) {			var hash:Object = Main.CONF.getMemberDataHash( m_currentUid);			hash.gain = m_volumeCtl.getVolume();			Main.CONF.resetSo_member( m_currentUid, hash);		}				// この人の音声権限変更時		// 講師の場合だけ呼ばれる		function changeSoMicOn( e:Event) {			var hash:Object = Main.CONF.getMemberDataHash( m_currentUid);			hash.mic = 1;			Main.CONF.resetSo_member( m_currentUid, hash);		}				// この人の音声権限変更時		// 講師の場合だけ呼ばれる		function changeSoMicOff( e:Event) {			var hash:Object = Main.CONF.getMemberDataHash( m_currentUid);			hash.mic = 0;			Main.CONF.resetSo_member( m_currentUid, hash);		}				// 詳細ボタンクリック		function onClick_detail( e:MouseEvent) {			dispatchEvent( new MemberEvent( MemberEvent.POPUP_SETTING, m_currentUid));		}				override public function init( uid:String) {			super.init( uid);			for( var i = 0; i < m_combo.length; i++) {				var item = m_combo.getItemAt( i);				if( String( item.data) == uid) {					m_combo.selectedItem = item;					onChange();					break;				}			}			//alertDialog( "init");		}				function onChange( e:Event = null) {				//if( m_currentUid == String( Object( m_combo.selectedItem).data)) return;					// 画像の入れ替え			//m_loader.unload();			m_currentUid = Object( m_combo.selectedItem).data;						//var memberData = Main.CONF.getMemberDataHash( m_currentUid);//			if( memberData != null)  m_loader.load( new URLRequest( memberData.img));						var memberData = Main.CONF.getMemberDataHash( m_currentUid);			if( memberData != null) m_bitmap.bitmapData = Main.CONF.getMemberImgBmpdata( memberData.img);			else m_bitmap.bitmapData = null;			setLoaderSizePosi();						// 映像の切替			if( m_receive_ns != null) {				stopVideo();				startReceive();			}//alertDialog( "onChange:" + m_receive_ns + "/ " + m_currentUid);						// PickupListに知らせ、SO変更へ			dispatchEvent( new Event( COMBO_CHANGED)); 		}								override public function setViewWidth( _w:Number):void {			super.setViewWidth( _w);			// コンボボックスサイズ			m_combo.width = _w - m_combo.x - 5;						var inner_w = _w - 4;						// 講師が受講生のコンテナを表示している状態			m_volumeMeter.x = m_volumeCtl.x + VolumeCtl.W + INNER_PAD;			m_btnDetail.x = inner_w - m_btnDetail.width - INNER_PAD;			m_volumeMeter.width = inner_w - ( VolumeCtl.W + m_btnDetail.width + INNER_PAD * 3);			m_volumeCtl.setViewWidth( inner_w - ( m_btnDetail.width + INNER_PAD * 2));						var footerBaseY = H - 1 - FOOTER_H;			m_volumeCtl.y = footerBaseY;			m_btnDetail.y = footerBaseY + ( FOOTER_H - m_btnDetail.height) / 2;			m_volumeMeter.y = footerBaseY + ( FOOTER_H - m_volumeMeter.height) / 2;		}	}}