package window.video.list.parts {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import fl.controls.CheckBox;	import flash.net.*;	import caurina.transitions.*;	import window.video.VoiceMeter;	// 受講生一覧のメンバー表示コンテナのテキスト表示の見出し	public class TextlistLabel extends Sprite {				private const PAD = TextCon.PAD;		private const LABEL_NAME:String = Main.LANG.getParam( "名前");		private const LABEL_ATTEND:String = Main.LANG.getParam( "挙手・出席状況");		private const LABEL_CAM:String = Main.LANG.getParam( "映像");		private const LABEL_MIC:String = Main.LANG.getParam( "音声");		private const LABEL_WB:String = Main.LANG.getParam( "ホワイトボード");				private var m_nameTxt:TextField;		private var m_attendTxt:TextField;		private var m_camTxt:TextField;		private var m_micTxt:TextField;		private var m_wbTxt:TextField;		public function TextlistLabel() {			m_nameTxt = TextField( addChild( getText( LABEL_NAME)));			m_attendTxt = TextField( addChild( getText( LABEL_ATTEND)));			m_camTxt = TextField( addChild( getText( LABEL_CAM)));			m_micTxt = TextField( addChild( getText( LABEL_MIC)));			m_wbTxt = TextField( addChild( getText( LABEL_WB)));						m_nameTxt.y = ( TextCon.TEXT_CON_H - m_nameTxt.height) / 2;			m_attendTxt.y = m_camTxt.y = m_micTxt.y = m_wbTxt.y = m_nameTxt.y;						setBg( 200); // 幅はとりあえず		}					public function getNameW(){ // テキスト表示関連の関数			return m_nameTxt.width + PAD*2;		}		public function getAttendW(){ // テキスト表示関連の関数			return m_attendTxt.width + PAD*2;		}		public function getCamW(){ // テキスト表示関連の関数			return m_camTxt.width + PAD;		}		public function getMicW(){ // テキスト表示関連の関数			return m_micTxt.width + PAD;		}		public function getWbW(){ // テキスト表示関連の関数			return m_wbTxt.width + PAD;		}		public function setNameW( w){ // テキスト表示関連の関数			m_nameTxt.width = w - PAD*2;			resetTextPosiX();		}		public function setAttendW( w){ // テキスト表示関連の関数			m_attendTxt.width = w - PAD*2;			resetTextPosiX();		}		public function setCamW( w){ // テキスト表示関連の関数			m_camTxt.width = w - PAD;			resetTextPosiX();		}		public function setMicW( w){ // テキスト表示関連の関数			m_micTxt.width = w - PAD;			resetTextPosiX();		}		public function setWbW( w){ // テキスト表示関連の関数			m_wbTxt.width = w - PAD;			resetTextPosiX();		}		// テキスト表示用パーツのX座標位置を再設定		function resetTextPosiX() {			m_nameTxt.x = PAD;			m_attendTxt.x = m_nameTxt.x + m_nameTxt.width + PAD*2.5;			m_camTxt.x = m_attendTxt.x + m_attendTxt.width + PAD*2;			m_micTxt.x = m_camTxt.x + m_camTxt.width + PAD;			m_wbTxt.x = m_micTxt.x + m_micTxt.width + PAD;		}				public function setBg( w:Number) {						graphics.clear();			graphics.beginFill( 0xf0f0f0);			graphics.drawRect( 0, 0, w, TextCon.TEXT_CON_H );			graphics.endFill();			graphics.lineStyle( 1, 0xd9d9d9);			graphics.moveTo( 0, TextCon.TEXT_CON_H );			graphics.lineTo( w, TextCon.TEXT_CON_H );		}				function getText( str:String) : TextField {			var txt = new TextField();			txt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			txt.text = str;			txt.width = txt.textWidth + 4;			txt.height = txt.textHeight + 4;			return txt;		}				function alertDialog( str) {			Main.addErrMsg(  "TextlistLabel:" + String( str));		}	}}