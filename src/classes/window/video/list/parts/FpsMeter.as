package window.video.list.parts {	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.filters.*;	import caurina.transitions.*;	import com.hurlant.crypto.symmetric.NullPad;	// ネットストリームの	public class FpsMeter extends Sprite {				private var m_rate:Number = -9999;		private var m_numerator:Number = -9999;		private var m_denominator:Number = -9999;		private var m_msk;		//private var m_y_rate1;		private var m_y_rate0;		public function FpsMeter() {			var base = addChild( new IconNetwork());			base.filters = [ getBitmapFilter()];						var on = addChild( new IconNetwork());			var onCt:ColorTransform = new ColorTransform();			onCt.color = 0x78d900;			on.transform.colorTransform = onCt;						var rect:Rectangle = on.getRect( this);			m_msk = addChild( new Sprite());			m_msk.graphics.beginFill( 0, 0.5);			m_msk.graphics.drawRect( 0, 0, rect.width, rect.height);			m_msk.graphics.endFill();			m_msk.x = rect.x;			m_y_rate0 = rect.y + m_msk.height;			m_msk.y = m_y_rate0;						on.mask = m_msk;		}				public function setNumerator( num:Number) {			m_numerator = num;			if( m_denominator > 0) {				//var rate = m_numerator / m_denominator;				//if( rate > 1) rate = 1;				m_msk.y = m_y_rate0 - m_msk.height * (( m_numerator / m_denominator) > 1 ? 1 : m_numerator / m_denominator);			}		}		public function setDenominator( num:Number) {			m_denominator = num;			if( m_numerator > 0) {				m_msk.y = m_y_rate0 * m_numerator / m_denominator;			}		}				public function getRate() : Number { // テキスト表示関連の関数			if( m_numerator >= 0 && m_denominator >= 0) {				return m_numerator / m_denominator;			} else {				return -9999;			}		}		function getBitmapFilter():BitmapFilter {            var color:Number = 0x000000;            var alpha:Number = 0.5;            var blurX:Number = 4;            var blurY:Number = 4;            var strength:Number = 1.5;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.LOW;            return new GlowFilter(color,                                  alpha,                                  blurX,                                  blurY,                                  strength,                                  quality,                                  inner,                                  knockout);        }	}}