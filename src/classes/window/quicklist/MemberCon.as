package window.quicklist {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import window.video.*;	import window.video.list.parts.MemberContainer;	import flash.text.*;	import flash.events.*;	import fl.controls.CheckBox;	import flash.net.*;	import caurina.transitions.*;	import flash.utils.Timer;	// 受講生クイック一覧のメンバー表示コンテナ	public class MemberCon extends Sprite {		static public const STATUS_ABSENCE:uint = MemberContainer.STATUS_ABSENCE;		static public const STATUS_ATTEND:uint = MemberContainer.STATUS_ATTEND;		static public const STATUS_HERE:uint = MemberContainer.STATUS_HERE;				static public const H:Number = 26;		private const LINE_COLOR:uint = QuickListContainer.LINE_COLOR;				public var status:uint = STATUS_ABSENCE; // QuickListContainerでのソート用		public var firstAttendTime:Number = Number.MAX_VALUE; // QuickListContainerでのソート用、最新参加時刻のUNIXタイム		public var lastAttendTime:Number = Number.MIN_VALUE; // QuickListContainerでのソート用、最新参加時刻のUNIXタイム		public var lastHereTime:Number = Number.MAX_VALUE; // QuickListContainerでのソート用、最新挙手時刻のUNIXタイム				public var available:Boolean = true;		public var uid:String;				private var m_nc:NetConnection;				private var m_nameTxt:TextField;		private var m_statusIcon:StatusIcon;		private var m_mobileIcon:IconMobile;		private var m_terminalType:String = "";		private var m_micChk:CheckBox;		private var m_volumeMeter:VoiceMeter;		private var m_btnChat:IconBtn;		private var m_blinkingTimer:Timer;				private var m_fmt:TextFormat;		private var m_fmt_hover:TextFormat;				private var m_btmLine:Shape;		private var m_chatLine:Shape;				private var so:SharedObject = null;		private var so_here:SharedObject = null; // 挙手関係（挙手してる人に対して、講師が指名（クリック）したら変更する用）								public function MemberCon( uid:String) {			this.uid = uid;			m_statusIcon = StatusIcon( addChild( new StatusIcon()));			m_statusIcon.x = 10;			m_statusIcon.y = ( H - m_statusIcon.height) / 2;			m_fmt = new TextFormat( Main.CONF.getMainFont(), 11, 0x333333, null, null, false);			m_fmt_hover = new TextFormat( Main.CONF.getMainFont(), 11, 0x000000, null, null, true);			m_nameTxt = TextField( addChild( getText( Main.CONF.getName( uid), m_fmt)));			m_nameTxt.y = ( H - m_nameTxt.height) / 2;			m_nameTxt.selectable = false;			m_nameTxt.defaultTextFormat = m_fmt;			m_mobileIcon = IconMobile( addChild( new IconMobile()));			m_mobileIcon.y = ( H - m_mobileIcon.height) / 2;			m_micChk = CheckBox( addChild( new CheckBox()));			m_micChk.label = "";			m_micChk.textField.width = 0;			m_micChk.setSize( 23, 20);			m_micChk.y = ( H - m_micChk.height) / 2;			m_volumeMeter = VoiceMeter( addChild( new VoiceMeter( 20, 15, 0xd8d8d8, 2)));			m_volumeMeter.y = ( H - m_volumeMeter.height) / 2;			m_btnChat = IconBtn( addChild( new IconBtn( new IconPopup(), new IconPopupOver(), new IconPopupBlink())));			m_btnChat.setEnabled( true);						m_nameTxt.x = m_mobileIcon.x = m_statusIcon.x + m_statusIcon.width;			m_mobileIcon.visible = false;									m_chatLine = Shape( addChild( new Shape()));			m_chatLine.graphics.lineStyle( 1, LINE_COLOR);			m_chatLine.graphics.lineTo( 0, H);			m_btmLine = Shape( addChild( new Shape()));			m_btmLine.graphics.lineStyle( 1, LINE_COLOR);			m_btmLine.graphics.moveTo( 0, H - 0.5);			m_btmLine.graphics.lineTo( 1, H - 0.5);						if(! Main.CONF.isPro( Main.CONF.UID) || Main.CONF.isPro( uid)) {				// 自分が受講生の場合、若しくはこの人が自分（講師）の場合				// チェックボックスは編集不可、詳細ボタンは非表示に。				m_micChk.enabled = false;				m_btnChat.visible = false;				m_chatLine.visible = false;			}						// 講師の場合もSO接続前は編集不可			m_micChk.enabled = false;			m_btnChat.addEventListener( MouseEvent.CLICK, onClick_mada);			m_nameTxt.addEventListener( MouseEvent.CLICK, onClick_mada);						m_nameTxt.addEventListener( MouseEvent.ROLL_OVER, function( e:*) {									   m_nameTxt.defaultTextFormat = m_fmt_hover;									   m_nameTxt.text = m_nameTxt.text;									   });			m_nameTxt.addEventListener( MouseEvent.ROLL_OUT, function( e:*) {									   m_nameTxt.defaultTextFormat = m_fmt;									   m_nameTxt.text = m_nameTxt.text;									   });						absence(); // とりあえず欠席						// 講師がステータスアイコンのハイをクリックすると音声ON			if( Main.CONF.isPro( Main.CONF.UID)) {				m_statusIcon.addEventListener( MouseEvent.CLICK, onHereClick);			}						//----------------------------			// chatポップアップボタンをチカチカさせる			//----------------------------			m_blinkingTimer = new Timer( 2500);			m_blinkingTimer.addEventListener( TimerEvent.TIMER, onTimer);		}				public function setTerminalStatus( terminalType:String) {			m_terminalType = terminalType;			setTerminalIcon();						var w:Number = m_btmLine.getBounds( this).width;			if( Main.CONF.isPro( Main.CONF.UID)) {				m_nameTxt.width = w - m_nameTxt.x - ( m_micChk.width + m_volumeMeter.width + 5 + m_btnChat.width) - 2;			} else {				m_nameTxt.width = w - m_nameTxt.x - ( m_micChk.width + m_volumeMeter.width + 5) - 2;			}		}				public function startBlinkChatBtn() {			m_blinkingTimer.start();		}		public function stopBlinkChatBtn() {			m_blinkingTimer.stop();		}		function onTimer( e:TimerEvent) {			m_btnChat.blink();		}				function onHereClick( e:MouseEvent) {			if( status != STATUS_HERE) return; // 挙手中でなければリターン			if ( so_here==null) {				alertDialog( Main.LANG.getParam( "通信エラーにより、指名を他の参加者と共有できませんでした"));				return;			}						so_here.setProperty( "named_uid", uid); // 指名						// 音声ON			var hash:Object = Main.CONF.getMemberDataHash( uid);			if( hash.mic != 1) {				hash.mic = 1;				Main.CONF.resetSo_member( uid, hash);			}		}				// 挙手状況の変更。Main:onSyncHere()からLiveStatusManager、QuickListContainer経由で呼ばれる		public function changeHereStatus( hereFlag:Boolean, nowTime:Number) {			if( hereFlag) {				here( nowTime);			} else {				hereOff();			}		}				// 参加不参加状況の変更。Main:onSyncJoin()からLiveStatusManager、QuickListContainer経由で呼ばれる		public function changeJoinStatus( joinFlag:Boolean, nowTime:Number) {			// 挙手中、ということはありえないはず、？						if( joinFlag) {				attend( nowTime);			} else {				absence();			}		}				// ハイ		function here( nowTime:Number) {			status = STATUS_HERE;			m_statusIcon.here();			lastHereTime = nowTime;		}		// 挙手取りやめ		function hereOff() {			status = STATUS_ATTEND;			m_statusIcon.attend();		}		// 欠席		function absence() {			status = STATUS_ABSENCE;			m_statusIcon.absence();		}		// 出席		function attend( nowTime:Number) {			status = STATUS_ATTEND;			m_statusIcon.attend();			lastAttendTime = nowTime;		}				public function initSo( nc:NetConnection, so_here:SharedObject) : void {			// このメンバーのSOの変更を音声や映像のチェックボックスに反映させる						m_nc = nc;			// この人の動画配信設定の変更を監視する			if( so == null) {				so = Main.CONF.getSo( uid);				if( so != null) {					if( Main.CONF.isPro( Main.CONF.UID) && ! Main.CONF.isPro( uid)) {						// 最初の一回でいいんだけど…						m_micChk.enabled = true;						m_micChk.addEventListener( Event.CHANGE, onChangeMic);						m_btnChat.removeEventListener( MouseEvent.CLICK, onClick_mada);						m_btnChat.addEventListener( MouseEvent.CLICK, onClick_chat);												m_nameTxt.removeEventListener( MouseEvent.CLICK, onClick_mada);						m_nameTxt.addEventListener( MouseEvent.CLICK, onClick_detail);					}										so.addEventListener( SyncEvent.SYNC, function( e:SyncEvent):void {						if( so.data.hash != undefined) {							Main.CONF.apply_member( uid, so.data.hash); // CONFを更新							m_micChk.selected = so.data.hash.mic == 1 ? true : false;						}					});				} else {					alertDialog( Main.LANG.getReplacedSentence( "通信エラーにより、%sさんの動画配信設定のSharedObjectを取得できませんでした", Main.CONF.getName( uid)));				}			}						// 挙手関係の共有オブジェクト			this.so_here = so_here;					}		public function setVolume( volume:Number) {			m_volumeMeter.setLevel( volume);		}				// 詳細ボタンクリック（SO接続前）		function onClick_mada( e:MouseEvent) {			alertDialog( Main.LANG.getReplacedSentence( "通信エラーにより、%sさんの動画配信設定のSharedObjectを取得できませんでした", Main.CONF.getName( uid)));		}		// 詳細ボタンクリック		function onClick_detail( e:MouseEvent) {			dispatchEvent( new MemberEvent( MemberEvent.POPUP_SETTING, uid));		}		// チャットポップアップボタンクリック		function onClick_chat( e:MouseEvent) {			dispatchEvent( new MemberEvent( MemberEvent.POPUP_SETTING_CHAT, uid));		}				public function changeMic( newSelected:Boolean) {			m_micChk.selected = newSelected;			onChangeMic( null);		}			// マイクチェックボックス変更		// 講師の場合だけ呼ばれる		function onChangeMic( e:Event) {			var hash:Object = Main.CONF.getMemberDataHash( uid);			if( m_micChk.selected && hash.mic != 1) {				hash.mic = 1;				Main.CONF.resetSo_member( uid, hash);			} else if( ! m_micChk.selected && hash.mic == 1) {				hash.mic = 0;				Main.CONF.resetSo_member( uid, hash);			}		}				function getText( str:String, fmt:TextFormat) : TextField {			var txt = new TextField();			txt.defaultTextFormat = fmt;			txt.text = str;			txt.width = txt.textWidth + 4;			txt.height = txt.textHeight + 4;			return txt;		}								public function setViewWidth( w:Number):void {			setTerminalIcon();						if( Main.CONF.isPro( Main.CONF.UID)) {				m_micChk.x = w - ( m_btnChat.width + m_volumeMeter.width + 5 + m_micChk.width);				m_volumeMeter.x =  w - ( m_btnChat.width + m_volumeMeter.width + 5);				m_btnChat.x = m_volumeMeter.x + m_volumeMeter.width + 5;				m_chatLine.x = m_btnChat.x;				m_nameTxt.width = w - m_nameTxt.x - ( m_micChk.width + m_volumeMeter.width + 5 + m_btnChat.width) - 2;							} else {				m_micChk.x = w - m_micChk.width;				m_nameTxt.width = w - m_nameTxt.x - ( m_micChk.width + m_volumeMeter.width + 5) - 2;			}						m_btmLine.graphics.clear();			m_btmLine.graphics.lineStyle( 1, LINE_COLOR);			m_btmLine.graphics.moveTo( 0, H);			m_btmLine.graphics.lineTo( w, H);		}				function setTerminalIcon() {			switch( m_terminalType) {				case Main.TERMINAL_PC:					m_mobileIcon.visible = false;					m_nameTxt.x = m_statusIcon.x + m_statusIcon.width;					break;				case Main.TERMINAL_ANDROID:					m_mobileIcon.visible = true;					m_nameTxt.x = m_mobileIcon.x + m_mobileIcon.width + 3;					break;				default:break;			}		}				function alertDialog( str:String) {			Main.addErrMsg("MemberCon:" + str);		}	}}