package window.systemlog {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	// システムログ	public class SystemLogCon extends ResizableContainer {		private const INIT_Y = 10;		private const PAD = 8;		private var m_container:Sprite;		private var m_containerMask:Sprite;		private var m_scroll:SimpleScrollBar = null;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				private var m_text:TextField;		private var SCROLL_PAD_BOTTOM = 15;		//private var m_secretBtn:Sprite;				public function SystemLogCon()		{			super( 100, 100, 100, 100); // min_w は後で設定し直すのでとりあえずゼロ			// 表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.y = INIT_Y;						// 表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, 1);			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// ログテキスト			m_text = new TextField();			m_text.wordWrap = true;			m_text.multiline = true;			m_text.condenseWhite = true;			m_text.defaultTextFormat = new TextFormat( "_ゴシック", 11);			m_text.width = 100;			m_container.addChild( m_text);			m_text.x = m_text.y = PAD;						/*// ひみつのぼたん			m_secretBtn = Sprite( addChild( new Sprite()));			m_secretBtn.graphics.beginFill( 0x000000, Main.DEBUG_ALERT ? 1 : 0);			m_secretBtn.graphics.drawRect( 0, 50, 5, 5);			m_secretBtn.graphics.endFill();			m_secretBtn.buttonMode = true;			m_secretBtn.addEventListener( MouseEvent.CLICK, function( e:Event){ Main.DEBUG_SO_WATCH = true;});*/									// チャットテキストのCSS			var style:StyleSheet = new StyleSheet();						// class無し（ログや名前、時間）            var p:Object = new Object();			p.fontSize = 11;			p.color = "#333333";			p.leading = 3;			p.marginTop = 11;			p.marginLeft = 10;			// ブートログ            var p_boot:Object = new Object();            p_boot.color = "#777777";						// 赤ログ            var p_red:Object = new Object();            p_red.color = "#cc0000";						// 青ログ            var p_blue:Object = new Object();            p_blue.color = "#0000cc";						// 時刻            var span_time:Object = new Object();            span_time.color = "#666666";						style.setStyle("p", p);            style.setStyle(".boot", p_boot);			style.setStyle(".red", p_red);			style.setStyle(".blue", p_blue);            style.setStyle("span", span_time);					m_text.styleSheet = style;						addEventListener( Event.ADDED, initScroll);			addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					// スクロールバーを一番上の状態に。					m_container.y = INIT_Y;					if( m_scroll) m_scroll.setBarYMin();									});		}		function initScroll( e:Event) {			removeEventListener( Event.ADDED, initScroll);						// 表示コンテナのスクロールバー			if( m_scroll == null) {								m_scroll = addChild( new SimpleScrollBar()) as SimpleScrollBar;				m_scroll.y = INIT_Y;				m_scroll.setSize( m_scroll.width, 200);								m_scroll.setScrollTarget( m_container);				m_scroll.scrollMask = m_containerMask;			}		}		// Mainから呼ばれる		public function addBootLog( normalText:String) {			m_text.htmlText = "<p class='boot'>" + normalText + "</p>" + m_text.htmlText;			m_text.height = m_text.textHeight + 8;						//m_preH--;			//alertDialog( m_text.htmlText);			// スクロールバーを一番上の状態に。			if( m_scroll) {				m_container.y = INIT_Y;				m_scroll.setBarYMin();				m_scroll.update();			}		}		//Mainから呼ばれる		public function addRedLog( normalText:String) {						var now:Date = new Date();			var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());			var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());			var htmlLogText:String = "<p class='red'><span>" + hour + ":" + min + "</span> " + normalText + "</p>";						m_text.htmlText = htmlLogText + m_text.htmlText;			m_text.height = m_text.textHeight + 8;						// スクロールバーを一番上の状態に。			if( m_scroll) {				m_container.y = INIT_Y;				m_scroll.setBarYMin();				m_scroll.update();			}		}				//Mainから呼ばれる		public function addBlueLog( normalText:String) {			var now:Date = new Date();			var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());			var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());			var htmlLogText:String = "<p class='blue'><span>" + hour + ":" + min + "</span> " + normalText + "</p>";						m_text.htmlText = htmlLogText + m_text.htmlText;			m_text.height = m_text.textHeight + 8;						// スクロールバーを一番上の状態に。			if( m_scroll) {				m_container.y = INIT_Y;				m_scroll.setBarYMin();				m_scroll.update();			}		}				//Mainから呼ばれる		public function addLog( normalText:String) {						var now:Date = new Date();			var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());			var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());			var htmlLogText:String = "<p><span>" + hour + ":" + min + "</span> " + normalText + "</p>";						m_text.htmlText = htmlLogText + m_text.htmlText;			m_text.height = m_text.textHeight + 8;						// スクロールバーを一番上の状態に。			if( m_scroll) {				m_container.y = INIT_Y;				m_scroll.setBarYMin();				m_scroll.update();			}		}				override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						if( m_scroll) m_containerMask.width = w - m_scroll.width;			if( m_scroll) m_scroll.x = w - m_scroll.width;								m_text.width = w - PAD * 2 - m_scroll.width;						m_text.height = m_text.textHeight + 8;						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW && m_scroll) {				m_preW = w;				m_scroll.update();			}					}				override public function setViewHeight( h:Number):void {			if( h < MIN_H) h = MIN_H;			super.setViewHeight( h);			m_containerMask.height = h - INIT_Y - PAD * 2;						//m_inputText.y = h - INPUT_H;			//m_line.y = m_inputText.y - PAD;			//m_inputBtn.y = m_inputText.y + ( m_inputText.height - m_inputBtn.height) / 2;						m_text.height = m_text.textHeight + 8;						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( h != m_preH  && m_scroll) {				m_preH = h;				m_scroll.setSize( m_scroll.width, h - INIT_Y - SCROLL_PAD_BOTTOM);				m_scroll.update();			}		}	}}