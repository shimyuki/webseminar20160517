package window.header {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	import common.AlertManager;	import flash.events.MouseEvent;	import flash.utils.Timer;	import flash.events.TimerEvent;	import partition.Layout;	import flash.external.ExternalInterface;		// ヘッダー	public class HeaderContents extends ResizableContainer {				static public const MODE_CHANGE = "MODE_CHANGE";		static public const RESET_LAYOUT = "RESET_LAYOUT";		static public const POPUP_CLICKED:String = "POPUP_CLICKED";		static public const BASE_COLOR_01:uint = 0xfafafa;		static public const BASE_COLOR_02:uint = 0xd5d5d5;		protected const PAD = 10;		protected var CLOCK_BAR_W = 60;//100; // 時計の幅		protected var m_classTitle:TextField;		protected var m_rightContainer:Sprite;		protected var m_clock:Clock;		protected var m_clockAid:ClockAid;		protected var m_btnReconnect:IconPartsBtn_rect;		private var INIT_X_INFO:Number;				private var m_infoDialog:InfoDialog;				private var m_blinkingBtnArr:Array;		private var m_blinkingTimer:Timer;				private var m_systemLogBtn:SystemLogBtn;				public function HeaderContents( w:Number, h:Number) {						super( w, h, w, h);						m_rightContainer = Sprite( addChild( new Sprite()));						//----------------------------			// システムログボタン			//----------------------------			m_systemLogBtn = SystemLogBtn( addChild( new SystemLogBtn( 10)));			m_systemLogBtn.x = 10 + PAD;			m_systemLogBtn.addEventListener( MouseEvent.CLICK, function( e:*) { dispatchEvent( new HeaderEvent( POPUP_CLICKED, Layout.WINNAME_SYSTEMLOG));});						//----------------------------			// 講座名			//----------------------------			m_classTitle = TextField( addChild( new TextField()));			m_classTitle.autoSize = TextFieldAutoSize.LEFT;			m_classTitle.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 18, 0x000000);			m_classTitle.text = Main.CONF.getParam( 'CLASS_TITLE')?Main.CONF.getParam( 'CLASS_TITLE'):"";			//m_classTitle.appendText( " " + Main.CONF.getName( Main.CONF.getProId()));			m_classTitle.x = m_systemLogBtn.x + m_systemLogBtn.width / 2 + 4;			m_classTitle.y = PAD;			m_systemLogBtn.y = m_classTitle.y + m_classTitle.height / 2;			if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", m_classTitle.text);						//----------------------------			// 時計			//----------------------------			m_clock = Clock( addChild( new Clock( Main.CONF.getParam( "START_TIME"), Main.CONF.getParam( "END_TIME"), CLOCK_BAR_W)));			m_clock.y = 8;			m_clock.addEventListener( Clock.LAST_5_MIN, clockAlert);			m_clock.addEventListener( Clock.LAST_10_MIN, clockAlert);									m_clockAid = ClockAid( addChild( new ClockAid()));			m_clockAid.y = m_clock.y;						//----------------------------			// お知らせ			//----------------------------			m_infoDialog = new InfoDialog( h / 2);			m_infoDialog.x = INIT_X_INFO = w;			m_infoDialog.y = ( h - ( h / 2)) / 2;			m_infoDialog.addEventListener( MouseEvent.CLICK, hideInfo);			m_infoDialog.addEventListener( InfoDialog.ON_TIMER, hideInfo);						//----------------------------			// チカチカさせる			//----------------------------			m_blinkingTimer = new Timer( 2500);			m_blinkingTimer.addEventListener( TimerEvent.TIMER, onTimer);						// チカチカさせるボタンを格納する用配列			m_blinkingBtnArr = new Array();						//----------------------------			// 再接続ボタン			//----------------------------			m_btnReconnect = IconPartsBtn_rect( addChild( new IconPartsBtn_rect( new IconReload(), Main.HEADER_H, Main.HEADER_H)));			m_btnReconnect.y = 10;			m_btnReconnect.addEventListener( MouseEvent.CLICK, function( e:*){ dispatchEvent( new Event( "reconnect"))});			setViewWidth( w);		}				public function changeSystemLogBtnColor( color:uint) { m_systemLogBtn.changeColor( color);}		// ChatContainerのonSync、ReceiveContainerのonSync、HeaderContentsStudentのso_webBtn変更感知時から呼ばれる		public function startBlink( btnName:String) {			// btnNameに該当するボタンがある場合は、そのボタンの点滅を開始する						// ただし既にポップアップされている場合はキャンセル			if( Main.POPUP_CONTAINER.isPopuped( btnName)) return;			for( var i = 0; i < numChildren; i++) {				var btn:DynamicTextBtn = getChildAt( i) as DynamicTextBtn;				if( btn != null && btn.name == btnName) {					m_blinkingBtnArr.push( btn);					break;				}			}			m_blinkingTimer.start();		}				// MainのonPopup、HeaderContentsStudentのm_webBtnクリック時から呼ばれる		public function stopBlink( btnName:String) {			for( var i = 0; i < m_blinkingBtnArr.length; i++) {				var btn:DynamicTextBtn = m_blinkingBtnArr[i] as DynamicTextBtn;				if( btn.name == btnName) {					m_blinkingBtnArr.splice( i);					break;				}			}			if( m_blinkingBtnArr.length == 0) {				m_blinkingTimer.stop();			}		}		function onTimer( e:TimerEvent) {			for( var i = 0; i < m_blinkingBtnArr.length; i++) {				var btn:DynamicTextBtn = m_blinkingBtnArr[i] as DynamicTextBtn;				btn.blink();			}		}				function clockAlert( e:Event) {			//showInfo( e.type, InfoDialog.CLOCK_SOUND);			m_infoDialog.startSound( InfoDialog.CLOCK_SOUND);			switch( e.type) {				case Clock.LAST_5_MIN: m_clockAid.show( ClockAid.LAST_5_MIN); break;				case Clock.LAST_10_MIN: m_clockAid.show( ClockAid.LAST_10_MIN); break;				default: break;			}		}				public function showInfo( str:String, soundType:uint = 0) {			if( Main.CONF.UID == Main.CONF.getWhiteboardUID()) return;			if( Main.CONF.UID == Main.CONF.getViewUID()) return;						if( str == "") return;						Tweener.removeTweens( m_infoDialog);			addChild( m_infoDialog);			m_infoDialog.setInfo( str, soundType);			var tx = INIT_X_INFO - ( m_infoDialog.getViewWidth() + 10);			Tweener.addTween( m_infoDialog, { x: tx, transition:"liner", time:0.5, onComplete:onComplete_showInfo});		}		function hideInfo( e:Event) {			Tweener.removeTweens( m_infoDialog);			Tweener.addTween( m_infoDialog, { x: INIT_X_INFO, transition:"liner", time:0.5, onComplete:onComplete_hideInfo});		}		function onComplete_showInfo() {			if( ! contains( m_infoDialog)) addChild( m_infoDialog); // ないと思うけど		}		function onComplete_hideInfo() {			if( contains( m_infoDialog)) removeChild( m_infoDialog);		}				public function initSo( nc:NetConnection, so_here:SharedObject) {		}		override public function setEnabled( b:Boolean):void {			m_btnReconnect.setEnabled( b);		}		override public function setViewWidth( w:Number, debug:String = ""):void {			//super.setViewWidth( w);			if( w < MIN_W) m_rightContainer.x = 0;			else m_rightContainer.x = w - MIN_W;						var matrix:Matrix = new Matrix();			matrix.createGradientBox( w, Main.HEADER_H, - Math.PI / 2);			m_base.graphics.clear();			m_base.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_02, BASE_COLOR_01],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_base.graphics.drawRect( 0, 0, w, Main.HEADER_H);			m_base.graphics.endFill();						INIT_X_INFO = w;		}		override public function setViewHeight( h:Number):void {			//super.setViewHeight( h);		}	}}