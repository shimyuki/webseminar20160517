package window.header {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import window.video.*;	import partition.*;	import flash.text.*;	import common.AlertManager;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.*;	import flash.events.SyncEvent;	import flash.external.ExternalInterface;		// ヘッダー	public class HeaderContentsStudent extends HeaderContents {				private const LABEL_HERE_OFF:String = Main.LANG.getParam( "挙手取りやめ");		private const LABEL_RESET:String = Main.LANG.getParam( "画面レイアウトをリセット");		private const LABEL_BTN_SHARE_WEB = Main.LANG.getParam( "ウェブページ共有");		private const PAD_BTN = 0;		private var m_btnArr:Array;				//private var m_btnHere:HereBtn;		//private var m_btnHereOff:DynamicTextBtn;				//private var so_here:SharedObject = null; // 挙手関係		//private var so_webBtn:SharedObject = null; // ウェブページ共有ボタンが講師によってクリックされた時刻				public function HeaderContentsStudent( w:Number, h:Number) {			//CLOCK_BAR_W = 50;						super( w, h);			//m_classTitle.appendText( " 受講生用画面");			if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", m_classTitle.text);						m_btnArr = new Array();									//----------------------------			// 上の段のボタン、右端から			//----------------------------			//var posi_x:Number = w;			var posi_x:Number = w;						m_rightContainer.addChild( m_btnReconnect);			posi_x -= m_btnReconnect.width;			m_btnReconnect.x = posi_x;			m_btnReconnect.y = 0;						/*			// 挙手ボタン			m_btnHere = new HereBtn( 100, 28);			posi_x -= ( PAD_BTN * 2 + m_btnHere.width);			m_btnHere.x = posi_x;			m_btnHere.y = PAD;			m_rightContainer.addChild( m_btnHere);			m_btnArr.push( m_btnHere);			m_btnHere.addEventListener( MouseEvent.CLICK, onBtnHereClicked);						// 挙手取りやめボタン			m_btnHereOff = new DynamicTextBtn( LABEL_HERE_OFF);			posi_x -= ( PAD_BTN + m_btnHereOff.width);			m_btnHereOff.x = posi_x;			m_btnHereOff.y = PAD;			m_rightContainer.addChild( m_btnHereOff);			m_btnArr.push( m_btnHereOff);			m_btnHereOff.addEventListener( MouseEvent.CLICK, onBtnHereOffClicked);			m_btnHereOff.visible = false;*/			// 画面レイアウトをリセット			var resetBtn:DynamicTextBtn_rect = new DynamicTextBtn_rect( LABEL_RESET);			posi_x -= ( PAD_BTN + resetBtn.width);			resetBtn.x = posi_x;			resetBtn.y = 0;			m_btnArr.push( resetBtn);			m_rightContainer.addChild( resetBtn);			resetBtn.addEventListener(MouseEvent.CLICK,									  function ( e:*) { dispatchEvent(new Event( RESET_LAYOUT));});								// 受信ファイルボタン			var rcvBtn:DynamicTextBtn_rect = new DynamicTextBtn_rect( Layout.WINNAME_RECEIVE);			posi_x -= ( rcvBtn.width + PAD_BTN);			rcvBtn.x = posi_x;			rcvBtn.y = 0;			m_btnArr.push( rcvBtn);			m_rightContainer.addChild( rcvBtn);			rcvBtn.addEventListener( MouseEvent.CLICK, function( e:*) { dispatchEvent( new HeaderEvent( POPUP_CLICKED, Layout.WINNAME_RECEIVE));});						// アンケートボタン			var qBtn:DynamicTextBtn_rect = new DynamicTextBtn_rect( Layout.WINNAME_Q);			posi_x -= ( qBtn.width + PAD_BTN);			qBtn.x = posi_x;			qBtn.y = 0;			m_btnArr.push( qBtn);			m_rightContainer.addChild( qBtn);			qBtn.addEventListener( MouseEvent.CLICK, function( e:*) { dispatchEvent( new HeaderEvent( POPUP_CLICKED, Layout.WINNAME_Q));});						/*			// ファイル送信ボタン			var sendBtn:DynamicTextBtn = new DynamicTextBtn( Layout.WINNAME_SEND);			sendBtn.x = posi_x;			sendBtn.y = qBtn.y;			posi_x += sendBtn.width + PAD_BTN;			m_btnArr.push( sendBtn);			sendBtn.addEventListener( MouseEvent.CLICK, function( e:*) { dispatchEvent( new HeaderEvent( POPUP_CLICKED, Layout.WINNAME_SEND));});			*/			/*			// 個別チャット			var chatBtn:DynamicTextBtn = new DynamicTextBtn( Layout.WINNAME_CHAT_STU);			chatBtn.x = posi_x;			chatBtn.y = qBtn.y;			posi_x += chatBtn.width + PAD_BTN;			m_btnArr.push( chatBtn);			chatBtn.addEventListener( MouseEvent.CLICK, function( e:*) { dispatchEvent( new HeaderEvent( POPUP_CLICKED, Layout.WINNAME_CHAT_STU));});						// ウェブページ共有ボタン			var webBtn:DynamicTextBtn = new DynamicTextBtn( LABEL_BTN_SHARE_WEB);			if( Main.CONF.getParam('WEBPAGE_BUTTON') != '0') {				webBtn.x = posi_x;				webBtn.y = qBtn.y;				posi_x += webBtn.width + PAD_BTN;				m_btnArr.push( webBtn);				webBtn.addEventListener( MouseEvent.CLICK, function( e:*) {					var url:String = '/live/teach_on_page?guid='+Main.CONF.CLASS_ID+'&uid='+Main.CONF.UID;					navigateToURL( new URLRequest( url), '_blank');					stopBlink( LABEL_BTN_SHARE_WEB);				});			} else {				webBtn.visible = false;			}*/			// ボタン配置			for each( var btn in m_btnArr) {				if( ! m_rightContainer.contains( btn)) addChild( btn);			}						// 時計			m_rightContainer.addChild( m_clock);			m_rightContainer.addChild( m_clockAid);			posi_x -= ( CLOCK_BAR_W + 30);			m_clock.x = posi_x;			posi_x -= ( m_clockAid.width + 25);			m_clockAid.x = posi_x;						/*			// 自分自身の映像／音声コントロール			videoCtl.init( rcvBtn.height);			videoCtl.x = posi_x + 10;			videoCtl.y = rcvBtn.y;			addChild( videoCtl);			*/			//m_clock.y = 30;			//m_btnReconnect.y = m_clock.y;			//m_clockAid.y = m_clock.y;//m_btnReconnect.visible = false;		}				/*		// 挙手ボタンクリック		// SO変更するだけ		function onBtnHereClicked( e:MouseEvent) {			if( m_btnHere.isOn()) return; // 挙手中						if( so_here == null) {				AlertManager.createAlert( this , Main.LANG.getParam( "通信エラー"));				return;			}			var hereFlag = so_here.data.hereFlag == undefined ? new Object() : so_here.data.hereFlag;			hereFlag[ Main.CONF.UID] = true;			so_here.data.hereFlag = hereFlag;			so_here.setDirty( "hereFlag");		}				// SO変更を受けて、ListStatusManagerから呼ばれる		public function hereOn() {			m_btnHere.on();			m_btnHereOff.visible = true;		}				// 挙手取りやめボタンクリック		// SO変更するだけ		function onBtnHereOffClicked( e:MouseEvent) {			if( so_here == null) {				AlertManager.createAlert( this , Main.LANG.getParam( "通信エラー"));				return;			}			var hereFlag = so_here.data.hereFlag == undefined ? new Object() : so_here.data.hereFlag;			hereFlag[ Main.CONF.UID] = false;			so_here.data.hereFlag = hereFlag;			so_here.setDirty( "hereFlag");		}		// SO変更を受けて、ListStatusManagerから呼ばれる		public function hereOff() {			m_btnHere.off();			m_btnHereOff.visible = false;		}				override public function initSo( nc:NetConnection, so_here:SharedObject) {			// 挙手関係の共有オブジェクト			this.so_here = so_here;						// ウェブページ共有ボタンの共有オブジェクト			if( so_webBtn == null) so_webBtn = SharedObject.getRemote( Main.CONF.CLASS_ID + "so_webBtn", nc.uri, false);			so_webBtn.addEventListener( SyncEvent.SYNC, onSyncWebBtn);			so_webBtn.connect( nc);					}						function onSyncWebBtn( e:SyncEvent) {		   for each( var obj in e.changeList) {			   if( obj.name == "lastClickTime" && obj.code=="change") {				   var dateObj:Date = new Date();				   if( so_webBtn.data.lastClickTime == 0) {					   stopBlink( LABEL_BTN_SHARE_WEB);				   }				   if( dateObj.getTime() - so_webBtn.data.lastClickTime < 5 * 3600 * 1000) { // 講師がクリックしてから5分以内					   showInfo( Main.LANG.getParam( "ウェブページ共有ボタンをクリックしてください"));					   startBlink( LABEL_BTN_SHARE_WEB);				   }			   }		   }	   }	*/		override public function setEnabled( b:Boolean):void {			super.setEnabled( b);			for each( var btn in m_btnArr) {				btn.setEnabled( b);			}		}		override public function setViewWidth( w:Number, debug:String = ""):void {			super.setViewWidth( w);						if( w < MIN_W) m_rightContainer.x = 0;			else m_rightContainer.x = w - MIN_W;		}		override public function setViewHeight( h:Number):void {			super.setViewHeight( h);		}							}}