package window.header {	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;	import common.*;	import caurina.transitions.*;	import flash.utils.Timer;	import flash.net.*;		public class RecBtnAuto extends RecBtn {		public function RecBtnAuto() {			super();		}		public function initAsAuto( h:Number) {						// テキスト			//OFF			var offTxt:TextField = new TextField();			offTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			offTxt.autoSize = TextFieldAutoSize.LEFT;			offTxt.text = Main.LANG.getParam( "録画停止中");			offTxt.selectable = offTxt.mouseEnabled = false;			//WAITING			var waitingTxt:TextField = new TextField();			waitingTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			waitingTxt.autoSize = TextFieldAutoSize.LEFT;			waitingTxt.text = Main.LANG.getParam( "録画準備中");			waitingTxt.selectable = waitingTxt.mouseEnabled = false;			//ON			var onTxt:TextField = new TextField();			onTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			onTxt.autoSize = TextFieldAutoSize.LEFT;			onTxt.text = Main.LANG.getParam( "録画中...");			onTxt.selectable = onTxt.mouseEnabled = false;									var text_width:Number = offTxt.width > waitingTxt.width ? offTxt.width : waitingTxt.width;			text_width = text_width > onTxt.width ? text_width : onTxt.width;			var w:Number = text_width + IconRec.W + 15;						var matrix:Matrix = new Matrix();			matrix.createGradientBox( w, h, - Math.PI / 2);									// OFFベース			m_off = Sprite( addChild( new Sprite()));			m_off.visible = false;			m_off.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_02, BASE_COLOR_01],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_off.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_off.graphics.endFill();						// OFFの録画アイコン			var iconRec_off = m_off.addChild( new IconRec( IconRec.OFF));			iconRec_off.x = 6 + IconRec.W / 2;			iconRec_off.y = h / 2;			//iconRec_off.alpha = 0.4;						m_off.addChild( offTxt);			offTxt.x = iconRec_off.x + 8;			offTxt.y = ( h - offTxt.height) / 2;									// WATINGベース			m_waiting = Sprite( addChild( new Sprite()));			m_waiting.visible = false;			m_waiting.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_01, BASE_COLOR_02],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_waiting.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_waiting.graphics.endFill();			m_waiting.visible = false;						// WATINGの録画アイコン			var iconRec_wating = m_waiting.addChild( new IconRec( IconRec.WAITING));			iconRec_wating.x = 6 + IconRec.W / 2;			iconRec_wating.y = h / 2;					m_waiting.addChild( waitingTxt)			waitingTxt.x = iconRec_wating.x + 8;			waitingTxt.y = ( h - waitingTxt.height) / 2;									// ONベース			m_on = Sprite( addChild( getOnBase( w, h, matrix)));			m_on.visible = false;						// ONの録画アイコン			var iconRec_on = m_on.addChild( new IconRec( IconRec.ON));			iconRec_on.x = 6 + IconRec.W / 2;			iconRec_on.y = h / 2;								m_on.addChild( onTxt);			onTxt.x = iconRec_on.x + 8;			onTxt.y = ( h - onTxt.height) / 2;					}						// REC_STATUS:2 自動録画（REC_STATUS_URLの返り値によって録画停止中／録画準備中／録画中を切り替える。ボタン操作不可）		public function startWatchStatus() {			if( Main.CONF.getParam( 'REC_STATUS_URL') == LoadConf.NOTFOUND) {				Main.addErrMsg( "REC_STATUS_URL is not found in getparam");				Main.addPermanentLog( "全体録画ERROR：REC_STATUS_URL is not found in getparam", Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);				return;			}						var timer:Timer = new Timer( 10000);			timer.addEventListener( TimerEvent.TIMER, onTimer);			timer.start();			onTimer();		}		function onTimer( e:TimerEvent = null) {			var dateObj:Date = new Date();			//var cacheClear = "?dummy=" + dateObj.getMonth() + dateObj.getDate() + dateObj.getHours() + dateObj.getMinutes() + dateObj.getSeconds(); // 一秒ごとにキャッシュクリア			var cacheClear = "";			var req:URLRequest = new URLRequest( Main.CONF.getParam( 'REC_STATUS_URL') + cacheClear);						req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.class_id = Main.CONF.CLASS_ID;			req.data = variables;						var loader:URLLoader = new URLLoader();						loader.addEventListener( Event.COMPLETE, onLoadStatus);			loader.addEventListener( IOErrorEvent.IO_ERROR, onIoError);			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			loader.load( req);					}		function onLoadStatus( e:Event) {			var loader:URLLoader = URLLoader( e.target);			//Main.addPermanentLog( "全体録画：自動録画 " + loader.data, Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);			switch( String( loader.data)) {				case "stop":					m_off.visible = true;					m_waiting.visible = false;					m_on.visible = false;					break;				case "preparing":					m_off.visible = false;					m_waiting.visible = true;					m_on.visible = false;					break;				case "recording":					m_off.visible = false;					m_waiting.visible = false;					m_on.visible = true;					break;				default:					m_off.visible = false;					m_waiting.visible = true;					m_on.visible = false;					Main.addErrMsg( "["+String( loader.data) + "] is unexpected return value from " + Main.CONF.getParam( 'REC_STATUS_URL'));					Main.addPermanentLog( "全体録画：["+String( loader.data) + "] is unexpected return value from " + Main.CONF.getParam( 'REC_STATUS_URL'), Main.CONF.SO_PERMANENT_LOG_KEY__RECORD);					break;			}			loader.removeEventListener( Event.COMPLETE, onLoadStatus);			loader.removeEventListener( IOErrorEvent.IO_ERROR, onIoError);			loader.removeEventListener( SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			loader.close();			loader = null;		}		function onIoError( e:Event) {			Main.addErrMsg( "IO_ERROR" + Main.CONF.getParam( 'REC_STATUS_URL'));		}		function onSecurityError( e:Event) {			Main.addErrMsg( "SECURITY_ERROR" + Main.CONF.getParam( 'REC_STATUS_URL'));		}				/*override public function wait() {		}		override public function on() {		}		override public function off() {		}*/		override public function setEnabled( b:Boolean):void {					}	}}