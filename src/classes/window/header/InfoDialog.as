package window.header {	import flash.display.*;	import flash.events.*;	import flash.utils.*;	import flash.text.*;	import flash.filters.*;	import flash.display.Shape;	import flash.text.TextField;	import flash.media.SoundTransform;	public class InfoDialog extends Sprite {				static public const ON_TIMER:String = "InfoDialog ON_TIMER";		static public const DEFAULT_SOUND:uint = 0; // デフォルト		static public const CLOCK_SOUND:uint = 1; // 5分前。10分前のアラート音タイプ		static public const HERE_SOUND:uint = 2; // 5分前。10分前のアラート音タイプ		private const PAD:Number = 10;		private var H:Number;		private var m_timer:Timer;		//private var m_infoArr:Array;		private var m_aSound:AlertSound;		private var m_pSound:PointSound;		private var m_stf:SoundTransform;		private var m_base:Shape;		public function InfoDialog( h:Number) {			H = h;						m_timer = new Timer( 5000);			m_timer.addEventListener( TimerEvent.TIMER, function( e:TimerEvent) { dispatchEvent( new Event( ON_TIMER));});						m_base = Shape( addChild( new Shape()));			m_base.filters = [ getBitmapFilter()];						m_aSound = new AlertSound();			m_pSound = new PointSound();			m_stf = new SoundTransform( 0.1);						//m_infoArr = new Array();					}				public function setInfo( str:String, soundType:uint) {			var old_txt = getChildByName( "informText");			if( old_txt != null) removeChild( old_txt);						var txt:TextField = TextField( addChild( new TextField()));			txt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10);			txt.autoSize = TextFieldAutoSize.LEFT;			txt.text = str;			txt.mouseEnabled = txt.selectable = false;			txt.name = "informText";			txt.x = PAD;			txt.y = ( H - txt.height) / 2;						m_base.graphics.clear();			m_base.graphics.beginFill( 0xfaf5e2);			m_base.graphics.drawRoundRect( 0, 0, txt.width + PAD * 2, H, 8);			m_base.graphics.endFill();						m_timer.reset();			m_timer.start();						switch( soundType) {				case HERE_SOUND: m_aSound.play( 0, 1, m_stf); break;				case CLOCK_SOUND: m_pSound.play( 0, 1, m_stf); break;				default: m_pSound.play( 0, 1, m_stf); break;			}		}				public function startSound( soundType:uint) {			switch( soundType) {				case HERE_SOUND: m_aSound.play( 0, 1, m_stf); break;				case CLOCK_SOUND: m_pSound.play( 0, 1, m_stf); break;				default: m_pSound.play( 0, 1, m_stf); break;			}		}				public function getViewWidth() : Number { return m_base.width;}				function getBitmapFilter() : DropShadowFilter {            var color:Number = 0x000000;            var angle:Number = 45;            var alpha:Number = 0.5;            var blurX:Number = 5;            var blurY:Number = 5;            var distance:Number = 5;            var strength:Number = 0.5;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.HIGH;            return new DropShadowFilter(distance,                                        angle,                                        color,                                        alpha,                                        blurX,                                        blurY,                                        strength,                                        quality,                                        inner,                                        knockout);		}	}}