package window.header {	import common.AlertManager;	import window.video.WbVideo;	import flash.external.ExternalInterface;		// ヘッダー	public class HeaderContentsWb extends HeaderContents {		private var m_fpsController:FpsController;		private var m_wbVideo:WbVideo;		private const PAD2:Number = 20;		public function HeaderContentsWb( w:Number, h:Number, wbVideo:WbVideo) {						super( w, h);			m_classTitle.appendText( " " + Main.LANG.getParam( "ホワイトボード"));			if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", m_classTitle.text);						var posi_x:Number = w;						m_rightContainer.addChild( m_btnReconnect);			posi_x -= m_btnReconnect.width;			m_btnReconnect.x = posi_x;			m_btnReconnect.y = 0;						m_rightContainer.addChild( m_clock);			//m_rightContainer.addChild( m_clockAid);			removeChild( m_clockAid);			posi_x -= ( CLOCK_BAR_W + 30);			m_clock.x = posi_x;			//posi_x -= ( m_clockAid.width + 25);			//m_clockAid.x = posi_x;			/*			// FPSコントローラー			m_fpsController = new FpsController();			posi_x -= 130;			m_fpsController.x = posi_x;			m_fpsController.y = PAD;			m_rightContainer.addChild( m_fpsController);			*/						// 映像ソース選択のコンボボックスを配置			m_wbVideo = wbVideo;			posi_x -= 180;			m_wbVideo.x = posi_x;			m_wbVideo.y = PAD;			m_rightContainer.addChild( m_wbVideo);												/*			// FPSコントローラーと時計が重なっちゃった場合は、時計を非表示にする			if( m_fpsController.x + m_fpsController.width > m_clock.x) {				removeChild( m_clock);				m_fpsController.x = w - m_fpsController.width - PAD;			}*/		}				override public function setViewWidth( w:Number, debug:String = ""):void {			super.setViewWidth( w);						if( m_fpsController==null || m_wbVideo==null) return;						if( w < MIN_W) m_rightContainer.x = 0;			else m_rightContainer.x = w - MIN_W;		}					}}