package window.header {	import flash.display.*;	import flash.events.*;	import flash.utils.*;	import flash.text.*;	import flash.display.Shape;	import flash.text.TextField;	public class Clock extends Sprite {		static public const CLASS_STARTED = "CLASS_STARTED";		static public const CLASS_FINISHED = "CLASS_FINISHED";		static public const LAST_5_MIN = Main.LANG.getReplacedSentence( "終了予定時刻の%s分前です", "5");		static public const LAST_10_MIN = Main.LANG.getReplacedSentence( "終了予定時刻の%s分前です", "10");		private var m_done_started:Boolean = true; // 講師からstartWatchClassStartedOrFinishedでfalseに設定される		private var m_done_finished:Boolean = true; // 講師からstartWatchClassStartedOrFinishedでfalseに設定される		private var m_done_last5:Boolean = false;		private var m_done_last10:Boolean = false;		private var W;		private const COLOR:uint = Main.MAIN_COLOR_01;//0xb2b2b2;		private const TEXT_COLOR:uint = 0x333333;		private var m_arrow:Shape;		private var m_startUtc:Number;		private var m_endUtc:Number;				// 2011-06-04 11:00:00のようなフォーマットで開始時間と終了時間を受け取り		// 現在時刻を矢印で示す		public function Clock( startstr:String, endstr:String, w:Number) {			W = w;						var pattern:RegExp = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/;            if( pattern.exec( startstr) == null || pattern.exec( endstr) == null) {                Main.addErrMsg( Main.LANG.getParam( "授業開始/終了時刻のフォーマットが正しくありません。") +									   "\n" + Main.LANG.getParam( "正しくは'YYYY-MM-DD hh:mm:ss'です。") +									   "\n" + Main.LANG.getParam( "getparam.phpにて設定しているSTART_TIME、END_TIMEの値を確認してください。"));		   	}						var startDate:Date = new Date( startstr.substr( 0, 4),										  int( startstr.substr( 5, 2)) - 1,										  startstr.substr( 8, 2),										  startstr.substr( 11, 2),										  startstr.substr( 14, 2),										  startstr.substr( 17, 2));			var endDate:Date = new Date( endstr.substr( 0, 4),										  int( endstr.substr( 5, 2)) - 1,										  endstr.substr( 8, 2),										  endstr.substr( 11, 2),										  endstr.substr( 14, 2),										  endstr.substr( 17, 2));			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", String(startDate) + "  " +  String(endDate));						m_startUtc = startDate.getTime();			m_endUtc = endDate.getTime();						var startLab:TextField = TextField( addChild( new TextField()));			startLab.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 9, TEXT_COLOR);			startLab.autoSize = TextFieldAutoSize.LEFT;			startLab.text = startstr.substr( 11, 2) + ":" + startstr.substr( 14, 2);			startLab.x = - startLab.width / 2;			startLab.mouseEnabled = startLab.selectable = false;			var endLab:TextField = TextField( addChild( new TextField()));			endLab.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 9, TEXT_COLOR);			endLab.autoSize = TextFieldAutoSize.LEFT;			endLab.text = endstr.substr( 11, 2) + ":" + endstr.substr( 14, 2);			endLab.x = W - endLab.width / 2;			endLab.mouseEnabled = endLab.selectable = false;						graphics.beginFill( COLOR);			graphics.drawRect( 0, startLab.height + 1, W, 3);			graphics.endFill();			graphics.beginFill( 0xffffff);			graphics.drawRect( 0, startLab.height + 4, W, 1);			graphics.endFill();						m_arrow = Shape( addChild( new Shape()));			m_arrow.graphics.beginFill( 0x444444);			m_arrow.graphics.moveTo( 0, 0);			m_arrow.graphics.lineTo( -5, 6);			m_arrow.graphics.lineTo( 5, 6);			m_arrow.graphics.lineTo( 0, 0);			m_arrow.graphics.endFill();			m_arrow.y = startLab.height + 5;						//onTimer();						var timer:Timer = new Timer( 10000);			timer.addEventListener( TimerEvent.TIMER, onTimer);			timer.start();		}				// HeaderContentsLecturerから呼ばれる		public function startWatchClassStartedOrFinished() {			m_done_started = false;			m_done_finished = false;			onTimer();		}				function onTimer( e:TimerEvent = null) {			var now:Date = new Date();			var nowUtc:Number = now.getTime();//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", String( nowUtc) + "\n" + String( m_startUtc) + "\n" + String( m_endUtc));						m_arrow.x = ( nowUtc - m_startUtc) / ( m_endUtc - m_startUtc) * W;						// 開始時間のdispatch			if( ! m_done_started && m_startUtc < nowUtc) {				dispatchEvent( new Event( CLASS_STARTED));				m_done_started = true;			}			if( ! m_done_finished && m_endUtc < nowUtc) {				dispatchEvent( new Event( CLASS_FINISHED));				m_done_finished = true;			}			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", String( m_done_started) + ":" + String( m_startUtc - nowUtc) + " / " + String( m_done_finished) + ":" + String( m_endUtc - nowUtc));						// 終了●分前のdispatch			var lastMin:Number = ( m_endUtc - nowUtc) / 60000; // 残り何分か			if( ! m_done_last5 && 3 < lastMin && lastMin < 6) {				dispatchEvent( new Event( LAST_5_MIN));				m_done_last5 = true;			}			if( ! m_done_last10 && 8 < lastMin && lastMin < 11) {				dispatchEvent( new Event( LAST_10_MIN));				m_done_last10 = true;			}						if( m_arrow.x < 0) m_arrow.x = 0;			if( m_arrow.x > W) m_arrow.x = W;		}	}}