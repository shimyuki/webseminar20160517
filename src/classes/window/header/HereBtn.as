package window.header {	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;	import common.*;	import caurina.transitions.*;		public class HereBtn extends Sprite {		private const STR_OFF:String = Main.LANG.getParam( "挙手をする");		private const STR_OVER:String = STR_OFF;		private const STR_ON:String = Main.LANG.getParam( "挙手中...");		private var m_on:Sprite;		private var m_off:Sprite;		private var m_over:Sprite;		private var m_clickObj:Sprite;		private const FONT_SIZE:Number = 12;		private const FONT_COLOR:uint = 0xffffff;		private const BASE_COLOR_01:uint = 0xa0b7ce;		private const BASE_COLOR_02:uint = 0x7f9bb9;		private const ELLIPSE_W:Number = 10;		private var m_iconHereHand_on;		private var m_hand_initY:Number;				public function HereBtn( w:Number, h:Number) {						// OFFベース			m_off = Sprite( addChild( new Sprite()));			var matrix:Matrix = new Matrix();			matrix.createGradientBox( w, h, - Math.PI / 2);			m_off.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_02, BASE_COLOR_01],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_off.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_off.graphics.endFill();						// OFFの挙手アイコン			var iconHereHand_off = m_off.addChild( new IconHereHand());			iconHereHand_off.x = 5;			iconHereHand_off.y = ( h - iconHereHand_off.height) / 2;			iconHereHand_off.alpha = 0.4;						var offTxt:TextField = TextField( m_off.addChild( new TextField()));			offTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			offTxt.autoSize = TextFieldAutoSize.LEFT;			offTxt.text = STR_OFF;			offTxt.selectable = offTxt.mouseEnabled = false;			offTxt.x = iconHereHand_off.x + iconHereHand_off.width + 5;			offTxt.y = ( h - offTxt.height) / 2;									// OVERベース			m_over = Sprite( addChild( new Sprite()));			m_over.graphics.beginGradientFill( GradientType.LINEAR,											[BASE_COLOR_01, BASE_COLOR_02],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			m_over.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_over.graphics.endFill();			m_over.visible = false;						// OVERの挙手アイコン			var iconHereHand_over = m_over.addChild( new IconHereHand());			iconHereHand_over.x = 5;			iconHereHand_over.y = ( h - iconHereHand_over.height) / 2;					var overTxt:TextField = TextField( m_over.addChild( new TextField()));			overTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			overTxt.autoSize = TextFieldAutoSize.LEFT;			overTxt.text = STR_OVER;			overTxt.x = iconHereHand_over.x + iconHereHand_over.width + 5;			overTxt.y = ( h - overTxt.height) / 2;			overTxt.selectable = overTxt.mouseEnabled = false;												m_clickObj = Sprite( addChild( new Sprite()));			m_clickObj.graphics.beginFill( 0, 0);			m_clickObj.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			m_clickObj.graphics.endFill();									// ONベース			m_on = Sprite( addChild( getOnBase( w, h, matrix)));			m_on.visible = false;						// ONの挙手アイコン（ピコピコ動く）			m_iconHereHand_on = m_on.addChild( new IconHereHand());			m_iconHereHand_on.x = 5;			m_hand_initY = ( h - m_iconHereHand_on.height) / 2;			m_iconHereHand_on.y = m_hand_initY;								var onTxt:TextField = TextField( m_on.addChild( new TextField()));			onTxt.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), FONT_SIZE, FONT_COLOR, true);			onTxt.autoSize = TextFieldAutoSize.LEFT;			onTxt.text = STR_ON;			onTxt.selectable = onTxt.mouseEnabled = false;			onTxt.x = m_iconHereHand_on.x + m_iconHereHand_on.width + 5;			onTxt.y = ( h - onTxt.height) / 2;						buttonMode = true;					}				public function isOn() :Boolean {			return m_on.visible;		}				public function on() {			m_on.visible = true;			// 手をピコピコ動かす			Tweener.addTween( m_iconHereHand_on, { y:m_hand_initY - 3, transition:"easeOutQuint", time:0.5, delay:2, onComplete:onComplete_01});			buttonMode = false;		}		public function off() {			m_on.visible = false;			Tweener.removeTweens( m_iconHereHand_on);			buttonMode = true;		}		function onComplete_01() {			m_iconHereHand_on.y = m_hand_initY - 1;			Tweener.addTween( m_iconHereHand_on, { y:m_hand_initY - 3, transition:"easeOutQuint", time:0.5, onComplete:onComplete_02});		}		function onComplete_02() {			Tweener.addTween( m_iconHereHand_on, { y:m_hand_initY, transition:"easeOutBounce", time:0.5, onComplete:onComplete_03});		}		function onComplete_03() {			Tweener.addTween( m_iconHereHand_on, { y:m_hand_initY - 3, transition:"easeOutQuint", time:0.5, delay:3, onComplete:onComplete_01});		}				function getOnBase( w:Number, h:Number, matrix:Matrix) : Sprite {			var onBase:Sprite = new Sprite();			onBase.graphics.beginFill( 0xffffff);			onBase.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			onBase.graphics.endFill();			var onBaseRed:Sprite = Sprite( onBase.addChild( new Sprite()));			onBaseRed.graphics.beginGradientFill( GradientType.LINEAR,											[0xb50000, 0xcc0000],											[1, 1],											[0x00, 0xFF],											matrix, SpreadMethod.PAD);			onBaseRed.graphics.drawRoundRect( 0, 0, w, h, ELLIPSE_W);			onBaseRed.graphics.endFill();						return onBase;		}				public function setEnabled( b:Boolean):void {			buttonMode = b;			if( b) {				m_clickObj.addEventListener( MouseEvent.ROLL_OVER, onRollOVER);				m_clickObj.addEventListener( MouseEvent.ROLL_OUT, onRollOUT);			} else {				m_clickObj.removeEventListener( MouseEvent.ROLL_OVER, onRollOVER);				m_clickObj.removeEventListener( MouseEvent.ROLL_OUT, onRollOUT);				onRollOUT();			}		}		function onRollOVER( e:MouseEvent) {			m_over.visible = true;		}		function onRollOUT( e:MouseEvent = null) {			m_over.visible = false;		}	}}