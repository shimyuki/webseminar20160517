package window.whiteboard.toolchip {	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.*;	import common.*;		public class LineWeightSelector extends Sprite {		static public const CHANGE:String = "change";		public var selectedWeight = -1;		private var MAX:Number;		private var MIN:Number;		private var DIFF:Number;		private var m_arr;		public function LineWeightSelector( _min:Number = 1, _max:Number = 10, _diff:Number = 2) {			MIN = _min;			MAX = _max;			DIFF = _diff;			var y_posi = 0;			m_arr = new Array();						for( var weight = MIN; weight <= MAX; weight += DIFF) {				var lineBtn:LineBtn = LineBtn( addChild( new LineBtn( weight, MAX + 5)));				lineBtn.y = y_posi;				y_posi += MAX + 6;				lineBtn.addEventListener( LineBtn.CLICK, onChange);								m_arr.push( lineBtn);								if( _min == 1 && _max == 10 && _diff == 2) {					// デフォルト設定の場合は線の太さは3に。					if( weight == 3) {						selectedWeight = weight;						lineBtn.on();					}				} else {					if( selectedWeight == -1 && weight > ( MAX - MIN) / 2) {						selectedWeight = weight;						lineBtn.on();					}				}			}					}				// SimpleToolModeDetailからinit時に呼ばれる		public function getMin():Number { return MIN;}		public function getMax():Number { return MAX;}		public function getDiff():Number { return DIFF;}				function onChange( e:Event) {			var targetLB:LineBtn = LineBtn( e.target);			selectedWeight = targetLB.weight;			for each( var lb:LineBtn in m_arr) {				if( lb !== targetLB) {					lb.off();				}			}			dispatchEvent( new Event( CHANGE));		}				public function select( weight) {			for each( var lb:LineBtn in m_arr) {				lb.off();				if( lb.weight == weight) lb.on();			}			dispatchEvent( new Event( CHANGE));		}	}}import flash.display.*;import flash.text.*;import flash.events.*;class LineBtn extends Sprite {	static public const CLICK:String = "click";		private const BASE_COLOR = 0xffffff;	private const BASE_ON_COLOR = 0x9ad8ff;	private const W = 50;	private var H;	private const PAD = 5;	public var weight:Number;	private var m_baseOver:Shape;	private var m_baseOn:Shape;	private var m_clickObj:Sprite;	public function LineBtn( weight:Number, _h:Number) {		this.weight = weight;		H = _h;				/*		var base:Shape = Shape( addChild( new Shape()));		base.graphics.beginFill( BASE_COLOR);		base.graphics.drawRect( 0, 0, W, H);		base.graphics.endFill();*/			m_baseOver = Shape( addChild( new Shape()));		m_baseOver.graphics.beginFill( BASE_ON_COLOR);		m_baseOver.graphics.drawRect( 0, 0, W, H);		m_baseOver.graphics.endFill();		m_baseOver.visible = false;				m_baseOn = Shape( addChild( new Shape()));		m_baseOn.graphics.beginFill( BASE_ON_COLOR);		m_baseOn.graphics.drawRect( 0, 0, W, H);		m_baseOn.graphics.endFill();		m_baseOn.visible = false;				var line:Shape = Shape( addChild( new Shape()));		line.graphics.beginFill( 0);		line.graphics.drawRect( 0, 0, W - PAD*2, weight);		line.graphics.endFill();		line.x = PAD;		line.y = ( H - weight) / 2;								m_clickObj = Sprite( addChild( new Sprite()));		m_clickObj.graphics.beginFill( 0, 0);		m_clickObj.graphics.drawRect( 0, 0, W, H);		m_clickObj.graphics.endFill();		m_clickObj.addEventListener( MouseEvent.ROLL_OVER, function( e:*){ m_baseOver.visible = true;});		m_clickObj.addEventListener( MouseEvent.ROLL_OUT, function( e:*){ m_baseOver.visible = false;});		m_clickObj.addEventListener( MouseEvent.CLICK, on);	}	function on( e:* = null) {		m_baseOn.visible = true;		m_baseOver.visible = false;		dispatchEvent( new Event( CLICK));	}	function off( ) {		m_baseOver.visible = false;		m_baseOn.visible = false;	}}