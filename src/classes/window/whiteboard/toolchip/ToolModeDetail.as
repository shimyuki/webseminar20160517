package window.whiteboard.toolchip {	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.*;	import flash.errors.*;	import window.whiteboard.*;	import fl.controls.*;	import fl.events.*;	import flash.text.TextField;	import window.whiteboard.slide.PaintParts;	import window.whiteboard.slide.PaintPartsData;		public class ToolModeDetail extends Sprite {		static public const LABEL_POINTER_CHK = Main.LANG.getParam( "ポインター表示");		static public const CHANGE:String = "Change";		static public const LIVE_POINTER_STATUS_CHANGED:String = "LIVE_POINTER_STATUS_CHANGED";		static public const CONTAINER_SIZE_CHANGED:String = "CONTAINER_SIZE_CHANGED";				// 詳細設定コンテナ		private var m_selectorCon:Sprite;				// 共通パラメータ		public var tool_name:String;		public var pointer;				// 各パラメータ		//private var m_pencilPointer = new IconPencil();		public var livePointerStatus:Boolean = false;		public var linecolor:uint;		public var lineweight:int;		public var fillcolor:uint = 0x000000;		public var linealpha:Number = 1;		public var fillalpha:Number = 0;		public var fontsize:Number = 30;		public var fontname:String = "";		public var fontbold:Boolean = false;				private var m_pointerChk:CheckBox = null;				// 拡大縮小の場合に使うCombobox		private var m_scaleCombo:ComboBox;				// フォント変更の場合に使うCombobox		private var m_fontCombo:ComboBox;		private var m_fontsizeCombo:ComboBox;		private var m_fontcolorCP:ColorPicker;		private var m_fontboldChk:CheckBox;				private var m_lineCp:ColorPicker; // 線の色カラーピッカー		private var m_lws:LineWeightSelector; // 線の太さセレクター						// 色見本		private const CP_COLORS:Array = new Array( 0x000000, 0xed1c24, 0x0117e0, 0x008000, 0xff7e00);		private const CP_SCALE:Number = 1.25;		private const CP_SIZE = 25;						public function ToolModeDetail( tool_name:String) {			m_selectorCon = Sprite( addChild( new Sprite()));						this.tool_name = tool_name;			switch( tool_name) {				case WhiteboardContainer.TOOL_ARROW:					// ポインタの設定					var arw = new IconArrow();					pointer = new Sprite();					pointer.addChild( arw);					m_pointerChk = CheckBox( addChild( new CheckBox()));					m_pointerChk.y = 5;					m_pointerChk.label = LABEL_POINTER_CHK;					m_pointerChk.textField.autoSize = TextFieldAutoSize.LEFT;					m_pointerChk.setSize( m_pointerChk.textField.textWidth + 30, 22);					m_pointerChk.addEventListener( Event.CHANGE, function( e:Event) {												  livePointerStatus = m_pointerChk.selected;												  // WhiteboardContainer経由でSimpleToolModeDetailにも変更を反映させる												  dispatchEvent( new Event( CHANGE));												  // WbSlideで監視している。状態の変化を反映させる												  dispatchEvent( new Event( LIVE_POINTER_STATUS_CHANGED));												 });					break;				case WhiteboardContainer.TOOL_ZOOMIN:					var plus = new IconGlassPlus();					pointer = new Sprite();					pointer.addChild( plus);				case WhiteboardContainer.TOOL_ZOOMOUT:					if( tool_name == WhiteboardContainer.TOOL_ZOOMOUT) {						var minus = new IconGlassMinus();						pointer = new Sprite();						pointer.addChild( minus);					}										m_scaleCombo = ComboBox( m_selectorCon.addChild( new ComboBox()));					m_scaleCombo.editable = true;					m_scaleCombo.restrict = "0-9%";					m_scaleCombo.addItem( { label:"300%", data:3.0});					m_scaleCombo.addItem( { label:"200%", data:2.0});					m_scaleCombo.addItem( { label:"150%", data:1.5});					m_scaleCombo.addItem( { label:"100%", data:1.0});					m_scaleCombo.addItem( { label:"80%", data:0.8});					m_scaleCombo.addItem( { label:"60%", data:0.6});					m_scaleCombo.addItem( { label:"40%", data:0.4});					m_scaleCombo.addItem( { label:"20%", data:0.2});					m_scaleCombo.addEventListener( ComponentEvent.ENTER,							function( e:*){																if( m_scaleCombo.value.lastIndexOf( '%') >= 0) {									var myPattern:RegExp = /%/g;									m_scaleCombo.text = m_scaleCombo.value.replace( myPattern, "");								}								var num100:Number = Number( m_scaleCombo.text);								var num:Number = num100 / 100;								m_scaleCombo.text = String( num100) + "%";																dispatchEvent( new ScaleComboEvent( ScaleComboEvent.CHANGED, tool_name, num));							});					m_scaleCombo.addEventListener( Event.CHANGE,							function( e:*){								if( ! m_scaleCombo.selectedItem.data) return;//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", String( m_scaleCombo.selectedItem.data));								dispatchEvent( new ScaleComboEvent( ScaleComboEvent.CHANGED, tool_name, m_scaleCombo.selectedItem.data));							});										m_scaleCombo.y = 5;										// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように					m_scaleCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);					m_scaleCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);										break;				case WhiteboardContainer.TOOL_PENCIL:					// ポインタの設定					pointer = new Sprite();					var pen = pointer.addChild( new IconPencil());					pen.y = -16;				case WhiteboardContainer.TOOL_SMOOTH:					if( tool_name == WhiteboardContainer.TOOL_SMOOTH) {						pointer = new Sprite();						var smoothPen = pointer.addChild( new IconSmooth());						smoothPen.y = -16;					}				case WhiteboardContainer.TOOL_LINE:					if( tool_name == WhiteboardContainer.TOOL_LINE) {						var closs = new IconCross();						pointer = new Sprite();						pointer.addChild( closs);					}										// 線の色　カラーピッカー生成					m_lineCp = ColorPicker( m_selectorCon.addChild( new ColorPicker()));					m_lineCp.colors = CP_COLORS;					m_lineCp.scaleX = m_lineCp.scaleY = CP_SCALE;					m_lineCp.setStyle("columnCount", CP_COLORS.length); 					m_lineCp.setStyle("swatchWidth", CP_SIZE); 					m_lineCp.setStyle("swatchHeight", CP_SIZE); 					m_lineCp.setStyle("swatchPadding", 1); 					m_lineCp.setStyle("backgroundPadding", 3); 					m_lineCp.y = 5;					m_lineCp.addEventListener( ColorPickerEvent.CHANGE, function( e:*){ linecolor = m_lineCp.selectedColor; dispatchEvent( new Event( CHANGE));});					linecolor = m_lineCp.selectedColor;										// 線の太さ選択ツールの生成					m_lws = LineWeightSelector( m_selectorCon.addChild( new LineWeightSelector()));					m_lws.x = 32;					m_lws.y = 5;					m_lws.addEventListener( LineWeightSelector.CHANGE, function( e:*){ lineweight = m_lws.selectedWeight; dispatchEvent( new Event( CHANGE));});					lineweight = m_lws.selectedWeight;										// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);					break;				case WhiteboardContainer.TOOL_SQUARE:				case WhiteboardContainer.TOOL_CIRCLE:									var closs2 = new IconCross();					pointer = new Sprite();					pointer.addChild( closs2);					var lineChk:CheckBox = CheckBox( addChild( new CheckBox()));					lineChk.label = Main.LANG.getParam( "枠線");					lineChk.selected = true;										// 線の色　カラーピッカー生成					m_lineCp = ColorPicker( m_selectorCon.addChild( new ColorPicker()));					m_lineCp.colors = CP_COLORS;					m_lineCp.scaleX = m_lineCp.scaleY = CP_SCALE;					m_lineCp.setStyle("columnCount", CP_COLORS.length); 					m_lineCp.setStyle("swatchWidth", CP_SIZE); 					m_lineCp.setStyle("swatchHeight", CP_SIZE); 					m_lineCp.setStyle("swatchPadding", 1); 					m_lineCp.setStyle("backgroundPadding", 3); 					m_lineCp.x = 25;					m_lineCp.y = 20;					m_lineCp.addEventListener( ColorPickerEvent.CHANGE, function( e:*){ linecolor = m_lineCp.selectedColor; dispatchEvent( new Event( CHANGE));});					linecolor = m_lineCp.selectedColor;										// 線の太さ選択ツールの生成					m_lws = LineWeightSelector( m_selectorCon.addChild( new LineWeightSelector()));					m_lws.x = 57;					m_lws.y = 25;					m_lws.addEventListener( LineWeightSelector.CHANGE, function( e:*){ lineweight = m_lws.selectedWeight; dispatchEvent( new Event( CHANGE));});					lineweight = m_lws.selectedWeight;										var fillChk:CheckBox = CheckBox( addChild( new CheckBox()));					fillChk.y = m_lws.y + m_lws.height + 10;					fillChk.label = Main.LANG.getParam( "塗りつぶし");					fillChk.selected = false;										// 塗りつぶしの色　カラーピッカー生成					var cp2:ColorPicker = ColorPicker( m_selectorCon.addChild( new ColorPicker()));					cp2.colors = CP_COLORS;					cp2.scaleX = cp2.scaleY = CP_SCALE;					cp2.setStyle("columnCount", CP_COLORS.length); 					cp2.setStyle("swatchWidth", CP_SIZE); 					cp2.setStyle("swatchHeight", CP_SIZE); 					cp2.setStyle("swatchPadding", 1); 					cp2.setStyle("backgroundPadding", 3); 					cp2.x = 25;					cp2.y = fillChk.y + 20;					cp2.addEventListener( ColorPickerEvent.CHANGE, function( e:*){ fillcolor = cp2.selectedColor; dispatchEvent( new Event( CHANGE));});					fillcolor = cp2.selectedColor;										lineChk.addEventListener( Event.CHANGE,						function( e:Event) {							if( lineChk.selected) {								linecolor = m_lineCp.selectedColor;								lineweight = m_lws.selectedWeight;								linealpha = 1;								m_lineCp.visible = true;								m_lws.visible = true;																fillChk.y = m_lws.y + m_lws.height + 10;								cp2.y = fillChk.y + 20;							} else {								linecolor = 0;								lineweight = 0;								linealpha = 0;								m_lineCp.visible = false;								m_lws.visible = false;																fillChk.y = lineChk.y + lineChk.height + 10;								cp2.y = fillChk.y + 20;							}							dispatchEvent( new Event( CONTAINER_SIZE_CHANGED));						});					fillChk.addEventListener( Event.CHANGE,						function( e:Event) {							if( fillChk.selected) {								fillcolor = cp2.selectedColor;								fillalpha = 1;								cp2.visible = true;							} else {								fillcolor = 0;								fillalpha = 0;								cp2.visible = false;							}							dispatchEvent( new Event( CONTAINER_SIZE_CHANGED));						});										// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);					cp2.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);					cp2.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);														break;				case WhiteboardContainer.TOOL_ERASER:									var eraser = new IconEraser();					pointer = new Sprite();					pointer.addChild( eraser);					eraser.y = -16;					// 線の色					linecolor = 0xffffff;										// 線の太さ選択ツールの生成					m_lws = LineWeightSelector( m_selectorCon.addChild( new LineWeightSelector( 10, 30, 10)));					m_lws.x = 10;					m_lws.y = 10;					m_lws.addEventListener( LineWeightSelector.CHANGE, function( e:*){ lineweight = m_lws.selectedWeight; dispatchEvent( new Event( CHANGE));});					lineweight = m_lws.selectedWeight;																			break;				case WhiteboardContainer.TOOL_TEXT:					// ポインタの設定					pointer = new Sprite();					var txtInput = pointer.addChild( new IconTxt());										m_fontCombo = ComboBox( m_selectorCon.addChild( new ComboBox()));					m_fontCombo.y = 5;					var fontnameArr:Array = Main.CONF.getFontnameArr();					if( fontnameArr != null) {						for each( var fname in fontnameArr) {							m_fontCombo.addItem( { label:fname, data:fname});						}					}					// ドロップダウンリストのテキストの長さに基づいて dropdownWidth プロパティを設定					var maxLength:Number = 0;					var i:uint;					for (i = 0; i < m_fontCombo.length; i++) {						m_fontCombo.selectedIndex = i;						m_fontCombo.drawNow();						var currText:String = m_fontCombo.text;						var currWidth:Number = m_fontCombo.textField.textWidth;						maxLength = Math.max(currWidth, maxLength);					}					m_fontCombo.dropdownWidth = maxLength + 20;										// 初期選択値の設定					fontname = String( Main.CONF.getMainFont());					/*					for( i = 0; i < m_fontCombo.length; i++) {						if( String( Object( m_fontCombo.getItemAt( i)).data) == fontname) {							m_fontCombo.selectedItem = m_fontCombo.getItemAt( i);							break;						}					}*/					/*					m_fontCombo.addEventListener( Event.CHANGE,							function( e:*){								if( ! m_fontsizeCombo.selectedItem.data) return;								fontname = m_fontCombo.selectedItem.data;								dispatchEvent( new Event( CHANGE));							});*/																				m_fontsizeCombo = ComboBox( m_selectorCon.addChild( new ComboBox()));					m_fontsizeCombo.y = m_fontCombo.y + m_fontCombo.height + 5;					m_fontsizeCombo.width = 55;					m_fontsizeCombo.editable = true;					m_fontsizeCombo.restrict = "0-9";					m_fontsizeCombo.addItem( { label:"60px", data:60});					m_fontsizeCombo.addItem( { label:"50px", data:50});					m_fontsizeCombo.addItem( { label:"40px", data:40});					m_fontsizeCombo.addItem( { label:"30px", data:30});					m_fontsizeCombo.addItem( { label:"24px", data:24});					m_fontsizeCombo.addItem( { label:"18px", data:18});					m_fontsizeCombo.addItem( { label:"16px", data:16});					m_fontsizeCombo.addItem( { label:"15px", data:15});					m_fontsizeCombo.addItem( { label:"14px", data:14});					m_fontsizeCombo.addItem( { label:"13px", data:13});					m_fontsizeCombo.addItem( { label:"12px", data:12});					m_fontsizeCombo.addItem( { label:"11px", data:11});					m_fontsizeCombo.addItem( { label:"10px", data:10});					m_fontsizeCombo.addItem( { label:"9px", data:9});															/*					var lab_fontsize:TextField = TextField( addChild( new TextField()));					lab_fontsize.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0x333333);					lab_fontsize.autoSize = TextFieldAutoSize.LEFT;					lab_fontsize.text = "px";					lab_fontsize.x = m_fontsizeCombo.x + m_fontsizeCombo.width + 3;					lab_fontsize.y = m_fontsizeCombo.y + ( m_fontsizeCombo.height - lab_fontsize.height) / 2;					*/					// フォントの色　カラーピッカー生成					m_fontcolorCP = ColorPicker( m_selectorCon.addChild( new ColorPicker()));					m_fontcolorCP.colors = CP_COLORS;					m_fontcolorCP.scaleX = m_fontcolorCP.scaleY = CP_SCALE;					m_fontcolorCP.setStyle("columnCount", CP_COLORS.length); 					m_fontcolorCP.setStyle("swatchWidth", CP_SIZE); 					m_fontcolorCP.setStyle("swatchHeight", CP_SIZE); 					m_fontcolorCP.setStyle("swatchPadding", 1); 					m_fontcolorCP.setStyle("backgroundPadding", 3); 					//m_fontcolorCP.setStyle("textPadding", 7);					m_fontcolorCP.x = 25;					m_fontcolorCP.y = m_fontsizeCombo.y + m_fontsizeCombo.height + 5;					fillcolor = m_fontcolorCP.selectedColor;															m_fontboldChk = CheckBox( addChild( new CheckBox()));					m_fontboldChk.y = m_fontcolorCP.y + m_fontcolorCP.height + 5;					m_fontboldChk.label = "Bold";					//m_fontboldChk.selected = fontbold;										// 初期値を選択					initToolText();					// リスナを設定					initToolTextListener();										break;				default: 					throw ( new Error("ToolModeDetail ERROR: ["+tool_name+"] is unexpected tool name."));					break;			}			//if( pointer != null) pointer.name = "ToolModePointer";		}		public function setScaleCombo( scale_str:String) {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", scale_str);			if( m_scaleCombo) {				/*				var scaleCombo_editable = m_scaleCombo.editable;				m_scaleCombo.editable = true;				m_scaleCombo.text = scale_str;				m_scaleCombo.editable = scaleCombo_editable;				*/				for( var i = 0; i < m_scaleCombo.length; i++) {					var item = m_scaleCombo.getItemAt( i);					if( item.label == scale_str) {						m_scaleCombo.selectedIndex = i;						break;					}				}			}		}				// SimpleToolModeDetailのinitから呼ばれる		public function getPointerStatus() : Boolean { return m_pointerChk.selected;}		public function getLineColorPicker() : ColorPicker { return m_lineCp;}		public function getLineWeightSelector() : LineWeightSelector { return m_lws;}		public function getFontCombo() : ComboBox { return m_fontCombo;}		public function getFontsizeCombo() : ComboBox { return m_fontsizeCombo;}		public function getFontcolorColorPicker() : ColorPicker { return m_fontcolorCP;}				public function setAuthority( b:Boolean) {			if( b) {				if( m_pointerChk != null) {					m_pointerChk.enabled = true;				}							} else {				if( m_pointerChk != null) {					if( m_pointerChk.selected) {						m_pointerChk.selected = livePointerStatus = false;						// WbSlideで監視している。状態の変化を反映させる						dispatchEvent( new Event( LIVE_POINTER_STATUS_CHANGED));					}					m_pointerChk.enabled = false;				}							}		}				function onItemRollOut( e:*) {			WhiteboardContainer.CURSOR_BUSY = Main.DROP_OPENED = false;		}		function onItemRollOver( e:*) {			WhiteboardContainer.CURSOR_BUSY = Main.DROP_OPENED = true;		}				// テキストペイントパーツがダブルクリックされたとき、		// WhiteboardContainer経由でToolchipContainer:setTextToolModeDetail()から呼ばれる		// 強制的にそのテキストペイントパーツの内容と合わせる		public function set( ppd:PaintPartsData) {						removeToolTextListener();						fillcolor = ppd.fillcolor;			fontsize = ppd.fontsize;			fontname = ppd.fontname;			fontbold = ppd.fontbold;						initToolText();			initToolTextListener();		}				function initToolText() {			// フォント名のコンボボックスの選択状態を変更			var i:uint;			for( i = 0; i < m_fontCombo.length; i++) {				if( String( Object( m_fontCombo.getItemAt( i)).data) == fontname) {					m_fontCombo.selectedItem = m_fontCombo.getItemAt( i);					break;				}			}			// フォントサイズのコンボボックスの選択状態を変更			for( i = 0; i < m_fontsizeCombo.length; i++) {				if( Number( Object( m_fontsizeCombo.getItemAt( i)).data) == Number( fontsize)) {					m_fontsizeCombo.selectedItem = m_fontsizeCombo.getItemAt( i);					break;				}			}						m_fontcolorCP.selectedColor = fillcolor;			m_fontboldChk.selected = fontbold;		}		function initToolTextListener() {			m_fontCombo.addEventListener( Event.CHANGE,					function( e:*){						if( ! m_fontCombo.selectedItem.data) return;						fontname = m_fontCombo.selectedItem.data;						dispatchEvent( new Event( CHANGE));					});			m_fontsizeCombo.addEventListener( ComponentEvent.ENTER,					function( e:*){						//fontsize = Number( m_fontsizeCombo.text);						fontsize = Number( m_fontsizeCombo.text.replace(/[^0-9]/g, ""));						dispatchEvent( new Event( CHANGE));					});			m_fontsizeCombo.addEventListener( Event.CHANGE,					function( e:*){						if( ! m_fontsizeCombo.selectedItem.data) return;						fontsize = Number( m_fontsizeCombo.selectedItem.data);						//fontsize = Number( m_fontsizeCombo.text.replace(/[^0-9]/g, ""));						dispatchEvent( new Event( CHANGE));					});			m_fontcolorCP.addEventListener( ColorPickerEvent.CHANGE, function( e:*){										   fillcolor = m_fontcolorCP.selectedColor;										   dispatchEvent( new Event( CHANGE));});			m_fontboldChk.addEventListener( Event.CHANGE,				function( e:Event) {					fontbold = m_fontboldChk.selected;					dispatchEvent( new Event( CHANGE));				});									// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように			m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);			m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);			m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);			m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);			m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);			m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);		}		function removeToolTextListener() {			m_fontCombo.removeEventListener( Event.CHANGE, arguments.callee);			m_fontsizeCombo.removeEventListener( ComponentEvent.ENTER, arguments.callee);			m_fontsizeCombo.removeEventListener( Event.CHANGE, arguments.callee);			m_fontcolorCP.removeEventListener( ColorPickerEvent.CHANGE, arguments.callee);			m_fontboldChk.removeEventListener( Event.CHANGE, arguments.callee);		}				// WhiteboardContainer経由でSimpleToolModeDetailの変更を反映させる用		public function apply( simpleToolModeDetail:SimpleToolModeDetail) {						var i;						// UIの選択状態も合わせる			switch( simpleToolModeDetail.tool_name) {				case WhiteboardContainer.TOOL_ARROW:					m_pointerChk.selected = livePointerStatus = simpleToolModeDetail.livePointerStatus;					// WbSlideで監視している。状態の変化を反映させる					dispatchEvent( new Event( LIVE_POINTER_STATUS_CHANGED));					break;				case WhiteboardContainer.TOOL_PENCIL:				case WhiteboardContainer.TOOL_SMOOTH:				case WhiteboardContainer.TOOL_LINE:				case WhiteboardContainer.TOOL_SQUARE:				case WhiteboardContainer.TOOL_CIRCLE:				case WhiteboardContainer.TOOL_ERASER:					//---------------------------------------------------------------					// テキスト以外のペイントツールの場合					//---------------------------------------------------------------									// 線の色を合わせる					if( linecolor != simpleToolModeDetail.linecolor) {						linecolor = simpleToolModeDetail.linecolor;						m_lineCp.selectedColor = linecolor;					}										// 線の太さを合わせる					if( lineweight != simpleToolModeDetail.lineweight) {						lineweight = simpleToolModeDetail.lineweight;						m_lws.select( lineweight);					}					break;								case WhiteboardContainer.TOOL_TEXT:					//---------------------------------------------------------------					// テキストツールの場合					//---------------------------------------------------------------										// テキストの色を合わせる					if( fillcolor != simpleToolModeDetail.fillcolor) {						fillcolor = simpleToolModeDetail.fillcolor;						m_fontcolorCP.selectedColor = fillcolor;					}										// フォント名を合わせる					if( fontname != simpleToolModeDetail.fontname) {						fontname = simpleToolModeDetail.fontname;						for( i = 0; i < m_fontCombo.length; i++) {							if( String( Object( m_fontCombo.getItemAt( i)).data) == fontname) {								m_fontCombo.selectedItem = m_fontCombo.getItemAt( i);								break;							}						}					}															// フォントサイズを合わせる					if( fontsize != simpleToolModeDetail.fontsize) {						fontsize = simpleToolModeDetail.fontsize;						for( i = 0; i < m_fontsizeCombo.length; i++) {							if( Number( Object( m_fontsizeCombo.getItemAt( i)).data) == fontsize) {								m_fontsizeCombo.selectedItem = m_fontsizeCombo.getItemAt( i);								break;							}						}					}										break;				default: break;			}			//linealpha = simpleToolModeDetail.linealpha;			//fillalpha = simpleToolModeDetail.fillalpha;			//fontbold = simpleToolModeDetail.fontbold;					}	}}import flash.display.*;class IconCross extends Sprite {	private const FIN_W = 6;	private const FIN_H = 1;	public function IconCross() {		var top = addChild( getFin( FIN_H, FIN_W));		top.y = -FIN_W - 3;				var btm = addChild( getFin( FIN_H, FIN_W));		btm.y = 3;				var left = addChild( getFin( FIN_W, FIN_H));		left.x = -FIN_W - 3;				var right = addChild( getFin(FIN_W, FIN_H));		right.x = 3;			}	function getFin( w:Number, h:Number) : Shape {		var fin:Shape = new Shape();		fin.graphics.beginFill( 0xffffff);		fin.graphics.drawRect( 0, 0, w+2, h + 2);		fin.graphics.endFill();		fin.graphics.beginFill( 0x000000);		fin.graphics.drawRect( 1, 1, w, h);		fin.graphics.endFill();		return fin;	}}class IconTxt extends Sprite {	private const H:Number = 10;	private const W:Number = 1;	public function IconTxt() {		var line = addChild( getLine( W, H));		line.y = 1;	}	function getLine( w:Number, h:Number) : Shape {		var line:Shape = new Shape();		line.graphics.beginFill( 0xffffff);		line.graphics.drawRect( 0, 0, w+2, h + 2);		line.graphics.endFill();		line.graphics.beginFill( 0x000000);		line.graphics.drawRect( 1, 1, w, h);		line.graphics.endFill();		return line;	}}