package window.whiteboard.toolchip {	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import flash.text.*;	import flash.errors.*;	import window.whiteboard.*;	import fl.controls.*;	import fl.events.*;	import flash.text.TextField;	import window.whiteboard.slide.PaintParts;	import window.whiteboard.slide.PaintPartsData;	import window.TitleBar;		public class SimpleToolModeDetail extends Sprite {		static public const CHANGE:String = "Change";				// 共通パラメータ		public var tool_name:String;				// 各パラメータ		public var livePointerStatus:Boolean;		public var linecolor:uint;		public var lineweight:int;		public var fillcolor:uint;		public var linealpha:Number;		public var fillalpha:Number;		public var fontsize:Number;		public var fontname:String;		public var fontbold:Boolean;				private var m_pointerChk:CheckBox = null;		private var m_lineCp:ColorPicker; // 線の色		private var m_lineweightCombo:ComboBox; // 線の太さ		private var m_fontCombo:ComboBox; // フォント名		private var m_fontsizeCombo:ComboBox; // フォントサイズ		private var m_fontcolorCP:ColorPicker; // フォント色				private const CP_SCALE:Number = 1.1;		private var m_posi_x:Number;						public function SimpleToolModeDetail( tool_name:String) {						this.tool_name = tool_name;						var posi_x = 0;						switch( tool_name) {				case WhiteboardContainer.TOOL_ARROW:					m_pointerChk = CheckBox( addChild( new CheckBox()));					m_pointerChk.label = ToolModeDetail.LABEL_POINTER_CHK;					m_pointerChk.textField.autoSize = TextFieldAutoSize.LEFT;					m_pointerChk.setSize( m_pointerChk.textField.textWidth + 20, 22);					m_pointerChk.y = 5;					m_pointerChk.addEventListener( Event.CHANGE, function( e:Event) { livePointerStatus = m_pointerChk.selected; dispatchEvent( new Event( CHANGE));});					posi_x = m_pointerChk.width;					break;				case WhiteboardContainer.TOOL_PENCIL:				case WhiteboardContainer.TOOL_SMOOTH:				case WhiteboardContainer.TOOL_LINE:				case WhiteboardContainer.TOOL_SQUARE:				case WhiteboardContainer.TOOL_CIRCLE:				case WhiteboardContainer.TOOL_ERASER:									// 線の色　カラーピッカー生成					m_lineCp = ColorPicker( addChild( new ColorPicker()));					m_lineCp.scaleX = m_lineCp.scaleY = CP_SCALE;					m_lineCp.x = posi_x;					m_lineCp.y = ( TitleBar.H - m_lineCp.height) / 2;										posi_x += 30; // 適当										/*					cp0.colors = CP_COLORS;					cp0.scaleX = cp0.scaleY = CP_SCALE;					cp0.setStyle("columnCount", CP_COLORS.length); 					cp0.setStyle("swatchWidth", CP_SIZE); 					cp0.setStyle("swatchHeight", CP_SIZE); 					cp0.setStyle("swatchPadding", 1); 					cp0.setStyle("backgroundPadding", 3); 					cp0.y = 5;					*/					m_lineCp.addEventListener( ColorPickerEvent.CHANGE, function( e:*){ linecolor = m_lineCp.selectedColor; dispatchEvent( new Event( CHANGE));});										// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);					m_lineCp.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);														// 線の太さ					m_lineweightCombo = ComboBox( addChild( new ComboBox()));					m_lineweightCombo.width = 55;					m_lineweightCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);					m_lineweightCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);										m_lineweightCombo.x = posi_x;					m_lineweightCombo.y = ( TitleBar.H - m_lineweightCombo.height) / 2;					posi_x += m_lineweightCombo.width;										m_lineweightCombo.addEventListener( Event.CHANGE,						function( e:*){							if( ! m_lineweightCombo.selectedItem.data) return;							lineweight = m_lineweightCombo.selectedItem.data;							dispatchEvent( new Event( CHANGE));						});										break;									case WhiteboardContainer.TOOL_TEXT:					// フォント					m_fontCombo = ComboBox( addChild( new ComboBox()));					m_fontCombo.width = 55;					m_fontCombo.x = posi_x;					m_fontCombo.y = ( TitleBar.H - m_fontCombo.height) / 2;					posi_x += 60; // 適当										/*					m_fontCombo.y = 5;					var fontnameArr:Array = Main.CONF.getFontnameArr();					if( fontnameArr != null) {						for each( var fname in fontnameArr) {							m_fontCombo.addItem( { label:fname, data:fname});						}					}					// ドロップダウンリストのテキストの長さに基づいて dropdownWidth プロパティを設定					var maxLength:Number = 0;					var i:uint;					for (i = 0; i < m_fontCombo.length; i++) {						m_fontCombo.selectedIndex = i;						m_fontCombo.drawNow();						var currText:String = m_fontCombo.text;						var currWidth:Number = m_fontCombo.textField.textWidth;						maxLength = Math.max(currWidth, maxLength);					}					m_fontCombo.dropdownWidth = maxLength + 20;										*/										/*m_fontsizeCombo = ComboBox( addChild( new ComboBox()));					m_fontsizeCombo.y = m_fontCombo.y + m_fontCombo.height + 5;					m_fontsizeCombo.width = 50;					m_fontsizeCombo.editable = true;					m_fontsizeCombo.restrict = "0-9";*/					/*					m_fontsizeCombo.addItem( { label:"60px", data:60});					m_fontsizeCombo.addItem( { label:"50px", data:50});					m_fontsizeCombo.addItem( { label:"40px", data:40});					m_fontsizeCombo.addItem( { label:"30px", data:30});					m_fontsizeCombo.addItem( { label:"24px", data:24});					m_fontsizeCombo.addItem( { label:"18px", data:18});					m_fontsizeCombo.addItem( { label:"16px", data:16});					m_fontsizeCombo.addItem( { label:"15px", data:15});					m_fontsizeCombo.addItem( { label:"14px", data:14});					m_fontsizeCombo.addItem( { label:"13px", data:13});					m_fontsizeCombo.addItem( { label:"12px", data:12});					m_fontsizeCombo.addItem( { label:"11px", data:11});					m_fontsizeCombo.addItem( { label:"10px", data:10});					m_fontsizeCombo.addItem( { label:"9px", data:9});					*/										// フォントの色　カラーピッカー生成					m_fontcolorCP = ColorPicker( addChild( new ColorPicker()));					m_fontcolorCP.scaleX = m_fontcolorCP.scaleY = CP_SCALE;					m_fontcolorCP.x = posi_x;					m_fontcolorCP.y = ( TitleBar.H - m_fontcolorCP.height) / 2;					posi_x += 30; // 適当										// フォントサイズ					m_fontsizeCombo = ComboBox( addChild( new ComboBox()));					m_fontsizeCombo.width = 55;					m_fontsizeCombo.x = posi_x;					m_fontsizeCombo.y = ( TitleBar.H - m_fontsizeCombo.height) / 2;					posi_x += m_fontsizeCombo.width;										/*					m_fontcolorCP.colors = CP_COLORS;					m_fontcolorCP.scaleX = m_fontcolorCP.scaleY = CP_SCALE;					m_fontcolorCP.setStyle("columnCount", CP_COLORS.length); 					m_fontcolorCP.setStyle("swatchWidth", CP_SIZE); 					m_fontcolorCP.setStyle("swatchHeight", CP_SIZE); 					m_fontcolorCP.setStyle("swatchPadding", 1); 					m_fontcolorCP.setStyle("backgroundPadding", 3); 					//m_fontcolorCP.setStyle("textPadding", 7);					m_fontcolorCP.x = 25;					m_fontcolorCP.y = m_fontsizeCombo.y + m_fontsizeCombo.height + 5;					*/										// 初期値を選択					//initToolText();					// リスナを設定					//initToolTextListener();										m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);					m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);					m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);					m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);					m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);					m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);										m_fontCombo.addEventListener( Event.CHANGE,							function( e:*){								if( ! m_fontsizeCombo.selectedItem.data) return;								fontname = m_fontCombo.selectedItem.data;								dispatchEvent( new Event( CHANGE));							});					m_fontsizeCombo.addEventListener( ComponentEvent.ENTER,							function( e:*){								fontsize = Number( m_fontsizeCombo.text.replace(/[^0-9]/g, ""));								dispatchEvent( new Event( CHANGE));							});					m_fontsizeCombo.addEventListener( Event.CHANGE,							function( e:*){								if( ! m_fontsizeCombo.selectedItem.data) return;								fontsize = Number( m_fontsizeCombo.selectedItem.data);								dispatchEvent( new Event( CHANGE));							});					m_fontcolorCP.addEventListener( ColorPickerEvent.CHANGE, function( e:*){												   fillcolor = m_fontcolorCP.selectedColor;												   dispatchEvent( new Event( CHANGE));});					break;				default: 					throw ( new Error("SimpleToolModeDetail ERROR:["+tool_name+"] is unexpected tool name."));					break;			}			m_posi_x = posi_x + 10;		}				// ToolchipBtnsの生成直後にWhiteBoardContainerからToolchipBtns経由で呼ばれる		public function init( toolModeDetail:ToolModeDetail) {						var i;						// UIの選択状態を合わせる			switch( toolModeDetail.tool_name) {				case WhiteboardContainer.TOOL_ARROW:					m_pointerChk.selected = toolModeDetail.getPointerStatus();					break;				case WhiteboardContainer.TOOL_PENCIL:				case WhiteboardContainer.TOOL_SMOOTH:				case WhiteboardContainer.TOOL_LINE:				case WhiteboardContainer.TOOL_SQUARE:				case WhiteboardContainer.TOOL_CIRCLE:					//---------------------------------------------------------------					// テキスト以外のペイントツールの場合（消しゴム除く）					//---------------------------------------------------------------					// 線の色のColorPickerのプロパティを合わせる					m_lineCp.colors = toolModeDetail.getLineColorPicker().colors;					m_lineCp.setStyle("columnCount", toolModeDetail.getLineColorPicker().getStyle("columnCount")); 					m_lineCp.setStyle("swatchWidth", toolModeDetail.getLineColorPicker().getStyle("swatchWidth")); 					m_lineCp.setStyle("swatchHeight", toolModeDetail.getLineColorPicker().getStyle("swatchHeight")); 					m_lineCp.setStyle("swatchPadding", toolModeDetail.getLineColorPicker().getStyle("swatchPadding")); 					m_lineCp.setStyle("backgroundPadding", toolModeDetail.getLineColorPicker().getStyle("backgroundPadding"));									case WhiteboardContainer.TOOL_ERASER:					//---------------------------------------------------------------					// テキスト以外のペイントツールの場合（消しゴム入れる）					//---------------------------------------------------------------					// 線の太さのComboBoxのプロパティを合わせる					m_lineweightCombo.editable = false;					for( i = toolModeDetail.getLineWeightSelector().getMin();						 i <= toolModeDetail.getLineWeightSelector().getMax();						 i += toolModeDetail.getLineWeightSelector().getDiff()) {												m_lineweightCombo.addItem( { label:String( i) + "px", data:i});					}					break;				case WhiteboardContainer.TOOL_TEXT:					//---------------------------------------------------------------					// テキストツールの場合					//---------------------------------------------------------------										// フォント名					for( i = 0; i < toolModeDetail.getFontCombo().length; i++) {						m_fontCombo.addItem( toolModeDetail.getFontCombo().getItemAt( i));					}					//m_fontCombo.dropdownWidth = toolModeDetail.getFontCombo().dropdownWidth; //うまくいかない					// ドロップダウンリストのテキストの長さに基づいて dropdownWidth プロパティを設定					var maxLength:Number = 0;					for (i = 0; i < m_fontCombo.length; i++) {						m_fontCombo.selectedIndex = i;						m_fontCombo.drawNow();						var currText:String = m_fontCombo.text;						var currWidth:Number = m_fontCombo.textField.textWidth;						maxLength = Math.max(currWidth, maxLength);					}					m_fontCombo.dropdownWidth = maxLength + 20;					   					// フォントサイズ							m_fontsizeCombo.editable = toolModeDetail.getFontsizeCombo().editable;					m_fontsizeCombo.restrict = toolModeDetail.getFontsizeCombo().restrict;					for( i = 0; i < toolModeDetail.getFontsizeCombo().length; i++) {						m_fontsizeCombo.addItem( toolModeDetail.getFontsizeCombo().getItemAt( i));					}										// フォントの色　カラーピッカー生成					m_fontcolorCP.colors = toolModeDetail.getFontcolorColorPicker().colors;					m_fontcolorCP.setStyle("columnCount", toolModeDetail.getFontcolorColorPicker().getStyle("columnCount")); 					m_fontcolorCP.setStyle("swatchWidth", toolModeDetail.getFontcolorColorPicker().getStyle("swatchWidth")); 					m_fontcolorCP.setStyle("swatchHeight", toolModeDetail.getFontcolorColorPicker().getStyle("swatchHeight")); 					m_fontcolorCP.setStyle("swatchPadding", toolModeDetail.getFontcolorColorPicker().getStyle("swatchPadding")); 					m_fontcolorCP.setStyle("backgroundPadding", toolModeDetail.getFontcolorColorPicker().getStyle("backgroundPadding")); 										break;				default: break;			}						apply( toolModeDetail);		}				// WhiteboardContainer経由でToolModeDetailの変更を反映させる用		public function apply( toolModeDetail:ToolModeDetail) {			// とりあえず全パラメータを合わせる			livePointerStatus = toolModeDetail.livePointerStatus;			linecolor = toolModeDetail.linecolor;			lineweight = toolModeDetail.lineweight;			fillcolor = toolModeDetail.fillcolor;			linealpha = toolModeDetail.linealpha;			fillalpha = toolModeDetail.fillalpha;			fontsize = toolModeDetail.fontsize;			fontname = toolModeDetail.fontname;			fontbold = toolModeDetail.fontbold;						var i;						// UIの選択状態も合わせる			switch( toolModeDetail.tool_name) {				case WhiteboardContainer.TOOL_ARROW:					m_pointerChk.selected = livePointerStatus;					break;				case WhiteboardContainer.TOOL_PENCIL:				case WhiteboardContainer.TOOL_SMOOTH:				case WhiteboardContainer.TOOL_LINE:				case WhiteboardContainer.TOOL_SQUARE:				case WhiteboardContainer.TOOL_CIRCLE:				case WhiteboardContainer.TOOL_ERASER:					//---------------------------------------------------------------					// テキスト以外のペイントツールの場合					//---------------------------------------------------------------									// 線の色を合わせる					m_lineCp.selectedColor = linecolor;										// 線の太さを合わせる					for( i = 0; i < m_lineweightCombo.length; i++) {						if( int( Object( m_lineweightCombo.getItemAt( i)).data) == lineweight) {							m_lineweightCombo.selectedItem = m_lineweightCombo.getItemAt( i);							break;						}					}					break;								case WhiteboardContainer.TOOL_TEXT:					//---------------------------------------------------------------					// テキストツールの場合					//---------------------------------------------------------------										// テキストの色を合わせる					m_fontcolorCP.selectedColor = fillcolor;										// フォント名を合わせる					for( i = 0; i < m_fontCombo.length; i++) {						if( String( Object( m_fontCombo.getItemAt( i)).data) == fontname) {							m_fontCombo.selectedItem = m_fontCombo.getItemAt( i);							break;						}					}															// フォントサイズを合わせる					for( i = 0; i < m_fontsizeCombo.length; i++) {						if( Number( Object( m_fontsizeCombo.getItemAt( i)).data) == fontsize) {							m_fontsizeCombo.selectedItem = m_fontsizeCombo.getItemAt( i);							break;						}					}										break;				default: break;			}		}				public function setAuthority( b:Boolean) {			if( b) {				if( m_pointerChk != null) {					m_pointerChk.enabled = true;				}							} else {				if( m_pointerChk != null) {					m_pointerChk.selected = false;					m_pointerChk.enabled = false;				}							}		}				function onItemRollOut( e:*) {			WhiteboardContainer.CURSOR_BUSY = Main.DROP_OPENED = false;		}		function onItemRollOver( e:*) {			WhiteboardContainer.CURSOR_BUSY = Main.DROP_OPENED = true;		}				// テキストペイントパーツがダブルクリックされたとき、		// WhiteboardContainer経由でToolchipContainer:setTextToolModeDetail()から呼ばれる		// 強制的にそのテキストペイントパーツの内容と合わせる		public function set( ppd:PaintPartsData) {						removeToolTextListener();						fillcolor = ppd.fillcolor;			fontsize = ppd.fontsize;			fontname = ppd.fontname;			fontbold = ppd.fontbold;						initToolText();			initToolTextListener();		}				function initToolText() {			// フォント名のコンボボックスの選択状態を変更			var i:uint;			for( i = 0; i < m_fontCombo.length; i++) {				if( String( Object( m_fontCombo.getItemAt( i)).data) == fontname) {					m_fontCombo.selectedItem = m_fontCombo.getItemAt( i);					break;				}			}			// フォントサイズのコンボボックスの選択状態を変更			for( i = 0; i < m_fontsizeCombo.length; i++) {				if( Number( Object( m_fontsizeCombo.getItemAt( i)).data) == Number( fontsize)) {					m_fontsizeCombo.selectedItem = m_fontsizeCombo.getItemAt( i);					break;				}			}						m_fontcolorCP.selectedColor = fillcolor;		}		function initToolTextListener() {			m_fontCombo.addEventListener( Event.CHANGE,					function( e:*){						if( ! m_fontsizeCombo.selectedItem.data) return;						fontname = m_fontCombo.selectedItem.data;						dispatchEvent( new Event( CHANGE));					});			m_fontsizeCombo.addEventListener( ComponentEvent.ENTER,					function( e:*){						fontsize = Number( m_fontsizeCombo.text);						dispatchEvent( new Event( CHANGE));					});			m_fontsizeCombo.addEventListener( Event.CHANGE,					function( e:*){						if( ! m_fontsizeCombo.selectedItem.data) return;						fontsize = Number( m_fontsizeCombo.selectedItem.data);						dispatchEvent( new Event( CHANGE));					});			m_fontcolorCP.addEventListener( ColorPickerEvent.CHANGE, function( e:*){										   fillcolor = m_fontcolorCP.selectedColor;										   dispatchEvent( new Event( CHANGE));});									// WbSlideのonEnterFrame()のカーソル切り替え表示時に通常のカーソルがでるように			m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OUT, onItemRollOut);			m_fontcolorCP.addEventListener( ColorPickerEvent.ITEM_ROLL_OVER, onItemRollOver);			m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);			m_fontCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);			m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut);			m_fontsizeCombo.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver);							}		function removeToolTextListener() {			m_fontCombo.removeEventListener( Event.CHANGE, arguments.callee);			m_fontsizeCombo.removeEventListener( ComponentEvent.ENTER, arguments.callee);			m_fontsizeCombo.removeEventListener( Event.CHANGE, arguments.callee);			m_fontcolorCP.removeEventListener( ColorPickerEvent.CHANGE, arguments.callee);		}		public function getViewWidth() : Number {			return m_posi_x;		}			}}