package window.whiteboard.slide {	import flash.display.*;	import flash.events.*;	import flash.net.*;	import com.hurlant.crypto.Crypto;	import com.hurlant.crypto.symmetric.*;	import com.hurlant.crypto.hash.*;	import com.hurlant.util.Hex;	import flash.utils.ByteArray;		// ライブポインタを表示するコンテナ。	public class LivePointerContainer extends Sprite {		private var m_myCircle:Shape;		private var m_arrowHash:Object;		private var m_soConnected:Boolean = false;		//private var m_tmp:String  = "";				private var so:SharedObject = null;				public function LivePointerContainer() {			m_myCircle = Shape( addChild ( new Shape()));			m_myCircle.graphics.lineStyle( 3, 0x000000, 0.3);			m_myCircle.graphics.drawCircle( 0, 0, 7);			m_myCircle.graphics.endFill();			m_myCircle.visible = false;						m_arrowHash = new Object();		}		// 資料が切り替わる度に呼ばれる		public function initSo( objname:String, nc:NetConnection) : void {//m_tmp = objname;			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "initSo:" + objname);/*			objname = objname.replace( /?/g, "");			objname = objname.replace( /&/g, "");			objname = objname.replace( /http:/g, "");			objname = objname.replace( /%/g, "");			objname = objname.replace( /~/g, "");			objname = objname.replace( /,/g, "");			objname = objname.replace( /;/g, "");			objname = objname.replace( />/g, "");			objname = objname.replace( /#/g, "");			objname = objname.replace( / /g, "");		*/			if( so == null) {				/*				// objnameをHex文字列にしてからバイナリデータにする            	var objnameBin:ByteArray = Hex.toArray( Hex.fromString( objname));				//ハッシュアルゴリズムにMD5を指定            	var hash:IHash = Crypto.getHash( "md5");				//MD5で変換				var objnameMd5:ByteArray = hash.hash( objnameBin);				// 注意）objnameに各WbSlideのID（画像パスとか）を入れることによって、SharedObjectは各スライド固有になっている				so = SharedObject.getRemote( Hex.fromArray( objnameMd5), nc.uri, false);//alertDialog( "[" + Hex.fromArray( objnameMd5) + "]");*/				so = SharedObject.getRemote( objname, nc.uri, false);								if( so == null) {					alertDialog( "initSo: " + Main.LANG.getParam( "他のユーザとポインターを共有できません"));					return;				}								//so.fps = 0.3;//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "so.fps");			}			m_soConnected = false;			so.addEventListener( SyncEvent.SYNC, onSync);			so.connect( nc);						if( Main.CONF.isStudent( Main.CONF.UID) && Main.CONF.UID != Main.CONF.getViewUID()) {				var so_me:SharedObject = Main.CONF.getSo( Main.CONF.UID);				if( so_me != null) {					so_me.addEventListener( SyncEvent.SYNC, onSyncMySo);				} else {					//alertDialog( "Main.CONF.UID:" + Main.CONF.UID + " 録画のuid:" + Main.CONF.getViewUID());					//alertDialog( Main.LANG.getReplacedSentence( "通信エラーにより、%sさんの動画配信設定のSharedObjectを取得できませんでした", Main.CONF.getName( Main.CONF.UID)));				}			}		}		function onSyncMySo( e:SyncEvent) {			var so_me:SharedObject = e.target as SharedObject;			if( so_me.data.hash != undefined) {				if( so_me.data.hash.whiteboard) {									} else {					hideMyPointer();				}			}		}		// LiveStatusManagerからWbCon、Whiteboard、WbSlide経由で呼ばれる。		public function changeJoinStatus( uid:String, flag:Boolean) {			if( m_arrowHash[ uid] != undefined){				// 退席したにもかかわらずLivePointerがaddChildされたままだったら//if( !flag && contains( m_arrowHash[ uid])) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "退席したにもかかわらずLivePointerがaddChildされたままだった");					if( !flag && contains( m_arrowHash[ uid]) && so != null && so.data.hasOwnProperty( uid)) {					if( ( so.data[ uid].hasOwnProperty( "x") && so.data[ uid].x != -9999) 					   || ( so.data[ uid].hasOwnProperty( "y") && so.data[ uid].y != -9999)					   || ( so.data[ uid].hasOwnProperty( "visible") && so.data[ uid].visible != false)) {						so.data[ uid].x = -9999;						so.data[ uid].y = -9999;						so.data[ uid].visible = false;						so.setDirty( uid);						removeChild( m_arrowHash[ uid]); // obj.code == "change"にならないので、setDirtyした人は自分でremoveChildする					}				}			}		}		function onSync( e:SyncEvent) {			m_soConnected = true;//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "onSync");						for each( var obj in e.changeList) {//if( obj.name != undefined && obj.name != Main.CONF.UID) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", obj.name + " " + obj.code + " " + Math.random());//if( obj.name != Main.CONF.UID && obj.name != undefined) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "LivePointerContainer: " + obj.name + ","+ obj.code);//trace("LivePointerContainer: " + obj.name + ","+ obj.code);				if( obj.code == "change" && obj.name != undefined && obj.name != Main.CONF.UID) {					//var livePointer:LivePointer;					if( m_arrowHash[ obj.name] == undefined){						m_arrowHash[ obj.name] = new LivePointer( obj.name);//if( m_tmp == Main.CONF.CLASS_ID + "_liveP") if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "ライブポインタ新規作成:" + obj.name + "visible:" + so.data[ obj.name].visible);						if( so.data[ obj.name].visible) {							// ライブポインタ新規追加//alertDialog( "ライブポインタ新規追加:" + obj.name);							if( !contains( m_arrowHash[ obj.name])) addChild( m_arrowHash[ obj.name]);							m_arrowHash[ obj.name].x = so.data[ obj.name].x;							m_arrowHash[ obj.name].y = so.data[ obj.name].y;						}					} else {						if( so.data[ obj.name].visible) {//if( m_tmp == Main.CONF.CLASS_ID + "_liveP" && !contains( m_arrowHash[ obj.name])) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "ライブポインタ追加:" + obj.name);							if( !contains( m_arrowHash[ obj.name])) addChild( m_arrowHash[ obj.name]);							m_arrowHash[ obj.name].x = so.data[ obj.name].x;							m_arrowHash[ obj.name].y = so.data[ obj.name].y;//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "LivePointerContainer: " + String( m_arrowHash[ obj.name].x) + ","+ String( m_arrowHash[ obj.name].y));						} else {/*if( m_tmp == Main.CONF.CLASS_ID + "_liveP") {if( contains( m_arrowHash[ obj.name])) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "ライブポインタ削除:" + obj.name);else  if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "ライブポインタ削除済み:" + obj.name);}*/							if( contains( m_arrowHash[ obj.name])) removeChild( m_arrowHash[ obj.name]);						}					}				}			}		}		function startShowMyPointer( e:* = null) {			stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMOVE);		}		function stopShowMyPointer( e:* = null) {			stage.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMOVE);		}		public function showMyPointer() {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "showMyPointer");			m_myCircle.x = this.mouseX;			m_myCircle.y = this.mouseY;			m_myCircle.visible = true;						if( stage) startShowMyPointer();						// 表示中でも、Whiteboardのm_targetSlide.removeSelectBoxTemporary()で			// スライドのコンテナから一時的にremoveChildされることがあるので、			// 再びaddChildされたとき用にaddEventListenerしとく			addEventListener( Event.ADDED_TO_STAGE, startShowMyPointer);			addEventListener( Event.REMOVED_FROM_STAGE, stopShowMyPointer);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", m_soConnected);			if(! m_soConnected) return;						if( so != null) {				var hash:Object;				if( !so.data.hasOwnProperty( Main.CONF.UID)) {					so.data[ Main.CONF.UID] = new Object();					hash = new Object();				} else {					hash = so.data[ Main.CONF.UID] as Object;					if( hash == null) hash = new Object();				}				if( ( !so.data[ Main.CONF.UID].hasOwnProperty( "x") || so.data[ Main.CONF.UID].x != m_myCircle.x)				   || ( !so.data[ Main.CONF.UID].hasOwnProperty( "y") || so.data[ Main.CONF.UID].y != m_myCircle.y )				   || ( !so.data[ Main.CONF.UID].hasOwnProperty( "visible") || so.data[ Main.CONF.UID].visible != true) ) {					hash[ 'x'] = m_myCircle.x;					hash[ 'y'] = m_myCircle.y;					hash[ 'visible'] = true;					so.data[ Main.CONF.UID] = hash;					so.setDirty( Main.CONF.UID);				}//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "so.setDirty");			} else {				alertDialog( so + " " + Main.LANG.getParam( "他のユーザとポインターを共有できません"));			}		}		public function hideMyPointer() {//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "hideMyPointer");			if( stage) stopShowMyPointer();						removeEventListener( Event.ADDED_TO_STAGE, startShowMyPointer);								  			m_myCircle.visible = false;						if(! m_soConnected) return;						if( so != null) {				var hash:Object;				if( !so.data.hasOwnProperty( Main.CONF.UID)) {					so.data[ Main.CONF.UID] = new Object();					hash = new Object();				} else {					hash = so.data[ Main.CONF.UID] as Object;					if( hash == null) hash = new Object();				}				if( ( so.data[ Main.CONF.UID].hasOwnProperty( "x") && so.data[ Main.CONF.UID].x != -9999) 				   || ( so.data[ Main.CONF.UID].hasOwnProperty( "y") && so.data[ Main.CONF.UID].y != -9999)				   || ( so.data[ Main.CONF.UID].hasOwnProperty( "visible") && so.data[ Main.CONF.UID].visible != false) ) {					hash[ 'x'] = -9999;					hash[ 'y'] = -9999;					hash[ 'visible'] = false;					so.data[ Main.CONF.UID] = hash;					so.setDirty( Main.CONF.UID);				}			}		}		function onMouseMOVE( e:MouseEvent) {			m_myCircle.x = this.mouseX;			m_myCircle.y = this.mouseY;						if(! m_soConnected) return;						if( so != null) {				var hash:Object;				if( !so.data.hasOwnProperty( Main.CONF.UID)) {					so.data[ Main.CONF.UID] = new Object();					hash = new Object();				} else {					hash = so.data[ Main.CONF.UID] as Object;					if( hash == null) hash = new Object();				}				hash[ 'x'] = m_myCircle.x;				hash[ 'y'] = m_myCircle.y;				hash[ 'visible'] = true;				so.data[ Main.CONF.UID] = hash;				so.setDirty( Main.CONF.UID);				//so.flush();//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", Main.CONF.UID + "(" + m_myCircle.x + "," + m_myCircle.y + ")");			}		}		function alertDialog( str) {			Main.addErrMsg( "LivePointerContainer: " + String( str));		}	}}