package window.whiteboard {	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import flash.events.*;	import window.video.WbVideo;	import window.TitleBar;	import caurina.transitions.*;	// 背景を資料、カメラ映像、無地から選択する用（講師用、withカメラ背景のサイズ選択コンボボックス）	public class BgSelector_lec extends BgSelector {				private var m_comboCam:ComboBox;				//private const MAX_W_COMBO_DROP_CAM = 100;				private var m_radioCam_close_tx:Number;		private var m_radioCam_open_tx:Number;		private var m_lock:Boolean = false;		 		public function BgSelector_lec() {			super();						m_radioCam_close_tx = m_radioCam.x;			m_radioCam_open_tx = m_docStepper.x;									m_comboCam = ComboBox( addChild( new ComboBox()));			m_comboCam.width = 80;			m_comboCam.x = m_radioCam_open_tx + 30 + m_radioCam.textField.width; // 適当			m_comboCam.y = ( TitleBar.H - m_comboCam.height) / 2;			m_comboCam.enabled = false;			m_comboCam.dropdown.addEventListener( MouseEvent.ROLL_OUT , onItemRollOut_combo);			m_comboCam.dropdown.addEventListener( MouseEvent.ROLL_OVER , onItemRollOver_combo);						for( var i = 0; i < BgSelector.STREAM.length; i++) {				var obj:Object = Object( BgSelector.STREAM[ i]);				var item = { label: obj.camerawidth + '×' + obj.cameraheight, data:obj};				m_comboCam.addItem( item);				if( m_comboCam.selectedItem == null) m_comboCam.selectedItem = item;			}			//resetComboWidth( m_comboCam, MAX_W_COMBO_DROP_CAM);			m_comboCam.visible = false;						// ラジオボタンの上に透明のクリッカブル			m_radioImgClickarea.addEventListener( MouseEvent.CLICK, function( e:*) {										hideCamCombo();										});		}		override protected function onSync1st( e:SyncEvent) {//alertDialog( 'onSync1st: ' + so_wb.data.stream);			if( so_wb.data.stream == undefined) {				so_wb.data.stream = STREAM[ 0];				so_wb.setDirty( 'stream');			} else {				onSync( e);			}			so_wb.removeEventListener( SyncEvent.SYNC, onSync1st);			so_wb.addEventListener( SyncEvent.SYNC, onSync);						m_comboCam.addEventListener( MouseEvent.ROLL_OVER, onRollOver_comboCam);			function onRollOver_comboCam( e:*) {				m_comboCam.addEventListener( Event.CHANGE, onComboCamChanged);			}			if( ! m_lock) m_comboCam.enabled = true;		}				function onSync( e:SyncEvent) {			if( so_wb.data.stream == undefined) return;						var enabled_keep:Boolean = m_comboCam.enabled;			m_comboCam.enabled = true;			for( var i = 0; i < m_comboCam.length; i++) {				if( isEqualObj( m_comboCam.getItemAt( i).data, so_wb.data.stream)) {					if( m_comboCam.selectedIndex != i) {						m_comboCam.selectedItem = m_comboCam.getItemAt( i);					}					break;				}			}			m_comboCam.enabled = enabled_keep;		}				function isEqualObj( a:Object, b:Object) : Boolean {			for( var key:String in a) {				if( a[ key] != b[ key]) return false;			}			return true;		}				function onComboCamChanged( e:Event) {			if( so_wb == null || so_wb.data.stream == undefined) {				Main.addErrMsg( Main.LANG.getParam( "通信エラーにより、変更を反映できませんでした"));				return;			}			if( m_radioCam.selected) {				if( m_comboCam.selectedItem != null) {					so_wb.data.stream = m_comboCam.selectedItem.data;					so_wb.setDirty( 'stream');				}			}		}				function hideCamCombo() {			m_comboCam.visible = false;			m_comboCam.enabled = false;			//Tweener.removeTweens( m_radioCam);			//Tweener.addTween( m_radioCam, { x:m_radioCam_close_tx, time:0.25, onComplete: radioCamClosed});			m_radioCam.x = m_radioCam_close_tx;			radioCamClosed();		}		function showCamCombo() {			m_docStepper.visible = false;			if( ! m_lock) m_comboCam.enabled = true;			//Tweener.removeTweens( m_radioCam);			//Tweener.addTween( m_radioCam, { x:m_radioCam_open_tx, time:0.25, onComplete: radioCamOpened});			m_radioCam.x = m_radioCam_open_tx;			radioCamOpened();		}				// MainからWhiteboardContainer経由で呼ばれる。		// WBユーザがログインしたときにfalseに設定され、WBユーザが退席したときにtrueに設定される		public function lockCam( b:Boolean) {			m_lock = b;			if( b) {				m_comboCam.enabled = false;				m_radioCam.enabled = false;			} else {				m_comboCam.enabled = true;				m_radioCam.enabled = true;			}		}						override protected function onRadioImgChanged( e:Event) {			super.onRadioImgChanged( e);			if( m_radioImg.selected) hideCamCombo();		}		override protected function onRadioCamChanged( e:Event) {			super.onRadioCamChanged( e);			if( m_radioCam.selected) showCamCombo();		}		override protected function onRadioPlainChanged( e:Event) {			super.onRadioPlainChanged( e);			if( m_radioPlain.selected) m_comboCam.enabled = false;		}				override public function setSelector( bgtype:String, param) {			super.setSelector( bgtype, param);						switch( bgtype) {				case WhiteboardContainer.BGTYPE_IMG :					hideCamCombo();					break;				case WhiteboardContainer.BGTYPE_CAMERA :					showCamCombo();					break;				default :					m_comboCam.enabled = false;					break;			}		}				function radioCamClosed() {			m_docStepper.visible = true;		}		function radioCamOpened() {			m_comboCam.visible = true;		}	}}