package window.whiteboard {	import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.events.*;	// 背景資料一覧から選択する用	public class DocStepper_doubleClickType extends Sprite {		static public const TEXT_CLICKED:String = DocStepper.TEXT_CLICKED;		static public const FIRST_CLICKED:String = DocStepper.FIRST_CLICKED;		static public const BACK_CLICKED:String = DocStepper.BACK_CLICKED;		static public const NEXT_CLICKED:String = DocStepper.NEXT_CLICKED;		static public const LAST_CLICKED:String = DocStepper.LAST_CLICKED;		private var m_docText:TextField;		private var DEFAULT_TEXT = "---";		private const TEXT_PAD = 3;		private var DEFAULT_TEXT_W:Number;		private const BG_ALPHA = 0.5;		private const ICON_ALPHA = 0.2;		 		public function DocStepper_doubleClickType() {						DEFAULT_TEXT = Main.LANG.getParam( "資料を選択");			init_size();						Sprite( _clickBack).doubleClickEnabled = Sprite( _clickNext).doubleClickEnabled = true;						DEFAULT_TEXT_W = _clickText.width;						m_docText = TextField( addChild( new TextField()));			m_docText.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0x000000);			m_docText.text = DEFAULT_TEXT;			m_docText.height = m_docText.textHeight + 4;									replace();						// hoverの青ラインを一番上に			addChild( _hoverBack); addChild( _hoverText); addChild( _hoverNext);			// icoonを一番上に			addChild( _iconBack); addChild( _iconNext);			// clickを一番上に			addChild( _clickBack); addChild( _clickText); addChild( _clickNext);			_clickBack.alpha = _clickText.alpha = _clickNext.alpha = 0;									setEnableText();			setEnableBack( false);			setEnableNext( false);		}				function init_size() {			_clickBack.width = _clickNext.width = 30;			_hoverBack.width = _bgBack.width = _clickBack.width;			_hoverNext.width = _bgNext.width = _clickNext.width;		}				public function reset() {			m_docText.text = DEFAULT_TEXT;			setEnableBack( false);			setEnableNext( false);		}				public function setTextWidth( _w:Number) {						// Testエリアのサイズを調整			var scale_x = _w / DEFAULT_TEXT_W;			_clickText.scaleX = _bgText.scaleX = _hoverText.scaleX = scale_x;						replace();		}				public function setText( str:String) { m_docText.text = str;}		function setEnableText() {			_hoverText.visible = false;			_bgText.alpha = BG_ALPHA;			_clickText.addEventListener( MouseEvent.CLICK, function(e:*){ dispatchEvent( new Event( TEXT_CLICKED))});			_clickText.addEventListener( MouseEvent.ROLL_OVER, rollOverText);			_clickText.addEventListener( MouseEvent.ROLL_OUT, rollOutText);		}		function rollOverText( e:MouseEvent) { rollOver( _bgText, _hoverText); }		function rollOutText( e:MouseEvent) { rollOut( _bgText, _hoverText); }		public function setEnableBack( b:Boolean) {			_hoverBack.visible = false;			_bgBack.alpha = BG_ALPHA;			if( b) {				_iconBack.alpha = 1;				_clickBack.addEventListener( MouseEvent.DOUBLE_CLICK, click1st);				_clickBack.addEventListener( MouseEvent.CLICK, clickBack);				_clickBack.addEventListener( MouseEvent.ROLL_OVER, rollOverBack);				_clickBack.addEventListener( MouseEvent.ROLL_OUT, rollOutBack);			} else {				_iconBack.alpha = BG_ALPHA;				_clickBack.removeEventListener( MouseEvent.DOUBLE_CLICK, click1st);				_clickBack.removeEventListener( MouseEvent.CLICK, clickBack);				_clickBack.removeEventListener( MouseEvent.ROLL_OVER, rollOverBack);				_clickBack.removeEventListener( MouseEvent.ROLL_OUT, rollOutBack);			}		}		function click1st( e:MouseEvent) { dispatchEvent( new Event( FIRST_CLICKED));}		function clickBack( e:MouseEvent) { dispatchEvent( new Event( BACK_CLICKED));}		function rollOverBack( e:MouseEvent) { rollOver( _bgBack, _hoverBack); }		function rollOutBack( e:MouseEvent) { rollOut( _bgBack, _hoverBack); }		public function setEnableNext( b:Boolean) {			_hoverNext.visible = false;			_bgNext.alpha = BG_ALPHA;			if( b) {				_iconNext.alpha = 1;				_clickNext.addEventListener( MouseEvent.CLICK, clickNext);				_clickNext.addEventListener( MouseEvent.ROLL_OVER, rollOverNext);				_clickNext.addEventListener( MouseEvent.ROLL_OUT, rollOutNext);				_clickNext.addEventListener( MouseEvent.DOUBLE_CLICK, clickLast);			} else {				_iconNext.alpha = BG_ALPHA;				_clickNext.removeEventListener( MouseEvent.CLICK, clickNext);				_clickNext.removeEventListener( MouseEvent.ROLL_OVER, rollOverNext);				_clickNext.removeEventListener( MouseEvent.ROLL_OUT, rollOutNext);				_clickNext.removeEventListener( MouseEvent.DOUBLE_CLICK, clickLast);			}		}		function clickNext( e:MouseEvent) { dispatchEvent( new Event( NEXT_CLICKED));}		function rollOverNext( e:MouseEvent) { rollOver( _bgNext, _hoverNext); }		function rollOutNext( e:MouseEvent) { rollOut( _bgNext, _hoverNext); }		function clickLast( e:MouseEvent) { dispatchEvent( new Event( LAST_CLICKED));}		function rollOver( bg, hover) {			bg.alpha = 1;			hover.visible = true;		}		function rollOut( bg, hover) {			bg.alpha = BG_ALPHA;			hover.visible = false;		}				function replace() {			// Backボタン			var posi_x = _clickBack.width / 2;			_clickBack.x = _bgBack.x = _hoverBack.x = _iconBack.x = posi_x;			_clickBack.y = _bgBack.y = _hoverBack.y = _iconBack.y = _bgBack.height / 2;			// Testエリア			posi_x += _clickBack.width / 2 + _clickText.width / 2;			_clickText.x = _bgText.x = _hoverText.x = posi_x;			_clickText.y = _bgText.y = _hoverText.y = _bgText.height / 2;			m_docText.x = _clickText.x - _clickText.width / 2 + TEXT_PAD;			m_docText.y = ( _clickText.height - m_docText.height) / 2;			m_docText.width = _clickText.width - TEXT_PAD;						// Nextボタン			posi_x += _clickText.width / 2 + _clickNext.width / 2;			_clickNext.x = _bgNext.x = _hoverNext.x = _iconNext.x = posi_x;			_clickNext.y = _bgNext.y = _hoverNext.y = _iconNext.y = _bgNext.height / 2;					}			}}