package window.whiteboard.imgdoc {    import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;    import flash.filters.*;	import flash.utils.unescapeMultiByte;	import common.*;		public class Dir extends Sprite {		static public const HOVERED_STATUS_OFF:uint = 0;		static public const HOVERED_STATUS_ON:uint = 1;		static public const HOVERED_STATUS_ON_UPPER:uint = 2;		static public const HOVERED_STATUS_ON_UNDER:uint = 3;		private var m_hoveredStatus:uint = HOVERED_STATUS_OFF;		private const BASE_COLOR:uint = 0xffffff;		private const SELECTED_COLOR:uint = 0xa9ddfd;		private const HOVER_COLOR:uint = 0xcccccc;		private const ICON_PAD = 10;		protected const THUMB_PAD = 5;		private const THUMB_W_MAX = Thumb.W_MAX + ICON_PAD * 2; // 90 はフォルダアイコンの横幅		protected var W:Number = 1;		protected const TXT_H:Number = 25;		public var sortId:Number = Number.MAX_VALUE;		protected var m_icon;		protected var m_thumb:Thumb;		private var m_text:TextField;		private var m_tf_text:TextFormat;		private var m_tf_thumb:TextFormat;				protected var m_btnPlus;		private var m_btnMinus;		private var m_opened:Boolean = false;		protected var m_spread:Boolean = false;		protected var m_listtype:String = FolderContainer.INIT_LISTTYPE;		protected var m_clickArea:Sprite;		private var m_upperLine:InsertLine;		private var m_underLine:InsertLine;		private var m_selected:Boolean = false;		protected var m_container:Sprite;		protected var m_depth:uint;				public function Dir( name:String, depth:uint) {			//ROOT_DIR = Main.CONF.getParam( 'LIVECLASS_DOC_URL') + Main.CONF.CLASS_ID + '/';			m_depth = depth;			this.name = name;						m_container = Sprite( addChild( new Sprite()));			m_icon = IconDir( m_container.addChild( new IconDir()));			m_icon.y = ( TXT_H - m_icon.height) / 2;			m_thumb = Thumb( m_container.addChild( new Thumb()));			m_thumb.x = m_thumb.y = ICON_PAD;						m_tf_text = new TextFormat( Main.CONF.getMainFont(), 10, 0x333333, null, null, null, null, null, "left");			m_tf_thumb = new TextFormat( Main.CONF.getMainFont(), 10, 0x333333, null, null, null, null, null, "center");						m_text = TextField( m_container.addChild( new TextField()));			//m_text.background = true;			//m_text.backgroundColor = 0xcc0000;			m_text.text = unescapeMultiByte( name);			m_text.height = m_text.textHeight + 4;			m_upperLine = InsertLine( addChild( new InsertLine( 0xf2f2f2)));			m_underLine = InsertLine( addChild( new InsertLine( 0xd9d9d9)));			m_upperLine.x = m_underLine.x = 1;			m_upperLine.y = 0.5;			m_underLine.y = TXT_H - 0.5;						m_clickArea = Sprite( addChild( new Sprite()));			m_clickArea.graphics.beginFill( 0, 0);			m_clickArea.graphics.drawRect( 0, 0, 1, 1);			m_clickArea.graphics.endFill();			m_clickArea.buttonMode = true;			m_clickArea.doubleClickEnabled = true;			m_clickArea.addEventListener( MouseEvent.CLICK, onClick);			m_clickArea.addEventListener( MouseEvent.DOUBLE_CLICK, onDoubleClick);			m_clickArea.addEventListener( MouseEvent.MOUSE_DOWN, onMouseDOWN);			//addEventListener( MouseEvent.CLICK, function(e:*){ trace( "-------" + e.target);});									var _iconPlus = new iconPlus();			var _iconMinus = new iconMinus();			_iconPlus.scaleX = _iconPlus.scaleY = _iconMinus.scaleX = _iconMinus.scaleY = 0.7;			m_btnPlus = addChild( new IconPartsBtn( _iconPlus, 18, 18));			m_btnMinus = addChild( new IconPartsBtn( _iconMinus, 18, 18));			m_btnPlus.setEnabled( true);			m_btnMinus.setEnabled( true);			m_btnPlus.addEventListener( MouseEvent.CLICK, onPlusClick);			m_btnMinus.addEventListener( MouseEvent.CLICK, onMinusClick);			m_btnPlus.visible = m_btnMinus.visible = false;			m_clickArea.addEventListener( MouseEvent.ROLL_OVER, onClickAreaRollOver);						addEventListener( Event.ADDED_TO_STAGE,							 function ( e:Event) {								 if(( parent as Dir) != null) {									 setListtype( Dir( parent).getListtype());									 setViewWidth( Dir( parent).getViewWidth());								 }							 });						visible = false;		}				// テキスト一覧のときは問答無用にtrue。		// サムネイル一覧のときに、今表示していないものに関してはfalseにする		public function show( b:Boolean) {			m_container.visible = b;			m_clickArea.visible = b;			if( b) visible = true;		}		function onClickAreaRollOver( e:MouseEvent) {			m_btnMinus.visible = true;			if( m_listtype == ListTypeBtn.TEXT_CLICKED) m_btnPlus.visible = true;			else  m_btnPlus.visible = false;			if( stage) stage.addEventListener( MouseEvent.MOUSE_MOVE, onClickAreaMouseMove);		}		function onClickAreaMouseMove( e:MouseEvent) {			if( m_clickArea.mouseX < 0 || m_clickArea.mouseX > m_clickArea.width				|| m_clickArea.mouseY < 0 || m_clickArea.mouseY > m_clickArea.height) {				m_btnPlus.visible = m_btnMinus.visible = false;				if( stage) stage.removeEventListener( MouseEvent.MOUSE_MOVE, onClickAreaMouseMove);			}		}		public function getCache4Drag() : BitmapData {			var tmp:Sprite = new Sprite();			tmp.addChild( m_icon);			tmp.addChild( m_thumb);			tmp.addChild( m_text);			tmp.cacheAsBitmap = true;			var rect:Rectangle = tmp.getBounds( tmp);			var bmpdata:BitmapData = new BitmapData( rect.width, rect.height, true, 0x00000000);			bmpdata.draw( tmp);						// 元に戻す			tmp.cacheAsBitmap = false;			m_container.addChildAt( m_text, 0);			m_container.addChildAt( m_thumb, 0);			m_container.addChildAt( m_icon, 0);			return bmpdata;		}		protected function onClick( e:MouseEvent) {			dispatchEvent( new DirEvent( DirEvent.CLICKED, this));		}		protected function onDoubleClick( e:MouseEvent) {			dispatchEvent( new DirEvent( DirEvent.DOUBLE_CLICKED, this));		}		protected function onPlusClick( e:MouseEvent) {			dispatchEvent( new DirEvent( DirEvent.PLUS_CLICKED, this));		}				protected function onMinusClick( e:MouseEvent) {			// 自分自身がディレクトリの場合、子要素のDoc全てに対してonRemoved()を発令させる			// （メモリ解放＆もしスライドに表示中だったらスライドからも削除するため）			removeChildIndirect();						dispatchEvent( new DirEvent( DirEvent.MINUS_CLICKED, this));		}		public function removeChildIndirect() {			if( this as Doc != null) return;//alertDialog( "removeChildIndirect");			for( var i = 0; i < numChildren; i++) {				var child = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					if( child as Doc != null) Doc( child).onRemoved();					else Dir( child).removeChildIndirect();				}			}					}		function onMouseDOWN( e:MouseEvent) {			if( stage) stage.addEventListener( MouseEvent.MOUSE_MOVE, onStartDrag);			m_clickArea.addEventListener( MouseEvent.MOUSE_UP, onMouseUP);		}		function onStartDrag( e:MouseEvent) {			dispatchEvent( new DirEvent( DirEvent.START_DRAG, this));			if( stage) stage.removeEventListener( MouseEvent.MOUSE_MOVE, onStartDrag);		}		function onMouseUP( e:MouseEvent) {			if( stage) stage.removeEventListener( MouseEvent.MOUSE_MOVE, onStartDrag);		}		public function select( b:Boolean) {//if(b)trace( "select---------------" , getName());			m_selected = b;			drawBase();			m_upperLine.off();			m_underLine.off();		}		function drawBase() {			m_container.graphics.clear();			var h = m_listtype == ListTypeBtn.TEXT_CLICKED ? TXT_H : getThumbTypeH();			if( m_selected) {				m_container.graphics.beginFill( SELECTED_COLOR);				m_container.graphics.drawRoundRect( 0, 0, W, h, 10);				m_container.graphics.endFill();//trace( "select ok---------------" , getName());			} else {				m_container.graphics.beginFill( BASE_COLOR);				m_container.graphics.drawRoundRect( 0, 0, W, h, 10);				m_container.graphics.endFill();			}		}				public function open( b:Boolean) {			if( m_listtype == ListTypeBtn.TEXT_CLICKED) {				m_opened = b;				visible = true;				replaceChildren( m_depth);				dispatchEvent( new Event( "height changed")); // 親DIRに知らせる			}		}						// Dir_topのspread()から呼ばれる。		// 子供を展開表示する（サムネイル表示のときのみ）		public function spreadChildren( container_w:Number) {			if( m_listtype != ListTypeBtn.THUMB_CLICKED) {				alertDialog( "ERROR: spreadChildren() is for only THUMB listtype.");				return;			}			m_spread = true;			show( false);						var tmp:Array = new Array();			var child:Dir;			for( var i = 0; i < numChildren; i++) {				child = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					tmp.push( child);				}			}			tmp.sortOn( [ "sortId", "name"], [ Array.NUMERIC]);						// 子供をサムネイル一覧として並べる										var thumb_w = THUMB_W_MAX;//W > THUMB_W_MAX ? THUMB_W_MAX : W;			var posi_x = THUMB_PAD;			var posi_y = THUMB_PAD;			var max_h = 0;			for( i = 0; i < tmp.length; i++) {				child = Dir( tmp[i]);				child.setViewWidth( thumb_w);				child.show( true);				child.x = posi_x;				child.y = posi_y;				//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", child.getName() + "(" +child.x + "," + child.y + ") " +child.parent.visible + child.visible + " "+ Math.random());				posi_x += thumb_w + THUMB_PAD;				if( max_h < child.getThumbTypeH()) max_h = child.getThumbTypeH();				if( posi_x + thumb_w > container_w) {					posi_x = THUMB_PAD;					posi_y += max_h + THUMB_PAD;				}			}					}		// Dir_topのspread()から呼ばれる。		function unspreadAllChildren_private( dir_parent:Dir) {			dir_parent.x = dir_parent.y = 0;			m_spread = false;			for( var i = 0; i < dir_parent.numChildren; i++) {				var child:Dir = dir_parent.getChildAt( i) as Dir;				if( child != null) {					child.show( false);					unspreadAllChildren_private( child);				}			}		}				// 上から置き直す。テキスト表示のときのみ		public function replaceChildren( depth:uint) {			if( m_listtype != ListTypeBtn.TEXT_CLICKED) {				alertDialog( "ERROR: replaceChildren() is for only TEXT listtype.");				return;			}			show( true);						m_depth = depth;						var tmp:Array = new Array();			var child:Dir;			for( var i = 0; i < numChildren; i++) {				child = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					tmp.push( child);				}			}			//if( m_depth == 1 && this as Doc == null) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "replaceChildren: " + name + " : "+ tmp.length + " m_opened:" + m_opened);			tmp.sortOn( [ "sortId", "name"], [ Array.NUMERIC]);			// テキスト一覧として並べる							// アイコンの位置を階層に合わせて移動			m_icon.x = m_depth * ICON_PAD;			m_text.x = m_icon.x + IconDir.W + 3;						var posi_y = TXT_H;			for( i = 0; i < tmp.length; i++) {				child = Dir( tmp[i]);				child.visible = m_opened;				child.y = posi_y;				if( m_opened) child.replaceChildren( m_depth + 1);				posi_y += child.getViewHeight();			}//if( m_depth == 1 && this as Doc == null) if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "replaceChildren: " + name + " : "+ i);		}						public function setListtype( listtype:String) {			m_listtype = listtype;			switch( m_listtype) {				case ListTypeBtn.TEXT_CLICKED :					set4Text();					break;				case ListTypeBtn.THUMB_CLICKED :					set4Thumb();					break;				default: break;			}			setListtype_private( this, listtype);		}		function setListtype_private( dir_parent, listtype:String) {			var children:Array = new Array();			for( var i = 0; i < dir_parent.numChildren; i++) {				var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					child.setListtype( listtype);					children.push( child);				}			}			// ソートし直し			/*			// Dir,DocのsortIdは、最初はファイル名で、一度ソートボタン等で操作されたら数字になる			if( String( Dir( children[0]).sortId) == String( Dir( children[0]).name)) {				children.sortOn( "name");			} else {				children.sortOn( ["sortId", "name"], [ Array.NUMERIC, Array.CASEINSENSITIVE]);			}*/		}				public function listenChildren() {			for( var i = 0; i < numChildren; i++) {				var child = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					child.addEventListener( DirEvent.CLICKED, reDispatchDirEvent);					child.addEventListener( DirEvent.DOUBLE_CLICKED, reDispatchDirEvent);					child.addEventListener( DirEvent.START_DRAG, reDispatchDirEvent);					child.addEventListener( DirEvent.STOP_DRAG, reDispatchDirEvent);					child.addEventListener( DirEvent.PLUS_CLICKED, reDispatchDirEvent);					child.addEventListener( DirEvent.MINUS_CLICKED, reDispatchDirEvent);					child.addEventListener( "height changed", onChildHeightChanged);					child.listenChildren();				}			}		}		public function removeListenChildren() {			for( var i = 0; i < numChildren; i++) {				var child = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					child.removeEventListener( DirEvent.CLICKED, reDispatchDirEvent);					child.removeEventListener( DirEvent.DOUBLE_CLICKED, reDispatchDirEvent);					child.removeEventListener( DirEvent.START_DRAG, reDispatchDirEvent);					child.removeEventListener( DirEvent.STOP_DRAG, reDispatchDirEvent);					child.removeEventListener( DirEvent.PLUS_CLICKED, reDispatchDirEvent);					child.removeEventListener( DirEvent.MINUS_CLICKED, reDispatchDirEvent);					child.removeEventListener( "height changed", onChildHeightChanged);					child.removeListenChildren();				}			}		}		function reDispatchDirEvent( e:DirEvent) {			dispatchEvent( new DirEvent( e.type, e.dir)); // ルートDirからFolderContainerに知らせる		}		function reDispatchDocEvent( e:DocEvent) {			dispatchEvent( new DocEvent( e.type, e.doc)); // ルートDirからFolderContainerに知らせる		}		function onChildHeightChanged( e:Event) {			replaceChildren( m_depth);		}				public function getName() : String { return m_text.text;}								// ルートDIRの場合FolderContainerから呼ばれる		// べつのDIRがドラッグ開始		// except_dir_arrはドラッグ中のDir（すなわち選択中のDir）の配列		public function startWatchHovered( except_dir_arr:Array) {			var except_me:Boolean = false;			for each( var dir in except_dir_arr) {				if( dir == this) except_me = true;			}			if( m_listtype == ListTypeBtn.THUMB_CLICKED && m_container.visible == false) {				except_me = true;			}			if( !except_me) {				if( stage) stage.addEventListener( MouseEvent.MOUSE_MOVE, onMouseMOVE);			}			startWatchHovered_private( this, except_dir_arr);		}		function startWatchHovered_private( dir_parent:Dir, except_dir_arr:Array) {			for( var i = 0; i < dir_parent.numChildren; i++) {				var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					child.startWatchHovered( except_dir_arr);				}			}		}		// 自分以外のDIRがドラッグ中に呼ばれる		function onMouseMOVE( e:MouseEvent) {//trace(mouseX, m_clickArea.mouseX);//trace( mouseX, mouseY);			//hover( hitTestPoint( m_clickArea.mouseX, m_clickArea.mouseY));						m_upperLine.off();			m_underLine.off();			if( m_clickArea.x < mouseX && mouseX < m_clickArea.x + m_clickArea.width && 			   m_clickArea.y < mouseY && mouseY < m_clickArea.y + m_clickArea.height) {								if( m_listtype == ListTypeBtn.TEXT_CLICKED) {					if( mouseY < m_clickArea.y + 3) {						m_upperLine.on();						m_hoveredStatus = HOVERED_STATUS_ON_UPPER;					} else if( mouseY > m_clickArea.y + m_clickArea.height - 3) {						m_underLine.on();						m_hoveredStatus = HOVERED_STATUS_ON_UNDER;					} else {						hover( true);						m_hoveredStatus = HOVERED_STATUS_ON;					}				} else {					hover( true);					m_hoveredStatus = HOVERED_STATUS_ON;				}							} else {				hover( false);				m_hoveredStatus = HOVERED_STATUS_OFF;			}		}				// べつのDIRが自分の上をドラッグ中に呼ばれる		protected function hover( b:Boolean) {			m_container.graphics.clear();			var h:Number;						if( m_listtype == ListTypeBtn.TEXT_CLICKED) {				m_icon.open( b);				h = TXT_H;			} else {				h = getThumbTypeH();			}			if( b) {				m_container.graphics.beginFill( HOVER_COLOR);				m_container.graphics.drawRoundRect( 0, 0, W, h, 10);				m_container.graphics.endFill();			} else if( m_selected) {				m_container.graphics.beginFill( SELECTED_COLOR);				m_container.graphics.drawRoundRect( 0, 0, W, h, 10);				m_container.graphics.endFill();			} else {				m_container.graphics.beginFill( BASE_COLOR);				m_container.graphics.drawRoundRect( 0, 0, W, h, 10);				m_container.graphics.endFill();			}		}		// ルートDIRの場合FolderContainerから呼ばれる		public function stopWatchHovered() {			if( stage) stage.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMOVE);			hover( false);			m_hoveredStatus = HOVERED_STATUS_OFF;			stopWatchHovered_private( this);		}		function stopWatchHovered_private( dir_parent:Dir) {			for( var i = 0; i < dir_parent.numChildren; i++) {				var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					child.stopWatchHovered();				}			}		}				// ルートDIRの場合FolderContainerから呼ばれる		public function getHoveredDir() :Dir {			if( m_hoveredStatus != HOVERED_STATUS_OFF && visible) return this;			else return getHoveredDir_private( this);		}		function getHoveredDir_private( dir_parent:Dir) :Dir {			var ret_dir:Dir;			for( var i = 0; i < dir_parent.numChildren; i++) {				var child:Dir = dir_parent.getChildAt( i) as Dir; // Docも含まれる				if( child != null) {//trace( child.getName() , child.getHoveredStatus());					ret_dir = child.getHoveredDir();				}				if( ret_dir != null) return ret_dir;			}			return null;		}				// ルートDIRの場合FolderContainerから呼ばれる		public function getSelectedChildren() : Array {			var arr:Array = new Array();			for( var i = 0; i < numChildren; i++) {				var child:Dir = getChildAt( i) as Dir;				if( child != null) {					if( child.isSelected()) arr.push( child);					var arr_mago:Array = child.getSelectedChildren();					for each( var dir_mago in arr_mago) {						arr.push( dir_mago);					}				}			}			return arr;		}						// 自分の直下のchildrenについて、現状のXY位置からソートIDを振り直す		public function setChildSortIdByPosi( startId):uint{			var childArr:Array = new Array(); // ソート用（一時格納用）配列			var i:uint;			for( i = 0; i < numChildren; i++) {				var child:Dir = getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					childArr.push( child);				}			}						childArr.sortOn( [ 'y', 'x'], [ Array.NUMERIC, Array.NUMERIC]);						for( i = 0; i < childArr.length; i++) {				Dir( childArr[ i]).sortId = i + startId;			}						return i + startId;		}				public function getPath() : String{			if( m_text.text == "") return ""; // ありえないはず			var path:String = name;			var parent_dir:Dir = parent as Dir;			while( parent_dir != null && parent_dir.name != "") {				path = parent_dir.name + "/" + path;				parent_dir = parent_dir.parent as Dir;			}			return path;		}				override public function addChild( new_child:DisplayObject):DisplayObject {                    // Call super.addChild().                                    // Open the Alert box.            //trace("Item added successfully");			if( new_child as Doc != null) {				for( var i = 0; i < numChildren; i++) {					var child:Doc = getChildAt( i) as Doc;					if( child != null && Doc( child).getName() == Doc( new_child).getName()) {						if( child == new_child) {							//errDialog( "移動します");						} else {							errDialog( Main.LANG.getParam( "同名のファイルが既に存在しています") + ": " + Doc( child).getName());							throw new Error( Main.LANG.getParam( "同名のファイルが既に存在しています") + ": " + name);							return null;						}					}				}			}			super.addChild( new_child);			            return new_child;        }				public function setViewWidth( w:Number) {			W = w;			m_upperLine.setWidth( w - m_upperLine.x * 2);			m_underLine.setWidth( w - m_underLine.x * 2);						switch( m_listtype) {				case ListTypeBtn.TEXT_CLICKED :					set4Text();					setViewWidth_private( this, w);					break;				case ListTypeBtn.THUMB_CLICKED :					W = THUMB_W_MAX;					set4Thumb();					break;				default: break;			}//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "Dir:setViewWidth():"+ w + " " + m_listtype+ " " +Math.random());		}		function set4Text() {			x = 0;			m_icon.visible = true;			m_thumb.visible = false;			m_icon.x = m_depth * ICON_PAD;			m_text.defaultTextFormat = m_tf_text;			m_text.text = m_text.text;			m_text.x = m_icon.x + IconDir.W + 3;			m_text.y = ( TXT_H - m_text.height) / 2;			m_text.width = W - m_text.x - 3;			m_btnMinus.x = W - m_btnMinus.width - 3;			m_btnPlus.x = m_btnMinus.x - m_btnPlus.width - 3;			m_btnMinus.y = m_btnPlus.y = ( TXT_H - m_btnMinus.height) / 2;			m_upperLine.visible = true;			m_underLine.visible = true;			m_btnMinus.y = m_btnPlus.y = ( TXT_H - m_btnMinus.height) / 2;						m_clickArea.graphics.clear()			m_clickArea.graphics.beginFill( 0, 0);			m_clickArea.graphics.drawRect( 0, 0, W, TXT_H);			m_clickArea.graphics.endFill();						drawBase();		}		function set4Thumb() {//trace( name, "set4Thumb");			m_icon.visible = false;			m_thumb.visible = true;			m_text.defaultTextFormat = m_tf_thumb;			m_text.text = m_text.text;			m_text.width = W;			m_text.x = 0;			m_text.y = m_thumb.y + Thumb.H_MAX + 3;			m_btnMinus.x = W - m_btnMinus.width;			m_btnMinus.y = m_btnPlus.y = m_thumb.y + Thumb.H_MAX - m_btnMinus.height - 3;						m_upperLine.visible = false;			m_underLine.visible = false;						m_clickArea.graphics.clear()			m_clickArea.graphics.beginFill( 0, 0);			m_clickArea.graphics.drawRect( 0, 0, W, m_text.y + m_text.height);			m_clickArea.graphics.endFill();						drawBase();		}		function setViewWidth_private( dir_parent:Dir, w:Number) {			for( var i = 0; i < dir_parent.numChildren; i++) {				var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる//trace( dir_parent.getChildAt( i));				if( child != null) {					child.setViewWidth( w);				}			}		}		public function getViewWidth() : Number { return W;}		public function getViewHeight() : Number {			switch( m_listtype) {				case ListTypeBtn.TEXT_CLICKED :					// OPENしていたら、子孫要素の高さも含めた高さを返す。					return TXT_H + getShownNumchildren( this) * TXT_H;					break;				case ListTypeBtn.THUMB_CLICKED :					return getThumbTypeH();					break;				default: break;			}			return -1;		}		public function getViewHeight_single() : Number {			return ( m_listtype == ListTypeBtn.TEXT_CLICKED) ? TXT_H : getThumbTypeH();		}		protected function getThumbTypeH() : Number {			var dir_parent:Dir = parent as Dir;			if( dir_parent == null) {				//alertDialog( "親がDirでないDirのgetThumbTypeH()が呼ばれることは想定外です");				alertDialog( "getThumbTypeH() fatal error");				return 30;			}						return m_thumb.y + Thumb.H_MAX + 20;						//if( dir_parent.getViewWidth() > THUMB_W_MAX) return m_thumb.y + Thumb.H_MAX + 20;			//else 		}		function getShownNumchildren( dir_parent) :uint {			var cnt = 0;			if( dir_parent.isOpened()) {				for( var i = 0; i < dir_parent.numChildren; i++) {					var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる					if( child != null) {						cnt++;						cnt += child.getShownNumchildren( child);					}				}			}			return cnt;		}		public function getAllDocs() : Array {			// 配下のDocを全て返す（孫も含めて）			var ret:Array = new Array();			for( var i = 0; i < numChildren; i++) {				var child = getChildAt( i) as Doc;				if( child != null) ret.push( child);				else if( child as Dir != null) ret.concat( child.getAllDocs());			}			return ret;		}		public function isOpened() : Boolean { return m_opened;}		public function isSelected() : Boolean { return m_selected;}		public function getListtype() : String { return m_listtype;}		public function getHoveredStatus() : uint { return m_hoveredStatus;}				function alertDialog( str) {			Main.addErrMsg( "Dir:" + str);		}		function errDialog( str) {			Main.addErrMsg( "Dir:" + str);		}			}}