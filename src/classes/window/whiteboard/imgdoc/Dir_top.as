package window.whiteboard.imgdoc {    import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.unescapeMultiByte;	import common.*;		public class Dir_top extends Dir {		private var ROOT_DIR = '/';				public function Dir_top( name:String, depth:uint) {			super( name, depth);			ROOT_DIR = Main.CONF.CLASS_ID + "/";			visible = true;		}						// 展開する（サムネイル表示のときのみ）		public function spread( spreadDir:Dir, container_w:Number) {			if( m_listtype != ListTypeBtn.THUMB_CLICKED) {				alertDialog( "ERROR: spread() is for only THUMB listtype");				return;			}			m_spread = false;			show( false);			unspreadAllChildren_private( this);			spreadDir.spreadChildren( container_w);		}				public function unspreadAllChildren() {			unspreadAllChildren_private( this);		}				public function addDir( dirName:String) {			var newDir:Dir = addPathDoc( dirName, "");			if( m_listtype == ListTypeBtn.TEXT_CLICKED && ! newDir.isOpened()) newDir.open( true);		}				// 子要素、孫要素をaddChildする		public function addPathDoc( path:String, docid:String) {			var arr:Array = getPathArr( path);						var doc:Doc = null;			var dir:Dir = null;			if( arr.length == 1) {//alertDialog( "フォルダ無し、直下にaddChild");				// フォルダ無し、直下にaddChild				if( arr[ 0] != "") {					doc = getChildByName( arr[ 0]) as Doc;					if( doc == null) {						doc = new Doc( arr[ 0], m_depth + 1, docid);						//doc.load( path);					}					addChild( doc);				}			} else {				dir = getChildByName( arr[ 0]) as Dir;				if( dir == null) dir = new Dir( arr[ 0], m_depth + 1);				addChild( dir);				var last_dir:Dir = dir;				for( var i = 1; i < arr.length - 1; i++) {					dir = last_dir.getChildByName( arr[ i]) as Dir;					if( dir == null) dir = new Dir( arr[ i], m_depth + i + 1);					last_dir.addChild( dir);					last_dir = dir;				}				if( arr[ arr.length - 1] != "") {					doc = last_dir.getChildByName( arr[ arr.length - 1]) as Doc;					if( doc == null) {						doc = new Doc( arr[ arr.length - 1], m_depth + arr.length, docid);						//doc.load( path);					}					last_dir.addChild( doc);				}			}						// リッスン			listenChildren();									return doc != null ? doc : dir;		}		public function hasDoc( path:String) : Boolean {			if( numChildren == 0 ) return false;			var child;			var i:uint;			var arr:Array = getPathArr( path);			if( arr.length == 1) {				// フォルダ無し、直下にaddChildされたDocを探索				for( i = 0; i < numChildren; i++) {					child = getChildAt( i);					if( child as Doc != null && child.getName() == arr[0]) return true;				}			} else {				// 対象のDocの直上の親Dirを探索				var dir_parent = this;				for( var depth = 0; depth < arr.length - 1; depth++) {					var exist:Boolean = false;					for( i = 0; i < dir_parent.numChildren; i++) {						child = dir_parent.getChildAt( i);						if( child as Dir != null && child.getName() == arr[ depth]) {							exist = true;							dir_parent = child;							break;						}					}					if( !exist) return false;				}				// 探索した親DirにaddChildされたDocを探索				for( i = 0; i < dir_parent.numChildren; i++) {					child = dir_parent.getChildAt( i);					if( child as Doc != null && child.getName() == arr[arr.length - 1]) return true;				}			}			return false;		}		public function getDocByPath( path:String) :Doc {			if( numChildren == 0 ) return null;			var child;			var i:uint;			var arr:Array = getPathArr( path);			if( arr.length == 1) {				// フォルダ無し、直下にaddChildされたDocを探索				for( i = 0; i < numChildren; i++) {					child = getChildAt( i);					if( child as Doc != null && child.getName() == arr[0]) return child;				}			} else {				// 対象のDocの直上の親Dirを探索				var dir_parent = this;				for( var depth = 0; depth < arr.length - 1; depth++) {					var exist:Boolean = false;					for( i = 0; i < dir_parent.numChildren; i++) {						child = dir_parent.getChildAt( i);						if( child as Dir != null && child.getName() == arr[ depth]) {							exist = true;							dir_parent = child;							break;						}					}					if( !exist) return null;				}				// 探索した親DirにaddChildされたDocを探索				for( i = 0; i < dir_parent.numChildren; i++) {					child = dir_parent.getChildAt( i);					if( child as Doc != null && child.getName() == arr[arr.length - 1]) return child;				}			}			return null;		}		public function getDocById( id:String) : Doc {			return getDocById_private( this, id);		}		function getDocById_private( parent_dir:Dir, id:String) : Doc {			for( var i = 0; i < parent_dir.numChildren; i++) {				var child = parent_dir.getChildAt( i);				if( child as Dir != null) {					if( child as Doc != null) {						if( child.getId() == id) return child;					} else {						var child_child = getDocById_private( child, id);						if( child_child != null) return child_child;					}				}			}			return null;		}				public function hasDir( path:String) : Boolean {			if( numChildren == 0 ) return false;			var child;			var i:uint;			var arr:Array = getPathArr( path);			if( arr.length == 1) {				// 直下にaddChildされたDirを探索				for( i = 0; i < numChildren; i++) {					child = getChildAt( i);					if( child as Dir != null && child.getName() == arr[0]) return true;				}			} else {				// 対象のDirの直上の親Dirを探索				var dir_parent = this;				for( var depth = 0; depth < arr.length - 1; depth++) {					var exist:Boolean = false;					for( i = 0; i < dir_parent.numChildren; i++) {						child = dir_parent.getChildAt( i);						if( child as Dir != null && child.getName() == arr[ depth]) {							exist = true;							dir_parent = child;							break;						}					}					if( !exist) return false;				}				// 探索した親DirにaddChildされたDirを探索				for( i = 0; i < dir_parent.numChildren; i++) {					child = dir_parent.getChildAt( i);					if( child as Dir != null && child.getName() == arr[arr.length - 1]) return true;				}			}			return false;		}				// 現在選択中のDirを、一番上の階層のものを１つ返す		public function getSelectedTopDir() {			if( isSelected()) return this;			var arr = getSelectedChildren();			if( arr.length > 0) {				if( arr[0] as Doc == null) {					return arr[0];				} else {					return Doc( arr[0]).parent;				}			}			return null;		}				// FolderContainerから呼ばれる		public function offAllChildren( dir_except:Dir) {			offAllChildren_private( this, dir_except);		}		function offAllChildren_private( dir_parent:Dir, dir_except:Dir) {			if( dir_except == null || dir_except != dir_parent) dir_parent.select( false);						for( var i = 0; i < dir_parent.numChildren; i++) {				var child = dir_parent.getChildAt( i) as Dir; // Docも含まれる				if( child != null) {					offAllChildren_private( child, dir_except);				}			}		}		function getPathArr( path:String) :Array {						// ドメイン部分（http://xxx/） までを除去			var path_without_domain:String = path.replace( /^http:\/\/[^\/]*\//, '');			path_without_domain = path_without_domain.replace( /^\//, '');						// ルートディレクトリまでを除去			var path_without_root:String = path_without_domain;			if( path_without_domain.match( ROOT_DIR))				path_without_root = path_without_domain.substr(												path_without_domain.indexOf( ROOT_DIR) + ROOT_DIR.length);			return path_without_root.split( '/');		}		// フォルダが実際に存在するかチェック		public function checkDirExistence() : void {					}		/*function getPathArr( path:String) :Array {			// 日本語対応のためのデコード			//var path_decoded:String = unescapeMultiByte( path.substring( path.lastIndexOf( "/") + 1));			var path_decoded:String = unescapeMultiByte( path);						// ドメイン部分（http://xxx/） までを除去			var path_without_domain:String = path_decoded.replace( /^http:\/\/[^\/]*\//, '');						// ルートディレクトリまでを除去			var path_without_root:String = path_without_domain;			if( path_without_domain.match( ROOT_DIR))				path_without_root = path_without_domain.substr(												path_without_domain.indexOf( ROOT_DIR) + ROOT_DIR.length);			return path_without_root.split( '/');		}*/		override protected function getThumbTypeH()  : Number{			return 30;		}	}}