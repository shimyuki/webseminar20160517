package window.whiteboard.imgdoc {	import flash.display.*;	import flash.net.*;	import flash.utils.*;	import flash.events.*;		public class Doc extends Dir {				private var m_imgbase:Sprite;		private var m_docid:String;				public function Doc( name:String, depth:uint, docid:String) {			super( name, depth);						m_container.removeChild( m_icon);			m_icon = IconDoc( m_container.addChild( new IconDoc()));			m_icon.y = ( TXT_H - m_icon.height) / 2;			m_clickArea.doubleClickEnabled = false;						if( contains( m_btnPlus)) removeChild( m_btnPlus);			m_docid = docid;						m_thumb.setDoc();		}		public function isThumbLoadStarted() : Boolean { return m_thumb.isLoadStarted();}		public function startLoadImage() { m_thumb.load( Main.CONF.getParam( 'LIVECLASS_DOC_URL') + Main.CONF.CLASS_ID +"/"+ getPath());}				//public function load( imgpath:String) {		public function prepare( imgpath:String) {			m_thumb.addEventListener( IOErrorEvent.IO_ERROR, onLoadError);						//m_thumb.load( imgpath);			//m_thumb.prepare( imgpath);						if( m_docid == "") {				wait( 250);								var path = Main.CONF.getParam( 'DOCLIST_URL');				if( path == LoadConf.NOTFOUND) {					alertDialog( Main.LANG.getParam( "DOCLIST_URLが設定されていないためファイルを取得できませんでした"));					return;				}					var req:URLRequest = new URLRequest( path);				var urlVar:URLVariables = new URLVariables();				var ldr:URLLoader = new URLLoader();								req.method = URLRequestMethod.POST;				urlVar.class_id = Main.CONF.CLASS_ID;				urlVar.do_mode = "docid";				urlVar.url = imgpath;				req.data = urlVar;							ldr.addEventListener( Event.COMPLETE, onLoadDocid);				try {					ldr.load( req);				} catch( e:Error){				}			} else {				dispatchEvent( new DocEvent( DocEvent.ADDED, this));			}		}				function onLoadDocid( e:Event) {			m_docid = URLLoader( e.target).data;//Main.addDebugMsg("Doc:onLoadDocid()" + m_docid + "(" + name + ")");			dispatchEvent( new DocEvent( DocEvent.ADDED, this));			URLLoader( e.target).removeEventListener( Event.COMPLETE, onLoadDocid);		}				public function getId() :String{			return m_docid;		}						public function onRemoved() {			m_thumb.dispose();			dispatchEvent( new DocEvent( DocEvent.REMOVED, this));		}		function wait( count:uint):void{			var start:uint = getTimer();			while( getTimer() - start < count){			}		}				// DocStepperから進む／戻るボタンにより間接的に選択されたときにImgdocContainerから呼ばれる		public function selectByDocStepper() {			onClick( new MouseEvent( MouseEvent.CLICK));		}				override protected function onClick( e:MouseEvent) {			super.onClick( e);//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", "Doc:onClick");					dispatchEvent( new DocEvent( DocEvent.SELECTED, this));		}				// べつのDIRが自分の上をドラッグ中に呼ばれる		override protected function hover( b:Boolean) {			// 何もしない		}		function onLoadError( e:IOErrorEvent) {			dispatchEvent( e);		}	}}