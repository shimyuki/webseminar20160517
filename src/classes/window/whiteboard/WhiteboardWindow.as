package window.whiteboard {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import window.whiteboard.toolchip.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;		// サイズ変更可能ウィンドウ	public class WhiteboardWindow extends ResizableWindow {		static public const POPUP_navToURL:String = "WhiteboardWindow POPUP_navToURL";		private var m_panelCon:Sprite;		private var m_toolchipBtns:ToolchipBtns;		private var m_1stAuthorityChange:Boolean = true;				public function WhiteboardWindow( w:Number, h:Number, min_w:Number = 0, min_h:Number = 0, baseColor:uint = 0xffffff) {			super( w, h, min_w, min_h, baseColor);			m_panelCon = Sprite( addChild( new Sprite()));					}				// popupReq：ポップアップボタンクリック時に、別ウィンドウを開きたい場合は設定する		// usePopup：ポップアップボタンを表示するか否か		// leftContents_2nd : 第二のleftContents。権限を持たない場合などの。		override public function setTitleBar( titleLeft, titleRight = null,									popupReq:URLRequest = null, usePopup:Boolean = true,									titleLeft_2nd = null) {						// 受講生の場合は、ポップアップは通常のタイプで。			if( Main.CONF.isStudent( Main.CONF.UID)) {				//if( titleRight != null) titleRight.visible = false;				popupReq = null;			}						super.setTitleBar( titleLeft, titleRight, popupReq, usePopup, titleLeft_2nd);						m_titlebar.addEventListener( POPUP_navToURL, function( e:*) { dispatchEvent( new Event( POPUP_navToURL));});					}				// 講師のみ		// 画面モード切り替え時にMainから呼ばれる		public function setPopupReq( popupReq:URLRequest) {			if( m_titlebar) m_titlebar.setPopupReq( popupReq);		}						// ホワイトボード書き込み権限を与えるか否かの設定。		// 講師が共有オブジェクトを変更することによって、この関数が生徒側で実行される		public function setAuthority( b:Boolean) {			var changed = false;			if( WhiteboardContainer.WB_AUTHORIZED != b) changed = true;			WhiteboardContainer.WB_AUTHORIZED = b;			if( m_toolchipBtns != null) m_toolchipBtns.setAuthority( b);			if( m_contents != null) {				var wbCon:WhiteboardContainer = m_contents as WhiteboardContainer;				if( wbCon != null) wbCon.onAuthorityChanged();			}						if( changed && Main.CONF.isStudent( Main.CONF.UID) && ! m_1stAuthorityChange) {				if( b) Main.HEADER_CON.showInfo( Main.LANG.getParam( "ホワイトボードの共有モードがONになりました"));				else Main.HEADER_CON.showInfo( Main.LANG.getParam( "ホワイトボードの共有モードがOFFになりました"));			}			m_1stAuthorityChange = false;		}		// 資料閲覧権限を与えるか否かの設定。		// 講師が共有オブジェクトを変更することによって、この関数が生徒側で実行される		public function showReadBtn( b:Boolean) {			if( m_toolchipBtns) m_toolchipBtns.showReadBtn( b);		}				public function watchToolchipPanel( toolchipBtns:ToolchipBtns) {			m_toolchipBtns = toolchipBtns;			m_toolchipBtns.addEventListener( ToolchipEvent.SHOW_PANEL, onShowPanel);			m_toolchipBtns.addEventListener( ToolchipEvent.HIDE_PANEL, onHidePanel);		}		function onHidePanel( e:ToolchipEvent) {			while( m_panelCon.numChildren) m_panelCon.removeChildAt(0);		}		function onShowPanel( e:ToolchipEvent) {			addChild( m_panelCon);			while( m_panelCon.numChildren) m_panelCon.removeChildAt(0);			var panel = e.panel;			if( panel != null) {				m_panelCon.x = e.targetBtnX + 15;				m_panelCon.y = e.targetBtnY + 15;				m_panelCon.addChild( panel);			}		}		// Partitionから呼ばれる		// カーソル位置がパネルとかぶっているかの判定		public function isRollOvered(): Boolean {			if( m_panelCon.numChildren > 0 ) {				return true;			}			return false;		}				override protected function onSizeChange( e:SizeHandleEvent) {			super.onSizeChange( e);			WhiteboardContainer( m_contents).fitContentsViewSize();		}	}}