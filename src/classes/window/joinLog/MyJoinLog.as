package window.joinLog {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	// 講師or各受講生が持つ、自分自身の「参加」判定の個別アクションログSO/DB書き込み、setTime配信用クラス	public class MyJoinLog {				private var m_nc:NetConnection;		private var so:SharedObject = null;		static public const FIRST_JOING_TIME = "_1stJoinTime";		private var m_propertyName_1stJoinTime:String;		public function MyJoinLog() {						m_propertyName_1stJoinTime = Main.CONF.UID + FIRST_JOING_TIME;		}				// LiveStatusManagerから自分自身により呼ばれる。		public function write1stJoinTime() {			if( so==null) {				alertDialog( "MyJoinLog:write1stJoinTime() " + Main.LANG.getParam( "通信エラーにより、ログを書き込みできません"));				return;			}						if( Main.CONF.getParam( 'GETTIME_URL') != LoadConf.NOTFOUND) {				var loader:URLLoader = new URLLoader();				loader.addEventListener( Event.COMPLETE, function( e:*) {										var commonDate:Date = new Date( String( loader.data));										writeTime( m_propertyName_1stJoinTime, commonDate);										});				loader.load( new URLRequest( Main.CONF.getParam( 'GETTIME_URL')));			} else {				writeTime( m_propertyName_1stJoinTime, new Date());			}					}		function writeTime( propertyName:String, date:Date) {			var mon:String = date.getMonth() + 1 < 10 ? "0" + String( date.getMonth() + 1) : String( date.getMonth() + 1);			var day:String = date.getDate() < 10 ? "0" + String( date.getDate()) : String( date.getDate());			var hour:String = date.getHours() < 10 ? "0" + String( date.getHours()) : String( date.getHours());			var min:String = date.getMinutes() < 10 ? "0" + String( date.getMinutes()) : String( date.getMinutes());			var sec:String = date.getSeconds() < 10 ? "0" + String( date.getSeconds()) : String( date.getSeconds());			var timeText:String = date.getFullYear() + "/" + mon + "/" + day + " " + hour + ":" + min + ":" + sec;						so.setProperty( propertyName, timeText);		}		/*		// LiveStatusManagerから呼ばれる。		public function addJoinLog() {			// 受講生の場合			if( Main.CONF.isStudent( m_uid)) {				if( so==null) {					alertDialog("MyJoinLog:addJoinLog() " +  Main.LANG.getParam( "通信エラーにより、ログを書き込みできません"));					return;				}								var now:Date = new Date();				var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());				var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());				var htmlLogText:String = "<p>" + hour + ":" + min + " "+  Main.LANG.getParam( "参加しました") +"</p>";								if( so.data[ m_uid] != htmlLogText) {					// 連続して同じ書き込みはしないよ					so.setProperty( m_uid, htmlLogText);					//saveDB( htmlLogText);				}			}		}*/				// 個別アクションログのSO		public function initSo( so_joinLog:SharedObject) : void {			// このSOは、講師画面のヘッダー「入室ログ」から参照される			so = so_joinLog;			/*			if( so == null) {				so = SharedObject.getRemote( Main.CONF.SO_NAME_LOG, nc.uri, true);			}			so.connect( nc);			*/		}		/*		function saveDB( htmlText:String) {			var path:String = Main.CONF.getParam( "SAVETEXT_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SAVETEXT_URL"));				return;			}			var req:URLRequest = new URLRequest( path);			req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.mode = "actionlog";			variables.class_id = Main.CONF.CLASS_ID;			variables.uid = m_uid;			variables.text = htmlText;			req.data = variables;									var loader:URLLoader = new URLLoader();			loader.load( req);			loader.addEventListener( IOErrorEvent.IO_ERROR, function ( e:*) {				alertDialog( "saveDB() IO_ERROR:" + path);			});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function ( e:*) {				alertDialog( "saveDB() SECURITY_ERROR:" + path);			});		}								*/				function alertDialog( str:String) {			Main.addErrMsg( str);		}	}}