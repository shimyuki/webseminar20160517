package window.questionnaire {	import flash.display.*;	import fl.events.*;	import common.*;	import window.*;	import flash.events.Event;	import flash.text.*;	import flash.events.*;	import common.AlertManager;	import flash.net.*;	import fl.controls.CheckBox;	import fl.controls.RadioButton;	import fl.controls.RadioButtonGroup;		// アンケートのコンポーネントセット　受講生用回答フォーム	// タイトル、質問文、ラジオボタン（選択肢）を表示。	public class QComponentsInquiry extends QComponents {		static public const CLICK_OK = "CLICK_OK";		// ラベル、見出し		private const LABEL_OK = "  OK  ";				private var m_desc:TextField;		private var m_select:TextField;		private var m_chkShow:CheckBox;		private var m_graph:QSelectionGraph;		private var m_btnOk:DynamicTextBtn;		private var m_clickObj:Sprite;		private var m_icon:DynamicTextIcon;		private var m_radioBtnG:RadioButtonGroup;		private var m_resultCon:Sprite;						public function QComponentsInquiry( questionnaire:Questionnaire, w_new:Number = 0) {						super();//trace("QComponentsInquiry() " + questionnaire);									if( w_new) {				var diff_w = W - w_new;								m_bg.width -= diff_w;				m_title.width -= diff_w;								W = w_new; // ライブラリのm_bgの幅を変更							}						m_questionnaire = questionnaire;						// タイトルのテキスト			m_title.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 13);			m_title.background = false;			m_title.border = false;			m_title.type = TextFieldType.DYNAMIC;			m_title.text = questionnaire.title;						// 集計中アイコンの設置			m_icon = DynamicTextIcon( addChild( 						new DynamicTextIcon( STATUS_LABEL_NOWON, STATUS_LABEL_W, STATUS_LABEL_H, 0xf50000, 0xf50000, 0xffffff)));			m_icon.x = W - m_icon.width - PAD;			m_icon.y = m_title.y + ( m_title.height - m_icon.height) / 2;			m_title.width = W - ( m_title.x + m_icon.width + PAD * 2);						// 質問文のテキスト			m_desc = TextField( addChild( new TextField()));			m_desc.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 12);			m_desc.multiline = true;			m_desc.wordWrap = true;			m_desc.x = m_title.x;			m_desc.y = m_title.y + m_title.height + 17;			m_desc.width = W - ( m_desc.x + PAD);			m_desc.text = questionnaire.description;			m_desc.height = m_desc.textHeight + 8;						// 選択肢のラジオボタン			if( questionnaire.selection == null) {				errDialog( Main.LANG.getReplacedSentence( "%sには選択肢が設定されていません。", questionnaire.title));return;			}			var posi_y = m_desc.y + m_desc.height + PAD;			m_radioBtnG = new RadioButtonGroup( "sel");			for( var i:uint = 0; i < questionnaire.selection.length; i++) {				var radio:RadioButton = RadioButton( addChild( new RadioButton()));//Main.addDebugMsg( "QComponentsInquiry:" + questionnaire.selection[ i] as String);				radio.label = String( questionnaire.selection[ i]);				radio.value = String( questionnaire.selection[ i]);				radio.x = m_desc.x;				radio.width = m_desc.width;				radio.y = posi_y;				posi_y += radio.height + 5;				m_radioBtnG.addRadioButton( radio);								// 既に回答済みの場合もあるので、回答状況を反映させる				if( questionnaire.uidAnswerHash != null) {					for( var uid:String in questionnaire.uidAnswerHash) {						if( uid == Main.CONF.UID && String( questionnaire.uidAnswerHash[uid]) == String( questionnaire.selection[ i])) {							radio.selected = true;						}					}				}			}									// 決定ボタン			m_btnOk = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_OK)));			m_btnOk.y = posi_y;			m_btnOk.x = m_desc.x + m_desc.width / 2;			m_btnOk.setEnabled( true);			m_btnOk.addEventListener( MouseEvent.CLICK, onClickOk)					// m_arrow周辺に開く閉じるの透明ボタンを設置			m_clickObj = Sprite( addChild( new Sprite()));			m_clickObj.graphics.beginFill( 0, 0);			m_clickObj.graphics.drawRect( 0, 0, m_title.y + m_title.width, m_title.height);			m_clickObj.graphics.endFill();			m_clickObj.x = 0;			m_clickObj.y = m_title.y;			m_clickObj.buttonMode = true;			m_clickObj.addEventListener( MouseEvent.CLICK,				function( e:*) {					if( m_opened) close();					else open();				});									// 集計結果コンテナ			m_resultCon = new Sprite();			m_resultCon.graphics.lineStyle( 1, 0xcccccc);			m_resultCon.graphics.lineTo( m_desc.width, 0);			m_resultCon.x = m_desc.x;			m_resultCon.y = m_btnOk.y + m_btnOk.height + PAD;						// 集計グラフ			if( questionnaire.selection == null) {				errDialog( Main.LANG.getReplacedSentence( "%sには選択肢が設定されていません。", questionnaire.title));return;			}			m_graph = QSelectionGraph( m_resultCon.addChild( new QSelectionGraph( m_desc.width, questionnaire.selection)));			m_graph.y = PAD;//trace(questionnaire.uidAnswerHash);			resetData( questionnaire.uidAnswerHash);			if( questionnaire.showall == 1) addChild( m_resultCon);			super.status4sort = super.SORT_STATUS_NOWON;			super.changeHeight();		}				// 集計結果コンテナを表示するか否か		public function showResult( showall) {			if( showall == 1) addChild( m_resultCon);			else if( contains( m_resultCon)) removeChild( m_resultCon);						m_questionnaire.showall = showall;			super.changeHeight();		}		public function resetData( uidAnswerHash:Object) {			// グラフに反映			m_graph.resetData( uidAnswerHash);		}		public function answerd() {			m_btnOk.setEnabled( false);			for( var i:uint = 0; i < m_radioBtnG.numRadioButtons; i++) {				m_radioBtnG.getRadioButtonAt( i).enabled = false;			}			m_icon.resetText( STATUS_LABEL_ANSWERD);			m_icon.resetBase( 0xaaaaaa, 0x999999);			super.status4sort = super.SORT_STATUS_ANSWERD;		}		function onClickOk( e:MouseEvent) {			if( m_radioBtnG.selectedData != null) dispatchEvent( new Event( CLICK_OK));		}		public function getSelectedData() :String {			return String( m_radioBtnG.selectedData);		}		public function finished() {			m_btnOk.setEnabled( false);			for( var i:uint = 0; i < m_radioBtnG.numRadioButtons; i++) {				m_radioBtnG.getRadioButtonAt( i).enabled = false;			}			// 集計中アイコンを集計終了に変更			m_icon.resetText( STATUS_LABEL_FINISH);			m_icon.resetBase( 0xaaaaaa, 0x999999);			super.status4sort = super.SORT_STATUS_FINISH;		}		function errDialog( str) {			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", str);			AlertManager.createAlert( this , str);		}	}}