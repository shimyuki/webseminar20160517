package window.questionnaire {	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.net.URLRequest;		public class QCell extends Sprite {		private const HEADER_H = 27;		private var W:Number;		private var H:Number;		private var IMG_W:Number;		private var IMG_H:Number;		private var m_title:TextField;		private var m_bitmap:Bitmap;		public var uid:String;		private var m_answerText:TextField;		private var m_answerBase:Sprite;		private var m_answerMask:Shape;				public function QCell( uid:String, _w:Number) {			W = _w;			this.uid = uid;			var memberData = Main.CONF.getMemberDataHash( uid);						m_bitmap = new Bitmap( null);			addChild( m_bitmap);			if( memberData != null) m_bitmap.bitmapData = Main.CONF.getMemberImgBmpdata( memberData.img);									m_title = TextField( addChild( new TextField()));						m_answerText = new TextField();			var fmt:TextFormat = new TextFormat( Main.CONF.getMainFont(), 12);			fmt.align = "center";			m_answerText.defaultTextFormat = fmt;			m_answerText.wordWrap = true;			m_answerText.x = 2;			m_answerBase = new Sprite();			m_answerBase.addChild( m_answerText);			m_answerMask = Shape( addChild( new Shape()));			m_answerBase.mask = m_answerMask;			m_answerBase.x = m_answerMask.x = 2;			m_answerBase.y = m_answerMask.y = 2 + HEADER_H + 1;						setWidth( _w);						//var memberData = Main.CONF.getMemberDataHash( uid);						m_title.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			m_title.selectable = m_title.mouseEnabled = false;			m_title.text = memberData != null ? memberData.name : LoadConf.NOTFOUND;			m_title.x = 5;			m_title.y = ( HEADER_H - m_title.textHeight) / 2 + 2;			m_title.height = m_title.textHeight + 4;			m_title.width = _w - m_title.x;					}		function onAddedToStage( e:Event) {			if( !uid) return;		}				public function setAnswer( str:String) {			m_answerText.text = str;						if( str == "") {				if( contains( m_answerBase)) removeChild( m_answerBase);			} else {				addChild( m_answerBase);				m_answerText.height = m_answerText.textHeight + 4;				m_answerText.y = ( m_answerBase.height - m_answerText.height) / 2;				if( m_answerText.y < 0) m_answerText.y = 0;			}								}		function onComplete ( e:Event):void {			setLoaderSizePosi();		}		function setLoaderSizePosi() {			if( m_bitmap.bitmapData != null) {				var scale_x:Number = IMG_W / m_bitmap.bitmapData.width < 1 ? IMG_W / m_bitmap.bitmapData.width : 1;				var scale_y:Number = IMG_H / m_bitmap.bitmapData.height < 1 ? IMG_H / m_bitmap.bitmapData.height : 1;				m_bitmap.scaleX = m_bitmap.scaleY = scale_x < scale_y ? scale_x : scale_y;			} else {				m_bitmap.width = IMG_W;				m_bitmap.height = IMG_H;			}						var x0:Number = 2;			var y0:Number = 2 + HEADER_H + 1;			m_bitmap.x = x0 + ( IMG_W - m_bitmap.width) / 2;			m_bitmap.y = y0 + ( IMG_H - m_bitmap.height) / 2;		}				public function unload() { 			//removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage);		}				public function setWidth( _w:Number) {			W = _w;			IMG_W = _w - 4;			IMG_H = IMG_W / 4 * 3;			H = 2+HEADER_H+1+IMG_H+2; // 全体の高さ			graphics.clear();			//グレー枠			graphics.beginFill( 0xd9d9d9);			graphics.drawRect( 0, 0, _w, H);			graphics.endFill();			// パディング白ベース			graphics.beginFill( 0xffffff);			graphics.drawRect( 1, 1, _w-2, H - 2);			graphics.endFill();			// ヘッダーベース			graphics.beginFill( 0xcccccc);			graphics.drawRect( 2, 2, _w - 4, HEADER_H);			graphics.endFill();						// タイトルのサイズ			m_title.width = _w - m_title.x;						m_answerText.width = W - 8;			m_answerBase.graphics.clear();			m_answerBase.graphics.beginFill( Main.LIGHT_GREEN);			m_answerBase.graphics.drawRect( 0, 0, IMG_W, IMG_H);			m_answerBase.graphics.endFill();			m_answerMask.graphics.clear();			m_answerMask.graphics.beginFill( 0);			m_answerMask.graphics.drawRect( 0, 0, IMG_W, IMG_H);			m_answerMask.graphics.endFill();						// 画像サイズと位置			setLoaderSizePosi();								}		public function getViewWidth():Number { return W;}		public function getViewHeight():Number { return H;}					}}