package window.questionnaire {	import flash.display.*;	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import fl.controls.RadioButtonGroup;	import flash.events.Event;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import partition.Layout;		// アンケート編集（ビュー）／集計結果の表示用コンポーネントセットを複数格納するコンテナ	public class QComponentsConLecturer extends QComponentsCon {		private var m_nc:NetConnection;		public function initSo( nc:NetConnection) {			m_nc = nc;			// 誰かが回答したら呼ばれるので、回答結果を逐次集計グラフなどに反映。			if( so == null) so = SharedObject.getRemote( Main.CONF.SO_NAME_Q, nc.uri, true);			so.addEventListener( SyncEvent.SYNC, onSyncSoHashArr);			super.setSo( so);			so.connect( nc);					}		/*		function onSyncFlag1st( e:SyncEvent) {			var i:uint;			if( so_stFlag.data.hash == null) {				// DB(Main.CONF)から読み込んだ、集計済みのアンケートをfalse（終了）登録				// 集計済みはQComponentsResult型、集計前はQComponentsMod型であることを前提に				// 集計済みか否かを判定。				var hash:Object = new Object();				for( i = 0; i < m_arr.length; i++) {					var testObj:QComponentsResult = m_arr[ i] as QComponentsResult;					if( testObj != null) {						hash[ testObj.getQuestionnaire().createDate] = false;					}				}				so_stFlag.data.hash = hash;				so_stFlag.setDirty( "hash");			} else {				// 講師がアンケート集計を開始した後、何らかの原因で再度アクセスした場合。				// 集計終了しているものは、それを反映する				for( i = 0; i < m_arr.length; i++) {					var test:QComponentsResult = m_arr[ i] as QComponentsResult;					if( test != null) {						for( var createDate:String in so_stFlag.data.hash) {							if( createDate == test.getQuestionnaire().createDate && so_stFlag.data.hash[ createDate] == false) {								// 集計終了している								test.finished();							}						}					}				}			}			so_stFlag.removeEventListener( SyncEvent.SYNC, onSyncFlag1st);			so_stFlag.addEventListener( SyncEvent.SYNC, onSyncFlag);		}		*/				// 誰か受講生が回答したら呼ばれるので、回答結果を逐次集計グラフなどに反映。		function onSyncSoHashArr( e:SyncEvent) {			if( so_stFlag == null) so_stFlag = SharedObject.getRemote( Main.CONF.SO_NAME_Q_FLAG, m_nc.uri, true);			so_stFlag.addEventListener( SyncEvent.SYNC, onSyncFlag);			so_stFlag.connect( m_nc);						if( so.data.hashArr == undefined) return;						for each( var hash:Object in so.data.hashArr) {				var qCompo:QComponentsResult = getQComponents( hash.createDate) as QComponentsResult;				if( qCompo == null) continue;								qCompo.resetData( hash.uidAnswerHash);			}					}				function getQComponents( createDate:String) : QComponents {			for each( var qCompo in m_arr) {								if( qCompo.getQuestionnaire().createDate == createDate) {					return qCompo;				}			}			return null;		}				override public function addQCompo( qCompo) {			super.addQCompo( qCompo);						qCompo.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onSizeChanged);			if( qCompo as QComponentsMod) {				qCompo.addEventListener( QComponentsMod.CLICK_SAVE, onClickSave); // 更新				qCompo.addEventListener( QComponentsMod.CLICK_DEL, onClickDel); // 削除				qCompo.addEventListener( QComponentsMod.CLICK_START, onClickStart); // 集計開始			}			if( qCompo as QComponentsResult) {				qCompo.addEventListener( QComponentsResult.CLICK_STOP, onClickStop); // 終了してDB保存				qCompo.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onSizeChanged);				qCompo.addEventListener( QComponentsResult.SHOW_ALL_CHANGED, onClickShowChk);			}					}						// 集計開始クリック		function onClickStart( e:Event) {			var qCompoMod:QComponentsMod = QComponentsMod( e.target);			//var tmp = "";//for each( var t in qCompoMod.getQuestionnaire().selection) { tmp += String( t) + ",";}//Main.addDebugMsg( "QComponentsConLecturer:onClickStart: " +qCompoMod.getQuestionnaire().selection.length + ": " + tmp);						// SOに開始宣告			if( so_stFlag == null) {				alertDialog( "onClickStart() " + Main.LANG.getParam( "通信エラー"));			}			var stFlag:Object = ( so_stFlag.data.hash == undefined) ? new Object : so_stFlag.data.hash;			stFlag[ qCompoMod.getQuestionnaire().createDate] = true;			so_stFlag.data.hash = stFlag;			so_stFlag.setDirty( "hash");						// 集計開始した印として、uidAnswerHashをNULLからArrayオブジェクトにかえておく。			// (QcontentsLecturerやQcontentsStudentで、最初にSOアクセスしたときの判定に使う)			var hashArr:Array = so.data.hashArr;			for( var i = 0; i < hashArr.length; i++) {				if( hashArr[i].createDate == qCompoMod.getQuestionnaire().createDate) {//trace( "qComConLec", hashArr[i].uidAnswerHash);					hashArr[i].uidAnswerHash = new Object();//trace( "qComConLec",hashArr[i].uidAnswerHash);					break;				}			}			so.data.hashArr = hashArr;			so.setDirty( "hashArr");					}				function onSyncFlag( e:SyncEvent) {			if( so_stFlag.data.hash == undefined) return;						// 表示きりかえ			for( var i = 0; i < m_arr.length; i++) {				var qCompoResult:QComponentsResult;				// 集計開始しているかチェック				var qCompoMod:QComponentsMod = m_arr[ i] as QComponentsMod;				if( qCompoMod != null && so_stFlag.data.hash[ qCompoMod.getQuestionnaire().createDate] != undefined &&				   so_stFlag.data.hash[ qCompoMod.getQuestionnaire().createDate] == true) {					// 表示きりかえが必要（集計開始フラグがたっている）					// 集計を開始したQComponentsModはremoveして、					if( contains( qCompoMod)) removeChild( qCompoMod);					qCompoMod.removeEventListener( DrawerEvent.CONTENTS_H_CHANGED, onSizeChanged);					qCompoMod.removeEventListener( QComponentsMod.CLICK_SAVE, onClickSave); // 更新					qCompoMod.removeEventListener( QComponentsMod.CLICK_DEL, onClickDel); // 削除					qCompoMod.removeEventListener( QComponentsMod.CLICK_START, onClickStart); // 集計開始										// 新しく生成するQComponentsResultと差し替える					qCompoResult = QComponentsResult( addChild( new QComponentsResult( qCompoMod.getQuestionnaire())));					m_arr.splice( i, 1, qCompoResult);					qCompoResult.addEventListener( QComponentsResult.CLICK_STOP, onClickStop); // 終了してDB保存					qCompoResult.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onSizeChanged);					qCompoResult.addEventListener( QComponentsResult.SHOW_ALL_CHANGED, onClickShowChk);									}				// 集計終了しているかチェック				qCompoResult = m_arr[ i] as QComponentsResult;				if( qCompoResult != null && so_stFlag.data.hash.hasOwnProperty( qCompoResult.getQuestionnaire().createDate)) {					if( so_stFlag.data.hash[ qCompoResult.getQuestionnaire().createDate] == false) {Main.addDebugMsg("QComConLec:集計終了フラグがたっている "+qCompoResult.getQuestionnaire().title);						// 集計終了フラグがたっている						qCompoResult.removeEventListener( QComponentsResult.CLICK_STOP, onClickStop); // 終了してDB保存						qCompoResult.finished();					} else {Main.addDebugMsg("QComConLec:まだ集計中 "+qCompoResult.getQuestionnaire().title);						// まだ集計中						qCompoResult.open();					}				}							}						replace();		}				// 集計終了クリック		function onClickStop( e:Event) {						var qCompo:QComponentsResult = e.target as QComponentsResult;			if( qCompo == null) {				alertDialog( "onClickSave() fatal error");				return null;			}			var q:Questionnaire = applySo( qCompo.getQuestionnaire()); // SOに反映させる（uidAnswerHashに関してはSOの値を最新とする）									// SOに終了宣告			if( so_stFlag == null) {				alertDialog( Main.LANG.getParam( "通信エラー"));			}Main.addDebugMsg("QComConLec "+q.createDate+ so_stFlag.data.hash[ q.createDate]);			var stFlag:Object = so_stFlag.data.hasOwnProperty("hash") ? so_stFlag.data.hash : new Object();			stFlag[ q.createDate] = false;			so_stFlag.data.hash = stFlag;			so_stFlag.setDirty( "hash");Main.addDebugMsg(" -> QComConLec "+q.createDate+  so_stFlag.data.hash[ q.createDate]);						/*			// 回答結果含めて、DBに保存			var url = Main.CONF.getParam( "SETQUESTIONNAIRE_URL");			if( url == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETQUESTIONNAIRE_URL"));				return;			}			var val:URLVariables = new URLVariables();			val.class_id = Main.CONF.CLASS_ID;			val.mode = "mod";			val.date = q.createDate;			val.title = q.title;			val.description = q.description;			val.showall = q.showall;						for( var i = 0; i < q.selection.length; i++) {				val["selection_arr[" + i + "]"] = q.selection[i];			}			for( var uid:String in q.uidAnswerHash) {				val["result_arr[" + uid + "]"] = q.uidAnswerHash[uid];			}									var req:URLRequest = new URLRequest( url);			req.method = URLRequestMethod.POST;			req.data = val;			var loader:URLLoader = new URLLoader();			loader.addEventListener( IOErrorEvent.IO_ERROR, function( e:*) { alertDialog( "IO_ERROR: " + url);});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( e:*) { alertDialog( "SECURITY_ERROR: " + url);});			loader.load( req);//if( Main.DEBUG) navigateToURL( req, "_blank");			*/		}				function onClickSave( e:Event) {			var i:uint;			var qCompo:QComponents = e.target as QComponents;			if( qCompo == null) {				alertDialog( "onClickSave() fatal error");				return null;			}			var q:Questionnaire = qCompo.getQuestionnaire();						applySo( q);						// とりあえず全部閉じる			for( i = 0; i < m_arr.length; i++) {				var qc = m_arr[ i];				qc.close();			}			// QContentsに知らせる			dispatchEvent( new Event( "scrollup"));						// QContentsLecturerのdrawer02:Drawer若しくは QContentsStudentのdrawer01:Drawerに知らせる			dispatchEvent( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, getViewHeight()));					}				function onClickShowChk( e:Event) {			var i:uint;			var qCompo:QComponents = e.target as QComponents;			if( qCompo == null) {				alertDialog( "onClickShowChk() fatal error");				return null;			}			var q:Questionnaire = qCompo.getQuestionnaire();						applySo( q);		}				// SOに対して、回答結果以外を、フォームの内容（QComponentsのm_questionnaireの内容）で上書きする		function applySo( q:Questionnaire):Questionnaire {						// SO更新			if( so == null || so.data.hashArr == undefined) {				//alertDialog( "applySo() 共有オブジェクトにアンケートが存在しません");				alertDialog( "applySo()  1: fatal error");			}			var done:Boolean = false;			var hashArr:Array = so.data.hashArr;			for( var i = 0; i < hashArr.length; i++) {				if( hashArr[i].createDate != undefined) {					if( hashArr[i].createDate == q.createDate) {						if( hashArr[i].uidAnswerHash != undefined) q.uidAnswerHash = hashArr[i].uidAnswerHash;						hashArr.splice( i, 1, q.getDataHash());						done = true;						break;					}				} else {					//alertDialog( "共有オブジェクトに保存されたアンケート情報にcreateDateが存在しません");					alertDialog( "applySo()  2: fatal error");				}			}			if( done) {				so.data.hashArr = hashArr;				so.setDirty( "hashArr");			} else {				//alertDialog( "編集したアンケートが共有オブジェクトに存在しません");				alertDialog( "applySo()  3: fatal error");			}						return q;		}		function onClickDel( e:Event) {			var qCompo = e.target;			if( contains( qCompo)) removeChild( qCompo);			// 表示内容を変更			// とりあえず全部閉じて、対象のやつは配列から削除			for( var i = 0; i < m_arr.length; i++) {				var qc = m_arr[ i];				qc.close();				if( qc == qCompo) {					m_arr.splice( i, 1); // 削除					i--;				}			}			replace();						// settingContentsに知らせる			dispatchEvent( new Event( "scrollup"));						// settingContentsのdrawer04:Drawerに知らせる			dispatchEvent( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, getViewHeight()));		}	}}