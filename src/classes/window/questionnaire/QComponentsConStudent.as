package window.questionnaire {	import flash.display.*;	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import partition.Layout;	import fl.controls.RadioButtonGroup;	import flash.events.Event;	import flash.text.*;	import flash.events.*;	import flash.net.*;		// アンケート編集（ビュー）／集計結果の表示用コンポーネントセットを複数格納するコンテナ	public class QComponentsConStudent extends QComponentsCon {		private var m_nc:NetConnection;				public function initSo_stu( nc:NetConnection, _so:SharedObject) {			m_nc = nc;			super.setSo( _so);			if( so.data.hashArr != undefined) {				// 講師がアクセスした後								// 最初のアクセスなので、最新のSOの状態を反映する				for each( var hash:Object in so.data.hashArr) {					var qCompo:QComponentsInquiry = getQComponentsInquiry( hash.createDate);					if( qCompo != null) {						//var tmp = "";//for each( var t in qCompo.getQuestionnaire().selection) { tmp += String( t) + ",";}//Main.addDebugMsg( "QComponentsConStudent: " + tmp);						qCompo.resetData( hash.uidAnswerHash);						qCompo.showResult( hash.showall);						//qCompo.answerd();					}				}								checkAnswered();								so.addEventListener( SyncEvent.SYNC, onSyncHashArr); // 自分自身、回答済みかを監視							if( so_stFlag == null) so_stFlag = SharedObject.getRemote( Main.CONF.SO_NAME_Q_FLAG, m_nc.uri, true);				so_stFlag.addEventListener( SyncEvent.SYNC, changeStatus); // 講師によって集計開始／終了されるのを監視				so_stFlag.connect( m_nc);							}		}					// androidがoverrideする		protected function newQComponentsInquiry( q:Questionnaire) : QComponentsInquiry {			return new QComponentsInquiry( q);		}		override public function addQCompo( qCompo) {						qCompo.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, onSizeChanged);			qCompo.addEventListener( QComponentsInquiry.CLICK_OK, onClickOk); // 更新						super.addQCompo( qCompo);					}				function onSyncHashArr( e:SyncEvent) {			checkShowResult();			checkAnswered();		}		function checkShowResult() {			if( so.data.hashArr == undefined) return;			for each( var hash:Object in so.data.hashArr) {				var qCompo:QComponentsInquiry = getQComponentsInquiry( hash.createDate);				if( qCompo != null) {					qCompo.resetData( hash.uidAnswerHash);					qCompo.showResult( hash.showall);				}			}		}		function checkAnswered() {			if( so.data.hashArr == undefined) return;			for each( var hash:Object in so.data.hashArr) {				if( getAnswer( Main.CONF.UID, hash.createDate) != null) {					// 回答済み					var qCompo:QComponentsInquiry = getQComponentsInquiry( hash.createDate);					if( qCompo != null) {						qCompo.answerd();					}				}			}		}				function getQComponentsInquiry( createDate:String) : QComponentsInquiry {			for each( var qCompo:QComponentsInquiry in m_arr) {				if( qCompo.getQuestionnaire().createDate == createDate) {					return qCompo;				}			}			return null;		}				function onClickOk( e:Event) {			// SOの変更			if ( so==null || so.data.hashArr == undefined) {				alertDialog( Main.LANG.getParam( "通信エラー"));				return;			}						var qCompo:QComponentsInquiry = QComponentsInquiry( e.target);						// 対象のアンケートSOのuidAnswerHashに自分の回答結果を追加する			var done:Boolean = false;			var hashArr:Array = so.data.hashArr;			for each( var obj:Object in hashArr) {				if( obj.createDate == undefined) {					alertDialog( Main.LANG.getParam( "アンケートにcreateDateは必須です"));					return;				}				if( obj.createDate == qCompo.getQuestionnaire().createDate) {					// こいつが対象のアンケートSO					if( obj.uidAnswerHash == undefined || obj.uidAnswerHash == null) {						obj.uidAnswerHash = new Object();					}					obj.uidAnswerHash[ Main.CONF.UID] = qCompo.getSelectedData();										done = true;					break;				}			}			if( done) {				so.data.hashArr = hashArr;				so.setDirty( "hashArr");			} else {				//alertDialog( "回答したアンケートが共有オブジェクトに存在しません");				alertDialog( "onClickOk() fatal error");			}								}			function changeStatus( e:SyncEvent) {			if( so_stFlag.data.hash == undefined) return;									if( so == null || so.data.hashArr == undefined) {				alertDialog( "changeStatus() " + Main.LANG.getParam( "通信エラー"));				return;			}						for( var createDate:String in so_stFlag.data.hash) {				// 全集計対象（開始or終了）のアンケートIDについてまわす				var added:Boolean = false;				for( var i = 0; i < m_arr.length; i++) {					var qCompo:QComponentsInquiry = m_arr[i] as QComponentsInquiry;					if( qCompo == null) alertDialog( "changeStatus() fatal error");					if( qCompo.getQuestionnaire().createDate == createDate) { // 集計対象のアンケートみっけ						added = true;						if( so_stFlag.data.hash[createDate]) {							// 集計開始してる！（追加済みなので、今に始まったことではない、はず）							if( Main.CONF.isStudent( Main.CONF.UID) && getAnswer( Main.CONF.UID, createDate) == null) {								// もし回答がまだだったら、ポップアップで勧告する								//alertDialog( Main.LANG.getReplacedSentence( "%sへの回答をお願いします", qCompo.getQuestionnaire().title));								//Main.HEADER_CON.startBlink( Layout.WINNAME_Q);								popupQ();								qCompo.open();							}						} else {							// 集計終了した							qCompo.finished();						}					}				}				if( ! added) {					// いきなり終了しているものもある（DBからの読み込みの場合）ので、					// m_arrに含まれていなかったら、集計開始or終了に関係なく、新規生成してm_arrにpush＆addChildする					var q:Questionnaire = getQuestionnaireFromSoHashArr( createDate);if( q == null) {	trace( "QComponentsConStudent: " + createDate +"のが変！");}					var new_qCompo:QComponentsInquiry = newQComponentsInquiry( q);					if( so_stFlag.data.hash[ createDate]) {						// 集計中の状態						// 既に回答済みかチェック						if( Main.CONF.isStudent( Main.CONF.UID) && getAnswer( Main.CONF.UID, createDate) == null) {							//alertDialog( Main.LANG.getReplacedSentence( "%sへの回答をお願いします", q.title));							//Main.HEADER_CON.startBlink( Layout.WINNAME_Q);							new_qCompo.open();							dispatchEvent( new Event( "SIZE_CHANGED")); // QContentsStudentに知らせる							popupQ();						} else {							// 回答済み							new_qCompo.answerd();						}					} else {						// 最初から集計終了状態						new_qCompo.finished();					}					addQCompo( new_qCompo);				}							}						onSizeChanged( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, getViewHeight()));		}		protected function popupQ() {			Main.popupQ();		}			}}