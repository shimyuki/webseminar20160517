package window.questionnaire {	import flash.display.*;	import fl.events.*;	import common.*;	import window.*;	import fl.controls.CheckBox;	import flash.events.Event;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import common.AlertManager;	import partition.Layout;		// アンケートのコンポーネントセット　新規／編集用	// タイトル、質問文、選択肢（増減、編集可）を表示。	// まだ集計開始前なので、集計グラフや集計詳細は無し	public class QComponentsMod extends QComponents {		static public const CLICK_SAVE:String = "CLICK_SAVE";		static public const CLICK_DEL:String = "CLICK_DEL";		static public const CLICK_START:String = "CLICK_START";				// エラーメッセージ		private const ERRMSG_TITLE:String = Main.LANG.getParam( "タイトルを入力してください");		private const ERRMSG_SELECTION:String = Main.LANG.getParam( "選択肢を設定してください");		// ラベル、見出し		private const LABEL_TITLE = Main.LANG.getParam( "タイトル");		private const LABEL_DESC = Main.LANG.getParam( "質問文");		private const LABEL_SELECTION = Main.LANG.getParam( "選択肢");		private const LABEL_SAVE = Main.LANG.getParam( "保存する");		private const LABEL_CLEAR = Main.LANG.getParam( "クリア");		private const LABEL_CHANGE = Main.LANG.getParam( "変更を適用する");		private const LABEL_DEL = Main.LANG.getParam( "削除");		private const LABEL_SHOW = Main.LANG.getParam( "アンケート集計結果を生徒に表示する");				private var m_desc:TextField;		private var m_select:TextField;		private var m_chkShow:CheckBox;		private var m_selection:QSelection;		private var m_btnSave:DynamicTextBtn = null;		private var m_btnChange:DynamicTextBtn = null;		private var m_btnDel:DynamicTextBtn = null;		private var m_clickObj:Sprite;		//private var m_questionnaire:Questionnaire = null				public function QComponentsMod( isNew:Boolean = false /*新規作成*/) {						super();						// タイトルのインプットテキスト			var fmt:TextFormat = new TextFormat( Main.CONF.getMainFont(), 13);			fmt.leftMargin = 1;			m_title.defaultTextFormat = fmt;			m_title.background = true;			m_title.border = true;			m_title.backgroundColor = 0xffffff;			m_title.borderColor = 0xcccccc;			m_title.type = TextFieldType.INPUT;			// 質問文と選択肢のラベル			var lab_desc:TextField = TextField( addChild( getLabelText( LABEL_DESC)));			var lab_select:TextField = TextField( addChild( getLabelText( LABEL_SELECTION)));						lab_desc.x = lab_desc.width > lab_select.width ?				m_title.x : m_title.x + ( lab_select.width - lab_desc.width);			lab_select.x = lab_select.width > lab_desc.width ?				m_title.x : m_title.x + ( lab_desc.width - lab_select.width);						// 質問文のインプットテキスト			m_desc = TextField( addChild( new TextField()));			m_desc.defaultTextFormat = fmt;			m_desc.background = true;			m_desc.border = true;			m_desc.backgroundColor = 0xffffff;			m_desc.borderColor = 0xcccccc;			m_desc.multiline = true;			m_desc.wordWrap = true;			m_desc.height = 75; // 適当			m_desc.type = TextFieldType.INPUT;			m_desc.x = lab_desc.x + lab_desc.width + PAD;			m_desc.y = m_title.y + m_title.height + 17;			m_desc.width = W - ( m_desc.x + m_desc.width + PAD * 2);			lab_desc.y = m_desc.y + 2;						// 選択肢セット			m_selection = QSelection( addChild( new QSelection( m_desc.width)));			m_selection.x = m_desc.x;			m_selection.y = m_desc.y + m_desc.height + PAD;			lab_select.y = m_selection.y + 2;			m_selection.addEventListener( QSelection.SIZE_CHANGED, replace);									// アンケート集計結果を生徒に表示するかどうかのCheckBox			m_chkShow = CheckBox( addChild( new CheckBox()));			m_chkShow.label = LABEL_SHOW;			m_chkShow.width += m_chkShow.textField.textWidth;			m_chkShow.x = m_desc.x;			m_chkShow.y = m_selection.y + m_selection.height + PAD;			//m_chkShow.addEventListener( Event.CHANGE, function( e:Event) { m_questionnaire.showall = m_chkShow.selected ? 1 : 0;dispatchEvent( new Event( SHOW_ALL_CHANGED));});			if( isNew) {				// thisは新規作成画面として表示								// 保存ボタン				m_btnSave = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_SAVE)));				m_btnSave.x = ( m_bg.width - m_btnSave.width) / 2;				m_btnSave.setEnabled( true);				m_btnSave.addEventListener( MouseEvent.CLICK, onClickSave);				m_btnSave.y = m_chkShow.y + m_chkShow.height + PAD;								open();			} else {				// thisは登録済みの一覧リストとして表示								// 保存ボタン				m_btnChange = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_CHANGE)));				m_btnChange.x = ( m_bg.width - m_btnChange.width) / 2;				m_btnChange.setEnabled( true);				m_btnChange.addEventListener( MouseEvent.CLICK, onClickSave);								// 削除ボタン				m_btnDel = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_DEL)));				m_btnDel.setEnabled( true);				m_btnDel.addEventListener( MouseEvent.CLICK, onClickDel);								m_btnChange.y = m_btnDel.y = m_chkShow.y + m_chkShow.height + PAD;								// ボタンの位置をちょっとずらしてセンター揃えに				m_btnChange.x = ( m_bg.width - ( m_btnChange.width + m_btnDel.width + 5)) / 2; 				m_btnDel.x = m_btnChange.x + m_btnChange.width + 5;								close();							// m_arrow周辺に開く閉じるの透明ボタンを設置				m_clickObj = Sprite( addChild( new Sprite()));				m_clickObj.graphics.beginFill( 0, 0);				m_clickObj.graphics.drawCircle( 0, 0, m_arrow.width + 2);				m_clickObj.graphics.endFill();				m_clickObj.x = m_arrow.x;				m_clickObj.y = m_arrow.y;				m_clickObj.buttonMode = true;				m_clickObj.addEventListener( MouseEvent.CLICK,					function( e:*) {						if( m_opened) close();						else open();					});							}			super.status4sort = super.SORT_STATUS_BEFORE;						super.changeHeight();		}		public function setNotNew() {			// 保存ボタン			if( m_btnChange == null) {				m_btnChange = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_CHANGE)));				m_btnChange.x = ( m_bg.width - m_btnChange.width) / 2;				m_btnChange.y = H - m_btnChange.height - 10;				m_btnChange.setEnabled( true);				m_btnChange.addEventListener( MouseEvent.CLICK, onClickSave);			}						// 削除ボタン			if( m_btnDel == null) {				m_btnDel = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_DEL)));				m_btnDel.y = m_btnChange.y;				m_btnDel.setEnabled( true);				m_btnDel.addEventListener( MouseEvent.CLICK, onClickDel);			}						// ボタンの位置をちょっとずらしてセンター揃えに			m_btnChange.x = ( m_bg.width - ( m_btnChange.width + m_btnDel.width + 5)) / 2; 			m_btnDel.x = m_btnChange.x + m_btnChange.width + 5;						if( m_btnSave != null) m_btnSave.visible = false;						close();						setStatusBtnIcon();					// m_arrow周辺に開く閉じるの透明ボタンを設置			if( m_clickObj == null) {				m_clickObj = Sprite( addChild( new Sprite()));				m_clickObj.graphics.beginFill( 0, 0);				m_clickObj.graphics.drawCircle( 0, 0, m_arrow.width + 2);				m_clickObj.graphics.endFill();				m_clickObj.x = m_arrow.x;				m_clickObj.y = m_arrow.y;				m_clickObj.buttonMode = true;				m_clickObj.addEventListener( MouseEvent.CLICK,					function( e:*) {						if( m_opened) close();						else open();					});			}		}				function onClickSave( e:MouseEvent) {			var i :int;			// フォームの内容チェック			if( ! checkForm()) return;						var mode:String = "";			if( m_questionnaire == null) {				// 新規作成				mode = "new";				// フォームの内容でm_questionnaireを生成				var dateObj:Date = new Date();				var createDate = dateObj.getFullYear() + "-" +								dateObj.getMonth() + "-" + 								dateObj.getDate() + " " + 								dateObj.getHours() + ":" +								dateObj.getMinutes() + ":"+ 								dateObj.getSeconds();				m_questionnaire = new Questionnaire( m_title.text, m_desc.text, m_selection.getSelection(), null, m_chkShow.selected ? 1 : 0, createDate);									  											} else {				// 更新				mode = "mod";				// フォームの内容をm_layoutに反映させる				m_questionnaire.title = m_title.text;				m_questionnaire.description = m_desc.text;				m_questionnaire.selection = m_selection.getSelection();				m_questionnaire.showall = m_chkShow.selected ? 1 : 0;							}			dispatchEvent( new Event( CLICK_SAVE)); // 新規の場合はQContentsに、更新の場合はQComponentsConに知らせる						/*			//-----------------------			// DBにも保存						var url = Main.CONF.getParam( "SETQUESTIONNAIRE_URL");			if( url == LoadConf.NOTFOUND) {				Main.addErrMsg( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETQUESTIONNAIRE_URL"));				return;			}			var val:URLVariables = new URLVariables();			val.class_id = Main.CONF.CLASS_ID;			val.mode = mode;			val.date = m_questionnaire.createDate;			val.title = m_questionnaire.title;			val.description = m_questionnaire.description;			val.showall = m_questionnaire.showall;						for( i = 0; i < m_questionnaire.selection.length; i++) {				val["selection_arr[" + i + "]"] = m_questionnaire.selection[i];			}						var req:URLRequest = new URLRequest( url);			req.method = URLRequestMethod.POST;			req.data = val;			var loader:URLLoader = new URLLoader();			loader.addEventListener( IOErrorEvent.IO_ERROR, function( e:*) { Main.addErrMsg( "IO_ERROR: " + url);});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( e:*) { Main.addErrMsg( "SECURITY_ERROR: " + url);});			loader.load( req);//if( Main.DEBUG) navigateToURL( req, "_blank");			*/					}				function onClickDel( e:MouseEvent) {			if( m_questionnaire == null) {				// 新規作成（m_questionnaire == null）の場合はこの関数は呼ばれないはず				Main.addErrMsg( "ERROR : cannot delete.");				return;			}			dispatchEvent( new Event( CLICK_DEL));// QComponentsConに知らせる						/*			// DBに投げる			var url = Main.CONF.getParam( "SETQUESTIONNAIRE_URL");			if( url == LoadConf.NOTFOUND) {				Main.addErrMsg( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SETQUESTIONNAIRE_URL"));				return;			}						var val:URLVariables = new URLVariables();			val.class_id = Main.CONF.CLASS_ID;			val.mode = "del";			val.date = m_questionnaire.createDate;			var req:URLRequest = new URLRequest( url);			req.method = URLRequestMethod.POST;			req.data = val;			var loader:URLLoader = new URLLoader();			loader.addEventListener( IOErrorEvent.IO_ERROR, function( e:*) { Main.addErrMsg( "IO_ERROR: " + url);});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function( e:*) { Main.addErrMsg( "SECURITY_ERROR: " + url);});			loader.load( req);//if( Main.DEBUG) navigateToURL( req, "_blank");			*/					}				// 選択状態を設定		override public function init( questionnaire:Questionnaire) {			//m_questionnaire = questionnaire;			m_questionnaire = new Questionnaire( questionnaire.title, questionnaire.description, questionnaire.selection, questionnaire.uidAnswerHash, questionnaire.showall, questionnaire.createDate);			m_title.text = questionnaire.title;			m_desc.text = questionnaire.description;			m_selection.init( questionnaire.selection);			m_chkShow.selected = questionnaire.showall == 1 ? true : false;			//var tmp = "";//for each( var t in questionnaire.selection) { tmp += String( t) + ",";}//Main.addDebugMsg( "QComponentsMod:init: " +questionnaire.selection.length + ": " + tmp);						replace();			setStatusBtnIcon();		}				function setStatusBtnIcon() {			// 集計前アイコンの配置			var dIcon:DynamicTextIcon = DynamicTextIcon( addChild( 						new DynamicTextIcon( this.STATUS_LABEL_BEFORE, STATUS_LABEL_W, STATUS_LABEL_H, 0xe0e0e0, 0xcccccc)));			dIcon.x = W - dIcon.width - PAD;			dIcon.y = m_title.y + ( m_title.height - dIcon.height) / 2;						// 集計開始ボタンの設置			var startBtn:DynamicTextBtn = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_START)));			startBtn.x = dIcon.x - startBtn.width - PAD;			startBtn.y = m_title.y + ( m_title.height - startBtn.height) / 2;			startBtn.setEnabled( true);			startBtn.addEventListener( MouseEvent.CLICK, onClickStart);			m_title.width = W - ( m_title.x + dIcon.width + PAD * 3 + startBtn.width);					}				function onClickStart( e:MouseEvent) {			if( ! checkForm()) return;						dispatchEvent( new Event( CLICK_START)); // QComponetsConに知らせる		}				function checkForm() : Boolean {			// タイトル			var title:String = m_title.text;			title = title.replace( /\n/g, "" );			title = title.replace( /\r/g, "" );			if( title == "") {				errDialog( ERRMSG_TITLE);				return false;			}			// 選択肢			var selArr:Array = m_selection.getSelection();			if( selArr.length == 0) {				errDialog( ERRMSG_SELECTION);				return false;			}			return true;		}				function replace( e:* = null) {			m_chkShow.y = m_selection.y + m_selection.height + PAD;			if( m_btnSave != null) m_btnSave.y = m_chkShow.y + m_chkShow.height + PAD;			if( m_btnChange != null) m_btnChange.y = m_chkShow.y + m_chkShow.height + PAD;			if( m_btnDel != null) m_btnDel.y = m_chkShow.y + m_chkShow.height + PAD;									super.changeHeight();		}				// 選択肢や詳細の表示高さが変わった可能性があったときのsuper.changeHeight()内で呼ばれる		override protected function getOpenedHeight():Number {			if( m_btnSave != null) return m_btnSave.y + m_btnSave.height + PAD * 2;			else return m_btnChange.y + m_btnChange.height + PAD * 2;		}		function getLabelText( str:String):TextField {			var lab:TextField = TextField( addChild( new TextField()));			var fmt:TextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0);			lab.defaultTextFormat = fmt;			lab.autoSize = TextFieldAutoSize.LEFT;			lab.text = str;			return lab;		}		function errDialog( str) {			//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_alert", str);			AlertManager.createAlert( this , str);		}	}}