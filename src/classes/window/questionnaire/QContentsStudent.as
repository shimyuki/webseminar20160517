package window.questionnaire {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.net.*;	import flash.text.*;	import flash.events.*;	import partition.Layout;		// アンケート 受講生用	public class QContentsStudent extends QContents {				private var m_qCompoCon;		private var m_drawerArr:Array;		private var m_nc:NetConnection;				private var so:SharedObject = null; // アンケート共有				public function QContentsStudent( w:Number, h:Number) {						super( w, h); // min_w は後で設定し直すのでとりあえず						m_drawerArr = new Array();						//----------------------------------			// Drawer01：アンケート一覧			//----------------------------------			// 中身の生成 			m_qCompoCon = newQComponentsConStudent(); // 中身のコンテナ						// 配置			var drawer01:Drawer = new Drawer( TITLE_DRAWER_02, m_qCompoCon, m_qCompoCon.getViewHeight() + 10);			drawer01.y = PAD;			m_container.addChild( drawer01);			m_drawerArr.push( drawer01);						m_qCompoCon.addEventListener( "scrollup", scrollup);			m_qCompoCon.addEventListener( "SIZE_CHANGED", function( e:*){ m_scroll.update();});						//drawer01.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);					}				override public function initSo( nc:NetConnection) {			m_nc = nc;			//so = SharedObject.getRemote( Main.CONF.SO_NAME_Q, nc.uri, false);			so = SharedObject.getRemote( Main.CONF.SO_NAME_Q, nc.uri, true);			if ( so==null) {				alertDialog( Main.LANG.getParam( "通信エラー"));				return;			}			so.addEventListener( SyncEvent.SYNC , onSyncSo_1st);			so.connect( nc);			//trace("QconStu:","initSo");		}		function onSyncSo_1st( e:SyncEvent) {/*trace("QconStu:","onSyncSo_1st", so.data.hasOwnProperty( "hashArr"));for each( var hash:Object in so.data.hashArr) {trace("QconStu:","onSyncSo_1st:hash:",hash.title,hash.createDate);}*/			if( so.data.hasOwnProperty( "hashArr")) so.removeEventListener( SyncEvent.SYNC , onSyncSo_1st);			else return;						m_qCompoCon.initSo_stu( m_nc, so);						var q:Questionnaire;			var hashArr:Array;			if( so.data.hashArr != undefined) {				// 既に登録済みのアンケートがあったとき				// Main.CONFのアンケートに追加。必要ないかも				for each( var new_hash:Object in so.data.hashArr) {					if( new_hash.hasOwnProperty( "title") &&					    new_hash.hasOwnProperty( "description") &&					    new_hash.hasOwnProperty( "selection") &&					    //new_hash.hasOwnProperty( "uidAnswerHash") &&					    new_hash.hasOwnProperty( "showall") &&					    new_hash.hasOwnProperty( "createDate")) {						var new_questionnaire:Questionnaire = new Questionnaire( new_hash.title, new_hash.description, new_hash.selection, new_hash.uidAnswerHash, new_hash.showall, new_hash.createDate); 						Main.CONF.addQuestionnaire( new_questionnaire);					} else {						Main.addDebugMsg( "QconLec:アンケートに必須な項目がみつかりませんでした");					}				}							}			//Main.CONFに登録済みのアンケートを追加する			var qArr:Array = Main.CONF.getQuestionnaireArr();			for each( q in qArr) {				var qCompo = null;								/*				// 回答済みかチェック				if( q.uidAnswerHash != null) {									}								for( var i = 0; i < so.data.hashArr.length; i++) {				if( so.data.hashArr[i].createDate != undefined && so.data.hashArr[i].createDate == createDate) {					if( so.data.hashArr[i].uidAnswerHash == undefined ||					   	so.data.hashArr[i].uidAnswerHash == null ||						so.data.hashArr[i].uidAnswerHash[uid] == undefined) {						return null;					} else {						return so.data.hashArr[i].uidAnswerHash[uid];					}				}			*/								if( q.uidAnswerHash == null) {					// 集計前trace("QconStu:",q.title,"uidAnswerHashがNULLなので集計前");									} else {trace("QconStu:",q.title,"uidAnswerHashがNULLじゃないなので集計中or集計後");					// 集計中or集計後					qCompo = newQComponentsInquiry( q);					// 回答済みかチェック					if( q.uidAnswerHash.hasOwnProperty( Main.CONF.UID)) {						qCompo.answerd();					}					//qCompo.finished();				}								if( qCompo != null) m_qCompoCon.addQCompo( qCompo);			}									m_scroll.update();		}						// androidがoverrideする		protected function newQComponentsInquiry( q:Questionnaire) : QComponentsInquiry {			return new QComponentsInquiry( q);		}		// androidがoverrideする		protected function newQComponentsConStudent() {			return new QComponentsConStudent();		}	}}