package window.questionnaire {		import flash.display.Sprite;	import flash.text.*;	import common.DynamicTextBtn;	import fl.controls.SelectableList;	import flash.events.Event;	import flash.events.MouseEvent;		// アンケート情報の、選択肢コンポーネントセット	public class QSelection extends Sprite {				static public const SIZE_CHANGED = "SIZE_CHANGED";		private const LABEL_ADD = Main.LANG.getParam( "追加");		private const PAD = 5;		private var W:Number;		private var m_input:TextField;		private var m_btnAdd:DynamicTextBtn;		private var m_selArr:Array;				public function QSelection( w:Number) {			W = w;						m_btnAdd = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_ADD, 10, 0, 3)));			m_btnAdd.x = W - m_btnAdd.width;			m_btnAdd.buttonMode = true;			m_btnAdd.addEventListener(MouseEvent.CLICK, onClickAdd);						m_input = TextField( addChild( new TextField()));			m_input.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 13);			m_input.background = true;			m_input.border = true;			m_input.backgroundColor = 0xffffff;			m_input.borderColor = 0xcccccc;			m_input.type = TextFieldType.INPUT;			m_input.width = W - m_btnAdd.width - PAD;			m_input.height = 23;						m_btnAdd.y = m_input.y + ( m_input.height - m_btnAdd.height) / 2;						m_selArr = new Array();		}		public function getSelection() : Array {			var arr:Array = new Array();			for( var i = 0; i < m_selArr.length; i++) {				var sel:Sel = m_selArr[ i];trace( sel.getText());				arr.push( sel.getText());			}			return arr;		}		function onClickAdd( e:MouseEvent) {			if( m_input.text == "") return;			addSelection( m_input.text);			m_input.text = "";		}				public function init( arr:Array) {			var i:uint;			while( m_selArr.length) {				var sel:Sel = m_selArr.pop();				sel.removeEventListener( Sel.SORT_ORDER_CHANGED, sort);				sel.removeEventListener( Sel.REMOVED, removeSelection);				sel = null;			}			for( i = 0; i < arr.length; i++) {				addSelection( arr[ i])			}			dispatchEvent( new Event( SIZE_CHANGED));		}				function addSelection( str:String) {			var new_sel:Sel = Sel( addChild( new Sel( str, W)));			m_selArr.push( new_sel);			new_sel.addEventListener( Sel.SORT_ORDER_CHANGED, sort);			new_sel.addEventListener( Sel.REMOVED, removeSelection);			replace();			dispatchEvent( new Event( SIZE_CHANGED));		}		function removeSelection( e:Event) {			var remove_sel:Sel = Sel( e.target);			if( contains( remove_sel)) removeChild( remove_sel);						for( var i = 0; i < m_selArr.length; i++) {				var sel:Sel = m_selArr[ i];				if( sel == remove_sel) {					m_selArr.splice( i, 1);					break;				}			}						remove_sel.removeEventListener( Sel.SORT_ORDER_CHANGED, sort);			remove_sel.removeEventListener( Sel.REMOVED, removeSelection);			replace();			dispatchEvent( new Event( SIZE_CHANGED));			remove_sel = null;		}				function sort( e:Event) {			m_selArr.sortOn( "sortOrder", Array.NUMERIC);			replace();		}		function replace() {			var posi_y = 0;			for( var i = 0; i < m_selArr.length; i++) {				var sel:Sel = m_selArr[ i];				sel.setSortStatus( i, m_selArr.length - 1);				sel.y = posi_y;				posi_y += Sel.H + 2;			}						m_input.y = posi_y + PAD - 2;			m_btnAdd.y = m_input.y + ( m_input.height - m_btnAdd.height) / 2;		}		/*		public function getViewHeight() : Number {			return m_selArr.length * ( Sel.H + 2) * PAD + m_input.height;		}		*/	}}import flash.display.*;import flash.events.*;import common.DynamicTextBtn;import flash.text.*;class Sel extends Sprite {	static public const SORT_ORDER_CHANGED = "SORT_ORDER_CHANGED";	static public const REMOVED = "REMOVED";	static public const H = 30;	public var sortOrder:Number = 0;	private var m_btnSortUp:BtnSortUp;	private var m_btnSortDown:BtnSortDown;	private var m_btnDel:BtnDel;	private var m_text:TextField;		public function Sel( str:String, w) {		graphics.beginFill( 0xe0e0e0);		graphics.drawRect( 0, 0, w, H);		graphics.endFill();				m_btnSortUp = BtnSortUp( addChild( new BtnSortUp()));		m_btnSortDown = BtnSortDown( addChild( new BtnSortDown()));		m_btnDel = BtnDel( addChild( new BtnDel()));		m_btnSortUp.x = 10;		m_btnSortUp.y = ( H - m_btnSortUp.height) / 2;		m_btnDel.x = w - 10 - m_btnDel.width;		m_btnSortDown.x = m_btnSortUp.x + m_btnSortUp.width + 5;		m_btnSortDown.y = ( H - m_btnSortUp.height) / 2;		m_btnDel.y = ( H - m_btnDel.height) / 2;				m_btnDel.addEventListener( MouseEvent.CLICK, onDelClicked);				m_text = TextField( addChild( new TextField()));		m_text.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 12);		m_text.text = str;		m_text.height = m_text.textHeight + 4;		m_text.y = ( H - m_text.height) / 2 - 1;		m_text.x = m_btnSortDown.x + m_btnSortDown.width +10;		m_text.width = w - ( m_text.x + 10 + m_btnDel.width +10);	}	public function getText() : String { return m_text.text;}	public function setSortStatus( num:int, lastNum:int) {		sortOrder = num;		if( sortOrder == 0) {			m_btnSortUp.removeEventListener( MouseEvent.CLICK, onUpClicked);			m_btnSortUp.alpha = 0.5;			m_btnSortUp.buttonMode = false;		} else {			m_btnSortUp.addEventListener( MouseEvent.CLICK, onUpClicked);			m_btnSortUp.alpha = 1;			m_btnSortUp.buttonMode = true;		}		if( sortOrder == lastNum) {			m_btnSortDown.removeEventListener( MouseEvent.CLICK, onDownClicked);			m_btnSortDown.alpha = 0.5;			m_btnSortDown.buttonMode = false;		} else {			m_btnSortDown.addEventListener( MouseEvent.CLICK, onDownClicked);			m_btnSortDown.alpha = 1;			m_btnSortDown.buttonMode = true;		}	}	function onUpClicked( e:MouseEvent) {		sortOrder -= 1.5;		dispatchEvent( new Event( SORT_ORDER_CHANGED));	}	function onDownClicked( e:MouseEvent) {		sortOrder += 1.5;		dispatchEvent( new Event( SORT_ORDER_CHANGED));	}	function onDelClicked( e:MouseEvent) {		m_btnDel.removeEventListener( MouseEvent.CLICK, onDelClicked);		m_btnSortUp.removeEventListener( MouseEvent.CLICK, onUpClicked);		m_btnSortDown.removeEventListener( MouseEvent.CLICK, onDownClicked);		dispatchEvent( new Event( REMOVED));	}}