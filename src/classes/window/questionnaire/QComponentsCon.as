package window.questionnaire {	import flash.display.*;	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import fl.controls.RadioButtonGroup;	import flash.events.Event;	import flash.text.*;	import flash.events.*;	import common.AlertManager;	import flash.net.*;	import partition.Layout;		// アンケート編集（ビュー）／集計結果の表示用コンポーネントセットを複数格納するコンテナ	public class QComponentsCon extends Sprite {				protected var m_arr:Array;		protected const PAD = 10;		protected var so:SharedObject = null; // アンケート共有（編集時や集計時の情報共有用）		protected var so_stFlag:SharedObject = null; // アンケートの開始／終了フラグ。createDateとBooleanの連想配列。trueが開始。				public function QComponentsCon() {			m_arr = new Array();		}		public function addQCompo( qCompo) {			m_arr.push( qCompo);			addChild( qCompo);			replace();		}				public function setSo( _so:SharedObject) {			so = _so;		}				// so.data.hashArrから対象のアンケート情報HASHを取得し、Questionnaireオブジェクトとして返す		protected function getQuestionnaireFromSoHashArr( createDate:String) : Questionnaire {			if( so == null || so.data.hashArr == undefined) {				alertDialog( "getQuestionnaireFromSoHashArr() 1: " + Main.LANG.getParam( "通信エラー"));//trace( "getQuestionnaireFromSoHashArr() 1: ", createDate);				return null;			}						for( var i = 0; i < so.data.hashArr.length; i++) {				if( so.data.hashArr[i].createDate != undefined && so.data.hashArr[i].createDate == createDate) {					var q:Questionnaire = new Questionnaire( "", "", null, null, 0, createDate);					q.updateByHash( so.data.hashArr[i]);					return q;				}			}			trace( "getQuestionnaireFromSoHashArr() 共有オブジェクトに対象のアンケート情報が保存されていません");			alertDialog( "getQuestionnaireFromSoHashArr() 2: " + Main.LANG.getParam( "通信エラー"));			return null;		}				// 回答を取得		protected function getAnswer( uid:String, createDate:String) : String {			if( so == null || so.data.hashArr == undefined) {				//alertDialog( "getAnswer() アンケート情報の共有オブジェクトが存在しません");				alertDialog( "getAnswer() 1: " + Main.LANG.getParam( "通信エラー"));				return null;			}						// so.data.hashArrから対象のアンケート情報HASHを取得			for( var i = 0; i < so.data.hashArr.length; i++) {				if( so.data.hashArr[i].createDate != undefined && so.data.hashArr[i].createDate == createDate) {					if( so.data.hashArr[i].uidAnswerHash == undefined ||					   	so.data.hashArr[i].uidAnswerHash == null ||						so.data.hashArr[i].uidAnswerHash[uid] == undefined) {						return null;					} else {						return so.data.hashArr[i].uidAnswerHash[uid];					}				}			}			//alertDialog( "getAnswer() 共有オブジェクトに対象のアンケート情報が保存されていません");			alertDialog( "getAnswer() 2: " + Main.LANG.getParam( "通信エラー"));			return null;		}				function replace() {			var posi_y:Number = 0;			m_arr.sortOn( [ "status4sort", "time4sort"], [ Array.NUMERIC, Array.DESCENDING | Array.NUMERIC])			for( var i = 0; i < m_arr.length; i++) {				var qCompo = m_arr[ i];				qCompo.y = posi_y;				posi_y += qCompo.H + PAD;			}		}		function onSizeChanged( e:DrawerEvent) {			replace();						// settingContentsのdrawer04:Drawerに知らせる			dispatchEvent( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, getViewHeight()));		}		public function getViewHeight() : Number {			// 全LayoutComponentsの高さを足した合計			var ttlHeight: Number = 0;			for each( var qCompo in m_arr) {				ttlHeight += qCompo.H + PAD;			}			return ttlHeight;		}		function alertDialog( str:String) {			Main.addErrMsg( "QComponentsCon:" + str);		}	}}