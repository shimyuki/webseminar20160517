package window.questionnaire {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.net.*;	import flash.text.*;	import flash.events.*;	import partition.Layout;	import common.AlertManager;		// アンケート 講師用	// 一覧の方に追加されたもののみ逐次SOに追加していく。	// 既に一覧にあるものは、すなわちDBからMain.CONF経由で読み込んだものなので、	// 最初にSOにアクセスしたときにMain.CONFの内容をそのままSOに入れているので、おっけー。	public class QContentsLecturer extends QContents {		private const MSG_SAVED:String = Main.LANG.getParam( "保存しました");		private var m_drawerArr:Array;				private var m_drawerCon01:Sprite;		private var m_qCompoCon:QComponentsConLecturer;				private var so:SharedObject = null; // アンケート共有						public function QContentsLecturer( w:Number, h:Number) {						super( w, h); // min_w は後で設定し直すのでとりあえずゼロ						m_drawerArr = new Array();						//----------------------------------			// Drawer01：新しいアンケートを作成			//----------------------------------			// 中身の生成			m_drawerCon01 = new Sprite(); // 中身のコンテナ			var newQCompo:QComponentsMod = new QComponentsMod( true);			addNewContainer( newQCompo);			// 配置			var drawer01:Drawer = new Drawer( TITLE_DRAWER_01, m_drawerCon01, newQCompo.H + 10);			drawer01.y = PAD;			m_container.addChild( drawer01);			m_drawerArr.push( drawer01);									//----------------------------------			// Drawer02：アンケート一覧			//----------------------------------			// 中身の生成 			m_qCompoCon = new QComponentsConLecturer(); // 中身のコンテナ			/*			// Main.CONFに登録済みのアンケートを追加する			var qArr:Array = Main.CONF.getQuestionnaireArr();			for each( var q:Questionnaire in qArr) {				var qCompo;				if( q.uidAnswerHash == null) {					// 集計前					qCompo = new QComponentsMod();					qCompo.init( q);				} else {					// 集計後					qCompo = new QComponentsResult( q);					qCompo.finished();				}				m_qCompoCon.addQCompo( qCompo);			}			*/						// 配置			var drawer02:Drawer = new Drawer( TITLE_DRAWER_02, m_qCompoCon, m_qCompoCon.getViewHeight() + 10);			drawer02.y = drawer01.y + drawer01.getViewHeight();			m_container.addChild( drawer02);			m_drawerArr.push( drawer02);						m_qCompoCon.addEventListener( "scrollup", scrollup);						drawer01.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);			drawer02.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);						drawer01.close();			drawer02.close();									addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// 					drawer02.open();				});		}						// 新規作成のアンケートをコンテナ(m_drawerCon01)にADD		function addNewContainer( newQCompo:QComponents) {			m_drawerCon01.addChild( newQCompo);			newQCompo.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, newQCompo_changeHeight);			newQCompo.addEventListener( QComponentsMod.CLICK_SAVE, newQCompo_saved);						scrollup();						// ダミーでdispatch			m_drawerCon01.dispatchEvent( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, newQCompo.H)); // 親になるDrawerに知らせる		}				function newQCompo_changeHeight( e:DrawerEvent) {			m_drawerCon01.dispatchEvent( new DrawerEvent( e.type, e.h)); // 親になるDrawerに知らせる		}		function newQCompo_saved( e:Event) {			// 保存されたやつは、			var savedQCompo:QComponentsMod = QComponentsMod( e.target);			// 新規作成コンテナからは削除し、			if( m_drawerCon01.contains( savedQCompo)) m_drawerCon01.removeChild( savedQCompo);			savedQCompo.removeEventListener( DrawerEvent.CONTENTS_H_CHANGED, newQCompo_changeHeight);			savedQCompo.removeEventListener( QComponentsMod.CLICK_SAVE, newQCompo_saved);			// 一覧の方に追加する。			m_qCompoCon.addQCompo( savedQCompo);						// 新規用ではなく更新用に削除ボタン表示などする			savedQCompo.setNotNew();						// 新規作成コンテナには新しいのをadd			addNewContainer( new QComponentsMod( true));						m_drawerArr[0].close(); // 新規はclose			m_drawerArr[1].open(); // 一覧はopen						m_scroll.update();						AlertManager.createAlert( this, MSG_SAVED);						// 一覧の方に追加されたアンケート情報をSOにも追加			if ( so==null) {				alertDialog( Main.LANG.getParam( "通信エラー"));				return;			}			var q:Questionnaire = savedQCompo.getQuestionnaire();			var arr:Array = so.data.hasOwnProperty("hashArr")?so.data.hashArr:new Array();			arr.push( q.getDataHash());			so.data.hashArr = arr;			so.setDirty( "hashArr");			//trace(  "QconLec: soにも保存したよー");		}				function onDrawerSizeChanged( e:Event) {			for( var i = 1; i < m_drawerArr.length; i++) {				m_drawerArr[i].y = m_drawerArr[i-1].y + m_drawerArr[i-1].getViewHeight();			}			m_scroll.update();		}								override public function initSo( nc:NetConnection) {			//so = SharedObject.getRemote( Main.CONF.SO_NAME_Q, nc.uri, false);			so = SharedObject.getRemote( Main.CONF.SO_NAME_Q, nc.uri, true);			if ( so==null) {				alertDialog( Main.LANG.getParam( "通信エラー"));				return;			}			so.addEventListener( SyncEvent.SYNC , onSyncSo_1st);			so.connect( nc);						m_qCompoCon.initSo( nc);		}		function onSyncSo_1st( e:SyncEvent) {			var q:Questionnaire;			var hashArr:Array;			if( so.data.hashArr != undefined) {				// 既に登録済みのアンケートがあったとき				// Main.CONFのアンケートに追加。必要ないかも				for each( var new_hash:Object in so.data.hashArr) {					if( new_hash.hasOwnProperty( "title") &&					    new_hash.hasOwnProperty( "description") &&					    new_hash.hasOwnProperty( "selection") &&					    //new_hash.hasOwnProperty( "uidAnswerHash") &&					    new_hash.hasOwnProperty( "showall") &&					    new_hash.hasOwnProperty( "createDate")) {						var new_questionnaire:Questionnaire = new Questionnaire( new_hash.title, new_hash.description, new_hash.selection, new_hash.uidAnswerHash, new_hash.showall, new_hash.createDate); 						Main.CONF.addQuestionnaire( new_questionnaire);					} else {						Main.addDebugMsg( "QconLec:アンケートに必須な項目がみつかりませんでした");					}				}							}			// 登録済みのアンケートを追加する			var qArr:Array = Main.CONF.getQuestionnaireArr();			for each( q in qArr) {				var qCompo;				if( q.uidAnswerHash == null) {					// 集計前					qCompo = new QComponentsMod();					qCompo.init( q);				} else {					// 集計中or集計後					qCompo = new QComponentsResult( q);					//qCompo.finished();				}				m_qCompoCon.addQCompo( qCompo);			}			so.removeEventListener( SyncEvent.SYNC , onSyncSo_1st);			so.addEventListener( SyncEvent.SYNC , onSyncSo);			m_scroll.update();		}				function onSyncSo( e:SyncEvent) {//trace("QconLec:","onSyncSo", so.data.hasOwnProperty( "hashArr"));			var q:Questionnaire;			var hashArr:Array;			var new_hash:Object;			var new_questionnaire:Questionnaire;			if( so.data.hashArr == undefined) {				// 初めてのアクセス				/*				hashArr = new Array();				// Main.CONFに登録済みのアンケートをSOに入れる				for each( q in Main.CONF.getQuestionnaireArr()) {					hashArr.push( q.getDataHash());				}				so.data.hashArr = hashArr;				so.setDirty( "hashArr");				*/				// Main.CONFのアンケートに追加。				for each( new_hash in so.data.hashArr) {					if( new_hash.hasOwnProperty( "title") &&					    new_hash.hasOwnProperty( "description") &&					    new_hash.hasOwnProperty( "selection") &&					    //new_hash.hasOwnProperty( "uidAnswerHash") &&					    new_hash.hasOwnProperty( "showall") &&					    new_hash.hasOwnProperty( "createDate")) {						new_questionnaire = new Questionnaire( new_hash.title, new_hash.description, new_hash.selection, new_hash.uidAnswerHash, new_hash.showall, new_hash.createDate); 						Main.CONF.addQuestionnaire( new_questionnaire);					} else {						Main.addDebugMsg( "QconLec:アンケートに必須な項目がみつかりませんでした 1");					}				}			} else {				// 変更があったとき				// Main.CONFのアンケートをアップデートor新規追加。				for each( new_hash in so.data.hashArr) {					if( new_hash.createDate != undefined) {						var exist = false;						for each( q in Main.CONF.getQuestionnaireArr()) {							if( new_hash.createDate == q.createDate) {								// アップデート								q.updateByHash( new_hash);								exist = true;							}						}						if( !exist) {							// 新規追加							if( new_hash.hasOwnProperty( "title") &&								new_hash.hasOwnProperty( "description") &&								new_hash.hasOwnProperty( "selection") &&								//new_hash.hasOwnProperty( "uidAnswerHash") &&								new_hash.hasOwnProperty( "showall") &&								new_hash.hasOwnProperty( "createDate")) {								new_questionnaire = new Questionnaire( new_hash.title, new_hash.description, new_hash.selection, new_hash.uidAnswerHash, new_hash.showall, new_hash.createDate); 								Main.CONF.addQuestionnaire( new_questionnaire);									} else {								Main.addDebugMsg( "QconLec:アンケートに必須な項目がみつかりませんでした 2");							}						}					} else {						alertDialog( Main.LANG.getParam( "アンケートにcreateDateは必須です"));					}				}							}		}						override public function setEnabled( b:Boolean):void {		}				override public function setViewWidth( w:Number, debug:String = ""):void {			super.setViewWidth( w);			for each( var drawer:Drawer in m_drawerArr) {				drawer.setViewWidth( w - m_scroll.width - PAD);			}		}		override public function setViewHeight( h:Number):void {			super.setViewHeight( h);		}			}}