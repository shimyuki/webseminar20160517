package window {	import flash.display.*;	import flash.geom.*;	import flash.filters.*;	import flash.events.Event;	import caurina.transitions.*;	import flash.events.MouseEvent;	import window.whiteboard.*;	import common.AlertManager;		// ポップアップコンテナ	public class PopupContainer extends Sprite {		private const POPUP_W:Number = 800;		private const POPUP_H:Number = 550;		private var m_base:Shape;		private var m_rWinArr:Array;				var m_move_x:Boolean = false;		var m_move_y:Boolean = false;		var m_tx:Number;		var m_ty:Number;		public function PopupContainer( w:Number, h:Number) {			// ベース			m_base = new Shape();			m_base.graphics.beginFill( 0x000000, 0);			m_base.graphics.drawRect( 0, 0, w, h);			m_base.graphics.endFill();			addChild( m_base);			m_base.visible = false;						m_rWinArr = new Array();					}		public function isPopuped( rWinName:String) :Boolean {			for( var i = 0; i < numChildren; i++) {				var rWin:ResizableWindow = getChildAt( i) as ResizableWindow;				if( rWin != null && rWin.name == rWinName) {					return true;				}			}			return false;		}		public function addWindow( rWin:ResizableWindow):void {			if( rWin == null) return;						var exist:Boolean = false;			for ( var i = 0; i < m_rWinArr.length; i++) {				if( m_rWinArr[i] === rWin) exist = true;			}			if( ! exist) m_rWinArr.push( rWin);						rWin.filters = [ getBitmapFilter()];			rWin.setViewWidth( rWin.popupWidth);			rWin.setViewHeight( rWin.popupHeight);			addChild( rWin);						//rWin.x = rWin.y = 30 + m_rWinArr.length + TitleBar.H;			rWin.x = rWin.y = 50 + numChildren * 10;			m_base.visible = true;						rWin.addEventListener( Event.ENTER_FRAME, onEnterFramePopup);					}		public function removeWindow( rWin:ResizableWindow):void {			if( rWin == null) return;			rWin.removeEventListener( Event.ENTER_FRAME, onEnterFramePopup);						if( contains( rWin)) removeChild( rWin);			rWin.filters = null;						for ( var i = 0; i < m_rWinArr.length; i++) {				if( m_rWinArr[i] === rWin) {					m_rWinArr.splice( i, 1);					break;				}			}			if( m_rWinArr.length == 0) m_base.visible = false;					}						public function setBaseWidth( w:Number) {			m_base.width = w;		}				// WbSlideのonEnterFrame()から呼ばれる		// カーソル位置がポップアップとかぶっているかの判定		public function isRollOveredExceptWbWin(): Boolean {			var ret:Boolean = false;			if( isRollOvered()) {				for ( var i = 0; i < m_rWinArr.length; i++) {					var rWin = m_rWinArr[i];					if( contains( rWin)) {						// rWinがホワイトボードかチェック						var chk:WhiteboardWindow = rWin as WhiteboardWindow;						if( chk == null) ret = true;// ホワイトボードポップアップ以外とかぶってる						//else ret = false; 						//break;					}					   				}			}//if( ExternalInterface.available) ExternalInterface.call( "flashFunc_title", "isRollOveredExceptWbWin:" + String( ret));			return ret;					}		// Partitionから呼ばれる		// カーソル位置がポップアップとかぶっているかの判定		public function isRollOvered(): Boolean {			for ( var i = 0; i < m_rWinArr.length; i++) {				var rWin:ResizableWindow = m_rWinArr[i];				if( contains( rWin)				   && rWin.x < mouseX && mouseX < rWin.x + rWin.getViewWidth()				   && rWin.y < mouseY && mouseY < rWin.y + rWin.getViewHeight()) {										return true;				}				   			}			return false;		}				function onEnterFramePopup( e:Event) {			var rWin:ResizableWindow = ResizableWindow( e.target);						// ポップアップウィンドウがステージから大幅にはみ出ていないかチェック			if( rWin.y < 0) {				m_move_y = true;				m_ty = 0;			} else if( rWin.y > stage.stageHeight - TitleBar.H) {				m_move_y = true;				m_ty = stage.stageHeight - TitleBar.H;			} else {				m_move_y = false;			}			if( rWin.x + rWin.getViewWidth() < TitleBar.H * 2) {				m_move_x = true;				m_tx = - rWin.getViewWidth() + TitleBar.H * 2;			} else if( rWin.x > stage.stageWidth - TitleBar.H * 2) {				m_move_x = true;				m_tx = stage.stageWidth - TitleBar.H * 2;			} else {				m_move_x = false;			}						// はみ出ていたら、自動修正			if( m_move_y) {				var dy:Number = ( m_ty - rWin.y) / 3;				if( Math.abs( dy) < 0.01) {					rWin.y = m_ty;				} else {					rWin.y += dy;				}			}			if( m_move_x) {				var dx:Number = ( m_tx - rWin.x) / 3;				if( Math.abs( dx) < 0.01) {					rWin.x = m_tx;				} else {					rWin.x += dx;				}			}					}				function getBitmapFilter():BitmapFilter {            var color:Number = 0x000000;            var angle:Number = 45;            var alpha:Number = 0.8;            var blurX:Number = 8;            var blurY:Number = 8;            var distance:Number = 3;            var strength:Number = 0.65;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.HIGH;            return new DropShadowFilter(distance,                                        angle,                                        color,                                        alpha,                                        blurX,                                        blurY,                                        strength,                                        quality,                                        inner,                                        knockout);        }	}}