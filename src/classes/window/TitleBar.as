package window {	import flash.display.*;	import flash.geom.*;	import flash.events.*;	import flash.net.*;	import common.*;	import partition.*;	import window.whiteboard.toolchip.*;	import window.whiteboard.WhiteboardWindow;	import common.AlertManager;		// サイズ変更可能タイトルバー	public class TitleBar extends ResizableContainer {		static public const H = 35;		static public const DRAG_NG = "DRAG_NG";		static public const DRAG_OK = "DRAG_OK";		private const MARGIN_LR = 10;		private const COLOR_BTN_ON = 0xcc0000;		private var m_leftContents;		protected var m_leftCon_1st = null;		private var m_leftCon_2nd = null;		private var m_rightContents;		private var m_closeBtn:IconBtn;		private var m_popupBtn:IconBtn;		private var m_popdownBtn:IconBtn;		protected var m_bar:Shape;		private var m_draggable:Boolean = true; // ツールチップボタンの選択パネル表示時はfalseになって、ドラッグを阻止する				private var m_popupReq:URLRequest;		private var m_usePopup:Boolean;				//private var m_popupByBtn:Boolean = true; // ボタンによってポップアップされるか（環境設定とか）				// popupReq：ポップアップボタンクリック時に、別ウィンドウを開きたい場合は設定する		// usePopup：ポップアップボタンを表示するか否か		// leftContents_unauthorized : 第二のleftContents。権限を持たない場合などの。		public function TitleBar( leftCon_1st, rightCon, w:Number,								 popupReq:URLRequest = null, usePopup:Boolean = true,								 leftCon_2nd = null) {									super( w, H, 0, H); // min_w は後で設定し直すのでとりあえずゼロ						m_popupReq = popupReq; // ホワイトボードのときのみ設定される。ポップアップ時にnavigateToURLする			m_leftCon_1st = leftCon_1st;			m_leftCon_2nd = leftCon_2nd;			m_usePopup = usePopup;						// タイトルバー（グラデーション）			var fillType:String = GradientType.LINEAR;			var colors:Array = [Main.MAIN_COLOR_01, Main.MAIN_COLOR_01];			var alphas:Array = [1, 1];			var ratios:Array = [0x00, 0xFF];			var matr:Matrix = new Matrix();			matr.createGradientBox( w, H , Math.PI/2, 0, 0);			m_bar = Shape( addChild( new Shape()));			m_bar.graphics.beginGradientFill( fillType, colors, alphas, ratios, matr, SpreadMethod.PAD);			m_bar.graphics.drawRect( 0, 0, w, H);					m_bar.graphics.endFill();						// ポップアップボタン			var popupOn = new PopupIcon();			var ct:ColorTransform = new ColorTransform();			ct.color = COLOR_BTN_ON;			popupOn.transform.colorTransform = ct;			m_popupBtn = new IconBtn( new PopupIcon(), popupOn);			m_popupBtn.x = w - m_popupBtn.width - MARGIN_LR;			m_popupBtn.y = ( H - m_popupBtn.height) / 2;			addChild( m_popupBtn);			m_popupBtn.visible = usePopup;						// ポップアップ解除ボタン			var popdownOn = new PopdownIcon();			//var ct:ColorTransform = new ColorTransform();			ct.color = COLOR_BTN_ON;			popdownOn.transform.colorTransform = ct;			m_popdownBtn = new IconBtn( new PopdownIcon(), popdownOn);			m_popdownBtn.x = w - m_popdownBtn.width - MARGIN_LR;			m_popdownBtn.y = ( H - m_popdownBtn.height) / 2;			addChild( m_popdownBtn);			m_popdownBtn.visible = false;						// 閉じるボタン			var closeOn = new CloseIcon();			closeOn.transform.colorTransform = ct;			m_closeBtn = new IconBtn( new CloseIcon(), closeOn);			m_closeBtn.x = w - m_closeBtn.width - MARGIN_LR;			m_closeBtn.y = ( H - m_closeBtn.height) / 2;			addChild( m_closeBtn);			m_closeBtn.visible = false;						m_leftContents = addChild( new Sprite());			m_leftContents.addChild( m_leftCon_1st);			m_leftContents.x = MARGIN_LR;			m_leftCon_1st.addEventListener( ToolchipEvent.SHOW_PANEL, function( e:*) { m_draggable = false;});			m_leftCon_1st.addEventListener( ToolchipEvent.HIDE_PANEL, function( e:*) { m_draggable = true;});			//m_leftContents.addEventListener( DRAG_NG, function( e:*) { m_draggable = false;});			//m_leftContents.addEventListener( DRAG_OK, function( e:*) { m_draggable = true;});						MIN_W = MARGIN_LR + m_leftContents.width + MARGIN_LR + m_popupBtn.width + MARGIN_LR;			if( rightCon != null) {				m_rightContents = addChild( new Sprite());				m_rightContents.addChild( rightCon);				m_rightContents.x = m_popupBtn.x - MARGIN_LR - m_rightContents.width;				MIN_W += m_rightContents.width + MARGIN_LR;								//m_rightContents.addEventListener( DRAG_NG, function( e:*) { m_draggable = false;});				//m_rightContents.addEventListener( DRAG_OK, function( e:*) { m_draggable = true;});			}						if( MIN_W > 500) MIN_W = 500; // とりあえず									addEventListener( Event.ADDED_TO_STAGE, onAdded);						function onAdded( e:Event) {				if( parent != null && parent.parent.name == PartitionContainer.CONTAINER_NAME && m_usePopup) {					// パーティションコンテナの中にADDされたら、ポップアップ／戻るボタンを表示して閉じるボタンは使わない。					m_closeBtn.visible = false;					m_popupBtn.visible = true;				}			}			/*			function onRemoved( e:Event) {				m_closeBtn.visible = true;				m_popupBtn.visible = false;				removeEventListener( Event.REMOVED_FROM_STAGE, onRemoved);				addEventListener( Event.ADDED_TO_STAGE, onAdded);			}*/		}		public function changeTitleText( str:String) {			if( m_leftCon_1st as TitleBarContents) {				TitleBarContents( m_leftCon_1st).changeTextIfContentsIsText( str);			}		}				// ResizableWindow経由でMainからレイアウト変更時に呼ばれる。		// ポップアップアイコンの一時的非表示の設定。		// 引数：ポップアップ禁止レイアウトの場合はfalse、通常レイアウトの場合はtrue		public function setPopupTemporary( b:Boolean) {			if( !b) {				if( contains( m_popupBtn)) removeChild( m_popupBtn);			} else {				addChild( m_popupBtn);			}		}		public function useCloseBtn() {			if( m_usePopup) m_closeBtn.visible = true;			m_popupBtn.visible = m_popdownBtn.visible = false;		}		public function isDraggable() : Boolean { return m_draggable;}				// 第二のタイトル（ホワイトボードの場合は権限無し時のタイトル、など）を使うか否か		public function use2ndTitle( b:Boolean) {			if( b) {				if( m_leftContents.contains( m_leftCon_1st)) m_leftContents.removeChild( m_leftCon_1st);				if( m_leftCon_2nd != null) m_leftContents.addChild( m_leftCon_2nd);				if( m_rightContents != null) m_rightContents.visible = false;			} else {				if( m_leftContents.contains( m_leftCon_2nd)) m_leftContents.removeChild( m_leftCon_2nd);				m_leftContents.addChild( m_leftCon_1st);				if( m_rightContents != null) m_rightContents.visible = true;			}		}		public function showRightTitle( b:Boolean) {			if( m_rightContents != null) m_rightContents.visible = b;		}				// 講師のみ		// 画面モード切り替え時にMainからWhiteboardWindow経由で呼ばれる		// 同期モードの場合、ポップアップWindowのサイズをpostで指定するため		public function setPopupReq( popupReq:URLRequest) {			m_popupReq = popupReq;		}								// 受講生の場合、Mainから画面モード変更時にポップアップ中だったら呼ばれる。		public function stopPopup() {			if( m_popdownBtn.visible) onPopdown();			else if( m_closeBtn.visible) onClose();		}				function onPopup( e:Event) {			if( m_popupReq != null) {				navigateToURL( m_popupReq, "_blank");				dispatchEvent( new Event( WhiteboardWindow.POPUP_navToURL));			} else {				dispatchEvent( new Event( ResizableWindow.POPUP));				m_popupBtn.visible = false;				if( m_usePopup) m_popdownBtn.visible = true;			}		}		function onPopdown( e:Event = null) {			dispatchEvent( new Event( ResizableWindow.POPUP_END));			if( m_usePopup) m_popupBtn.visible = true;			m_popdownBtn.visible = false;		}		function onClose( e:Event = null) {			dispatchEvent( new Event( ResizableWindow.POPUP_CLOSE));		}						override public function setEnabled( b:Boolean):void {			m_popupBtn.setEnabled( b);			m_popdownBtn.setEnabled( b);			m_closeBtn.setEnabled( b);						if( b) {				m_popupBtn.addEventListener( MouseEvent.CLICK, onPopup);				m_popdownBtn.addEventListener( MouseEvent.CLICK, onPopdown);				m_closeBtn.addEventListener( MouseEvent.CLICK, onClose);			} else {				m_popupBtn.removeEventListener( MouseEvent.CLICK, onPopup);				m_popdownBtn.removeEventListener( MouseEvent.CLICK, onPopdown);				m_closeBtn.removeEventListener( MouseEvent.CLICK, onClose);			}		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);			m_bar.width = w;			m_popupBtn.x = w - m_popupBtn.width - MARGIN_LR;			m_popdownBtn.x = w - m_popdownBtn.width - MARGIN_LR;			m_closeBtn.x = w - m_closeBtn.width - MARGIN_LR;						if( m_rightContents != null) {				m_rightContents.x = m_popupBtn.x - MARGIN_LR - m_rightContents.width;			}			if( m_leftContents != null && m_rightContents != null) {				if( m_leftContents.width + m_rightContents.width + m_popupBtn.width + MARGIN_LR * 2 > w) {					m_rightContents.x = m_leftContents.x + m_leftContents.width;					m_popupBtn.x = m_popdownBtn.x = m_closeBtn.x = m_rightContents.x + m_rightContents.width + MARGIN_LR;				}			}		}		override public function setViewHeight( h:Number):void {			//super.setViewHeight( h);		}							}}