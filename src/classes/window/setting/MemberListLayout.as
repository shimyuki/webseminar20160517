package window.setting {	import flash.display.*;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import partition.*;	import flash.events.*;	import fl.controls.listClasses.CellRenderer;		// 環境設定の画面モード作成／編集（ビュー）用コンポーネントセットの、受講生一覧の分割	public class MemberListLayout extends Sprite {		protected const W = 770;		protected const PAD = 3;		protected var m_cols;		protected var m_rows;		protected var m_allUidArr:Array = null;		protected var m_uidArr:Array;		protected var m_cellArr:Array = null;		protected var m_selectedUidArr:Array = null;		public function MemberListLayout() {			m_cellArr = new Array();		}				public function getSelectedUidArr() : Array {			if( m_selectedUidArr == null) {				m_selectedUidArr = new Array();			} else {				while( m_selectedUidArr.length) m_selectedUidArr.pop();			}			for each( var cell in m_cellArr) {				if( cell.getSelectedUid() != null) m_selectedUidArr.push( cell.getSelectedUid());			}			return m_selectedUidArr;		}				protected function heightChanged() {			dispatchEvent( new Event( Event.CHANGE));		}				// uidArrがnullの場合は全員表示(講師も含めて)		protected function reset( cols:int, uidArr:Array = null) {			if( m_allUidArr == null) setAllUid();						m_cols = cols;			m_uidArr = uidArr;			if( m_uidArr == null) {				// uidArrがnullなので全員表示				m_uidArr = new Array();				for each( var uid:String in m_allUidArr) {					m_uidArr.push( uid);				}			} 						// セル配列の初期化			if( m_cellArr == null) {				m_cellArr = new Array();			} else {				while( m_cellArr.length) {					var cell = m_cellArr.pop();					cell.unload();					if( contains( cell)) removeChild( cell);					//cell.removeEventListener();				}			}					}				// 列数の変更時		public function changeCols( cols) {			m_cols = cols;						var cell_w = ( W - PAD * ( cols - 1)) / cols;			var posi_x = 0;			var posi_y = 0;			for( var i:uint = 0; i < m_cellArr.length; i++) {				var cell = m_cellArr[i];				// セルのサイズを列数に応じて変える				cell.setWidth( cell_w);								// セルの位置を変える				cell.x = posi_x;				cell.y = posi_y;				posi_x += cell.getViewWidth() + PAD;				if( posi_x + cell.getViewWidth() > W) {					// 次は新しい行					posi_x = 0;					posi_y += cell.getViewHeight() + PAD;				}			}			heightChanged();		}				public function getViewHeight() : Number {			if( m_cellArr.length == 0) return 0;						var row = Math.ceil( m_cellArr.length / m_cols); // 行数			return row * Cell( m_cellArr[0]).getViewHeight() + ( row - 1) * PAD;		}				function setAllUid() {			m_allUidArr = new Array();			var allMember = Main.CONF.getMemberArr();			if( ! allMember) {				m_allUidArr = []; // メンバー情報がないー				alertDialog( Main.LANG.getParam( "参加メンバーが登録されていません"));			}  else {				for each( var member:Member in allMember) {										// 講師は除く					if( Main.CONF.isPro( member.uid)) continue;					m_allUidArr.push( member.uid);				}			}		}		protected function alertDialog( str:String) {			Main.addErrMsg("MemberListLayout:" + str);		}	}}