package window.setting {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import caurina.transitions.*;	// MemberSettingContentsの個別アクションログの部分(Drawerのコンテンツ)	public class MemberLog extends Sprite {				static public const H = 400;				private const INIT_Y = 0;		private const PAD = 8;		private var m_container:Sprite;		private var m_containerMask:Sprite;		private var m_scroll:SimpleScrollBar;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				private var m_uid:String;		private var m_base:Shape;		private var m_text:TextField;				private var m_nc:NetConnection;				private var so:SharedObject = null;		public function MemberLog( uid:String) {			var w = 400;						m_uid = uid;			m_base = Shape( addChild( new Shape()));			m_base.graphics.beginFill( 0xf0f0f0);			m_base.graphics.drawRect( 0, 0, w, H);			m_base.graphics.endFill();									// 表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.y = PAD;						// 表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, H);			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// 表示コンテナのスクロールバー			m_scroll = addChild( new SimpleScrollBar()) as SimpleScrollBar;			m_scroll.y = INIT_Y;			m_scroll.setSize( m_scroll.width, H);						m_scroll.setScrollTarget( m_container);			m_scroll.scrollMask = m_containerMask;						// テキスト			m_text = new TextField();			m_text.wordWrap = true;			m_text.multiline = true;			m_text.condenseWhite = true;			m_text.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			m_text.width = w - PAD * 2 - m_scroll.width;			m_container.addChild( m_text);			m_text.x = m_text.y = PAD;			addHtmlText( Main.CONF.getMemberLog( uid));						// テキストのCSS			var style:StyleSheet = new StyleSheet();            var p:Object = new Object();			p.fontSize = 10;			p.color = "#555555";			p.leading = 3;			p.marginTop = 10;			style.setStyle("p", p);			m_text.styleSheet = style;						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					// スクロールバーを一番上の状態に。					m_container.y = INIT_Y;					m_scroll.setBarYMin();									});					}				// 最初にDBの内容（LoadConfの）を入れるためにコンストラクタから呼ばれ、		// SharedObjectの値変更イベントから呼ばれるMemberSettingContents経由でMainから呼ばれる		public function addHtmlText( htmlText:String) {			m_text.htmlText += htmlText;			m_text.height = m_text.textHeight + 8;			// バーの位置を一番下にもっていきたい。。			//m_container.y = m_containerMask.height - m_container.height + INIT_Y;			m_scroll.update();						// 指名されました書き込みの後、挙手終了を反映させるためdispatchしてLiveStatusManagerに知らせる			dispatchEvent( new Event( Main.LANG.getParam( "指名されました")));		}						// LiveStatusManagerから呼ばれる。		// ここではSharedObjectの値を変更するだけ。		public function addLog( comment:String) {			if( so==null) {				alertDialog( m_uid+"'s log: [" + comment + "] cannot saved.");				return;			}						var now:Date = new Date();			var hour:String = now.getHours() < 10 ? "0" + String( now.getHours()) : String( now.getHours());			var min:String = now.getMinutes() < 10 ? "0" + String( now.getMinutes()) : String( now.getMinutes());			var htmlLogText:String = "<p>" + hour + ":" + min + " " + comment + "</p>";			if( so.data[ m_uid] != htmlLogText) {				// 連続して同じ書き込みはしないよ				so.setProperty( m_uid, htmlLogText);				//saveDB( htmlLogText);			}		}				public function setSo( so:SharedObject) : void {			this.so = so;			if( so != null) {								/*//SharedObjectの値変更イベントの処理				so.addEventListener( SyncEvent.SYNC, onSync_1st);				function onSync_1st( e:SyncEvent):void {					// 初めてsoにアクセスしたときのso.data.addCommentには					// 最後にDBに登録された内容が入っているかも？なので、					// LoadConf読み込みで反映されているはずなので、					// これはm_textには反映しない。					so.removeEventListener( SyncEvent.SYNC, onSync_1st);					so.addEventListener( SyncEvent.SYNC, onSync);				}*/				/*function onSync( e:SyncEvent):void {					if( ! so.data.hasOwnProperty( m_uid)) return;					if( so.data[ m_uid]== "") return;					addHtmlText( so.data[ m_uid]);					so.setProperty( m_uid, ""); // 初めてsoにアクセスしたときの二重投稿をさけるため空にもどしておく				}*/			}		}		/*		function saveDB( htmlText:String) {			var path:String = Main.CONF.getParam( "SAVETEXT_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SAVETEXT_URL"));				return;			}			var req:URLRequest = new URLRequest( path);			req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.mode = "actionlog";			variables.class_id = Main.CONF.CLASS_ID;			variables.uid = m_uid;			variables.text = htmlText;			req.data = variables;									var loader:URLLoader = new URLLoader();			loader.load( req);			loader.addEventListener( IOErrorEvent.IO_ERROR, function ( e:*) {				alertDialog( "IO_ERROR: " + path);			});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function ( e:*) {				alertDialog( "SECURITY_ERROR: " + path);			});		}								*/		public function setViewWidth( w:Number):void {						//m_containerMask.width = w - m_scroll.width;			m_scroll.x = w - m_scroll.width;								m_text.width = w - PAD * 2 - m_scroll.width;			m_text.height = m_text.textHeight + 8;						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW ) {				m_preW = w;				m_base.graphics.clear();				m_base.graphics.beginFill( 0xf0f0f0);				m_base.graphics.drawRect( 0, 0, w - m_scroll.width - 1, H);				m_base.graphics.endFill();				m_containerMask.graphics.clear();				m_containerMask.graphics.beginFill(0);				m_containerMask.graphics.drawRect( 0, 0, w - m_scroll.width, H);				m_containerMask.graphics.endFill();				m_scroll.update();			}		}				// LiveStatusManagerから呼ばれる		public function getUid() : String {			return m_uid;		}				function alertDialog( str:String) {			Main.addErrMsg( "MemberLog:" + str);		}	}}