package window.setting {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.net.*;	import flash.text.*;	import flash.events.*;	import partition.Layout;	import common.AlertManager;	import flash.media.SoundCodec;		// 環境設定	public class SettingContents extends ResizableContainer {		static public const LEC_REPUBLISH_BTN_CLICKED = "LEC_REPUBLISH_BTN_CLICKED";		static public const LEC_REC_TYPE_CHANGED = "LEC_REC_TYPE_CHANGED";		static public const STU_REPUBLISH_BTN_CLICKED = "ALL_STU_REPUBLISH_BTN_CLICKED";		static public const STU_EVICTED_BTN_CLICKED = "ALL_STU_EVICTED_BTN_CLICKED";		static public const STU_RECEIVE_SETTING_CHANGED = "ALL_STU_RECEIVE_SETTING_CHANGED";		static public const INIT_REC_TYPE = StreamComponents.REC_TYPE_1;		private const TITLE_DRAWER_01 = Main.LANG.getParam( "講師の動画配信設定");		//private const TITLE_DRAWER_02 = Main.LANG.getParam( "受講生設定の一括変更");		//private const TITLE_DRAWER_03 = Main.LANG.getParam( "新しい画面モードを作成");		//private const TITLE_DRAWER_04 = Main.LANG.getParam( "画面モード一覧");		//private const LABEL_CAMERA = Main.LANG.getParam( "映像");		//private const LABEL_MIC = Main.LANG.getParam( "映像");		//private const LABEL_WB = Main.LANG.getParam( "ホワイトボード書き込み権限");		//private const LABEL_DOC = Main.LANG.getParam( "資料の自由閲覧権限");		private const LABEL_APPLY = Main.LANG.getParam( "適用する");		private const MSG_APPLYED = Main.LANG.getParam( "適用しました");		//private const MSG_SAVED = Main.LANG.getParam( "画面モード一覧に追加しました");				private var m_container:Sprite;		private var m_containerMask:Sprite;		private var m_scroll:SimpleScrollBar;		private const PAD = 8;		private const INIT_Y = 2;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				private var m_lecStreamCompo:StreamComponents; // 講師の動画配信設定コンポーネントセット		//private var m_stuStreamCompo:StreamComponents; // 全受講生の動画配信一括設定コンポーネントセット		//private var m_stuAuthorityCompo:AuthorityComponents; // 受講生の権限一括設定コンポーネントセット		//private var m_stuReceiveCompo:ReceiveComponents; // 受講生の[講師映像の受信設定]一括設定コンポーネントセット		//private var m_newLayoutCompo:LayoutComponents; // 新規画面モード作成コンポーネントセット		private var m_btnDrawer01:DynamicTextBtn;		private var m_btnDrawer02:DynamicTextBtn;		private var m_drawerArr:Array;				private var m_drawerCon03:Sprite;		private var m_layoutCompoCon:LayoutComponentsCon;						public function SettingContents( w:Number, h:Number, isNormalDelivery:Boolean /*通常配信かiOS配信か*/) {						super( w, h, 0, 0); // min_w は後で設定し直すのでとりあえずゼロ						// 表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.x = PAD;			m_container.y = INIT_Y;						// 表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, 1);			m_containerMask.x = m_container.x;			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// 表示コンテナのスクロールバー			m_scroll = SimpleScrollBar( addChild( new SimpleScrollBar()));			m_scroll.y = INIT_Y;			m_scroll.setSize( m_scroll.width, 200);			m_scroll.setScrollTarget( m_container);			m_scroll.scrollMask = m_containerMask;						m_drawerArr = new Array();						//----------------------------------			// Drawer01：講師の動画配信設定			//----------------------------------			// 中身の生成			m_lecStreamCompo = new StreamComponents();// コンポーネントセット			m_lecStreamCompo.hideEvict();			m_lecStreamCompo.addRecordSetting( INIT_REC_TYPE, isNormalDelivery);			m_lecStreamCompo.addAudioCodecSetting( Main.LANG.getParam( "受講生全員にも適用する"), isNormalDelivery);			m_lecStreamCompo.init( Main.CONF.getMemberDataHash( Main.CONF.getProId()));			m_lecStreamCompo.addEventListener( StreamComponents.REPUBLISH_BTN_CLICKED, 					function( e:*){ dispatchEvent( new Event( LEC_REPUBLISH_BTN_CLICKED));}); // 講師の配信やりなおし Mainに知らせる			m_btnDrawer01 = new DynamicTextBtn( LABEL_APPLY); // 適用するボタン			m_btnDrawer01.setEnabled( true);			var drawerCon01 = new Sprite(); // 中身のコンテナ			drawerCon01.addChild( m_lecStreamCompo);			m_btnDrawer01.x = 370;			m_btnDrawer01.y = drawerCon01.y + m_lecStreamCompo.height - 20;			drawerCon01.addChild( m_btnDrawer01);			m_btnDrawer01.addEventListener( MouseEvent.CLICK, saveLecStream);			// 配置			var drawer01:Drawer = new Drawer( TITLE_DRAWER_01, drawerCon01, m_lecStreamCompo.height + m_btnDrawer01.height - 20);			m_container.addChild( drawer01);			m_drawerArr.push( drawer01);			//Main.checkRunTime( "Drawer01終了、Drawer02開始");			/*			//----------------------------------			// Drawer02：受講生設定の一括変更			//----------------------------------			// 中身の生成			m_stuStreamCompo = new StreamComponents();// コンポーネントセット			m_stuStreamCompo.addAudioCodecSetting( Main.LANG.getParam( "講師にも適用する"), false);			m_stuStreamCompo.init({ bandwidth:Member.DEFAULT_BANDWIDTH,								  	fps:Member.DEFAULT_FPS,									camerawidth:Member.DEFAULT_CAMERA_W,									cameraheight:Member.DEFAULT_CAMERA_H,									rate:Member.DEFAULT_KHZ,									silencelevel:Member.DEFAULT_SILENCE_LEVEL,									gain:Member.DEFAULT_GAIN});			m_stuStreamCompo.addEventListener( StreamComponents.REPUBLISH_BTN_CLICKED,					function( e:*){ dispatchEvent( new Event( STU_REPUBLISH_BTN_CLICKED));}); // 全受講生の配信やり直し Mainに知らせる			m_stuStreamCompo.addEventListener( StreamComponents.EVICTED_BTN_CLICKED,					function( e:*){ dispatchEvent( new Event( STU_EVICTED_BTN_CLICKED));}); // 全受講生の強制退去 Mainに知らせる						m_stuAuthorityCompo = new AuthorityComponents();// コンポーネントセット			m_stuAuthorityCompo.init( { video:Member.STATUS_ON,									 mic:0, whiteboard:0, read:0, evicted:0});						m_stuReceiveCompo = new ReceiveComponents();						m_btnDrawer02 = new DynamicTextBtn( LABEL_APPLY); // 適用するボタン			m_btnDrawer02.setEnabled( true);			var drawerCon02 = new Sprite(); // 中身のコンテナ			drawerCon02.addChild( m_stuStreamCompo);			m_stuAuthorityCompo.x = 30;			m_stuAuthorityCompo.y = drawerCon02.y + StreamComponents.H + 10;			drawerCon02.addChild( m_stuAuthorityCompo);			m_stuReceiveCompo.x = 30;			m_stuReceiveCompo.y = m_stuAuthorityCompo.y + AuthorityComponents.H + 10;			drawerCon02.addChild( m_stuReceiveCompo);						m_btnDrawer02.x = m_btnDrawer01.x;			m_btnDrawer02.y = m_stuReceiveCompo.y + m_stuReceiveCompo.height + 10;			drawerCon02.addChild( m_btnDrawer02);			m_btnDrawer02.addEventListener( MouseEvent.CLICK, saveAllStuStream);						// 配置			var drawer02:Drawer = new Drawer( TITLE_DRAWER_02, drawerCon02, StreamComponents.H + AuthorityComponents.H + m_stuReceiveCompo.height + m_btnDrawer02.height + 40);			drawer02.y = drawer01.y + drawer01.getViewHeight();			m_container.addChild( drawer02);			m_drawerArr.push( drawer02);			//Main.checkRunTime( "Drawer02終了、Drawer03開始");			//----------------------------------			// Drawer03：新しい画面モードを作成			//----------------------------------			// 中身の生成			m_drawerCon03 = new Sprite(); // 中身のコンテナ			var newLayoutCompo:LayoutComponents = new LayoutComponents( true);			addNewLayoutContainer( newLayoutCompo);			// 配置			var drawer03:Drawer = new Drawer( TITLE_DRAWER_03, m_drawerCon03, newLayoutCompo.H + 10);			drawer03.y = drawer02.y + drawer02.getViewHeight();			m_container.addChild( drawer03);			m_drawerArr.push( drawer03);			Main.checkRunTime( Main.LANG.getParam( "初期化チェックポイント: 画面モード一覧の初期化開始"));			//----------------------------------			// Drawer04：画面モード一覧			//----------------------------------			// 中身の生成 Main.CONFに登録済みの画面レイアウトを追加する			m_layoutCompoCon = new LayoutComponentsCon(); // 中身のコンテナ			var layoutArr:Array = Main.CONF.getLayoutArr();			for each( var layout:Layout in layoutArr) {				var layoutCompo:LayoutComponents = new LayoutComponents();				layoutCompo.init( layout);				m_layoutCompoCon.addLayoutCompo( layoutCompo);			}Main.checkRunTime( Main.LANG.getParam( "初期化チェックポイント: 画面モード一覧の初期化完了"));			// 配置			var drawer04:Drawer = new Drawer( TITLE_DRAWER_04, m_layoutCompoCon, m_layoutCompoCon.getViewHeight() + 10);			drawer04.y = drawer03.y + drawer03.getViewHeight();			m_container.addChild( drawer04);			m_drawerArr.push( drawer04);						m_layoutCompoCon.addEventListener( "scrollup", scrollup);						*/						drawer01.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);			//drawer02.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);			//drawer03.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);			//drawer04.addEventListener( Drawer.SIZE_CHANGED, onDrawerSizeChanged);						/*			drawer01.close();			drawer02.close();			drawer03.close();			drawer04.close();			*/						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// 講師の動画配信設定状態を現在の状態に合わせる（編集途中の値をリセット）					var lec_hash:Object = Main.CONF.getMemberDataHash( Main.CONF.getProId());					if( lec_hash != null) {						m_lecStreamCompo.init( lec_hash);					}					// 				});		}				public function getLecRecType() : String { return m_lecStreamCompo.getRecType();}						function scrollup( e:Event = null) {			m_container.y = INIT_Y;			m_scroll.setBarYMin();			m_scroll.update();		}				/*		// 新規作成の画面モードをコンテナ(m_drawerCon03)にADD		function addNewLayoutContainer( newLayoutCompo:LayoutComponents) {			m_drawerCon03.addChild( newLayoutCompo);			newLayoutCompo.addEventListener( DrawerEvent.CONTENTS_H_CHANGED, newLayoutCompo_changeHeight);			newLayoutCompo.addEventListener( LayoutComponents.CLICK_SAVE, newLayoutCompo_saved);						scrollup();						// ダミーでdispatch			m_drawerCon03.dispatchEvent( new DrawerEvent( DrawerEvent.CONTENTS_H_CHANGED, newLayoutCompo.H)); // 親になるDrawerに知らせる		}				function newLayoutCompo_changeHeight( e:DrawerEvent) {			m_drawerCon03.dispatchEvent( new DrawerEvent( e.type, e.h)); // 親になるDrawerに知らせる		}		function newLayoutCompo_saved( e:Event) {			// 保存されたやつは、			var savedLayoutCompo:LayoutComponents = LayoutComponents( e.target);			// 新規作成コンテナからは削除し、			if( m_drawerCon03.contains( savedLayoutCompo)) m_drawerCon03.removeChild( savedLayoutCompo);			savedLayoutCompo.removeEventListener( DrawerEvent.CONTENTS_H_CHANGED, newLayoutCompo_changeHeight);			savedLayoutCompo.removeEventListener( LayoutComponents.CLICK_SAVE, newLayoutCompo_saved);			// 一覧の方に追加する。			m_layoutCompoCon.addLayoutCompo( savedLayoutCompo);						// 新規用ではなく更新用に削除ボタン表示などする			savedLayoutCompo.setNotNew();						// 新規作成コンテナには新しいのをadd			addNewLayoutContainer( new LayoutComponents( true));						m_drawerArr[2].close(); // 新規はclose			m_drawerArr[3].open(); // 一覧はopen						m_scroll.update();						AlertManager.createAlert( this , MSG_SAVED);						// Mainに知らせてSOに追加			dispatchEvent( new LayoutEvent( LayoutEvent.ADD_NEW_LAYOUT, savedLayoutCompo.getLayout()));					}		*/		function onDrawerSizeChanged( e:Event) {			for( var i = 1; i < m_drawerArr.length; i++) {				m_drawerArr[i].y = m_drawerArr[i-1].y + m_drawerArr[i-1].getViewHeight();			}			m_scroll.update();		}				/*		// Drawer02：全受講生の動画配信／権限設定の適用するボタンクリック		// ここではSharedObjectの変更を行う。		function saveAllStuStream ( e:MouseEvent) {			// 入力チェック			var errMsg:String = m_stuStreamCompo.checkInputData();			if( errMsg != "") {				msgDialog( errMsg);				return;			}			// 入力チェック			errMsg = m_stuAuthorityCompo.checkInputData();			if( errMsg != "") {				msgDialog( errMsg);				return;			}						// 入力チェック			errMsg = m_stuReceiveCompo.checkInputData();			if( errMsg != "") {				msgDialog( errMsg);				return;			}						// 受信設定に関しては、Mainからso変更してもらう。			dispatchEvent( new Event( STU_RECEIVE_SETTING_CHANGED));						// 全受講生に対してループ処理			var memberArr:Array = Main.CONF.getMemberArr();			for each( var member:Member in memberArr) {				if( Main.CONF.isPro( member.uid) || member.uid == Main.CONF.getWhiteboardUID()) continue;								// まずはCONFのメンバーの状態を更新				Main.CONF.apply_member( member.uid, m_stuStreamCompo.getHash());				Main.CONF.apply_member( member.uid, m_stuAuthorityCompo.getHash());								// CONFから一番最新のデータを取得				var hash:Object = Main.CONF.getMemberDataHash( member.uid);								// 適用実行				if(! Main.CONF.resetSo_member( member.uid, hash)) {					alertDialog( Main.LANG.getParam( "通信エラーにより、変更を反映できませんでした"));					return;				}			}						// 他メンバー（講師）にも音声コーデック変更を適用するか			if( m_stuStreamCompo.doApplyCodec4all()) {				m_lecStreamCompo.setAudioCodec( m_stuStreamCompo.getAudioCodec());				//dispatchEvent( new Event( CHANGE_LEC_AUDIO_CODEC));				var lec_hash = Main.CONF.getMemberDataHash( Main.CONF.getProId());				if( lec_hash.audio_codec != m_stuStreamCompo.getAudioCodec()) {					lec_hash.audio_codec = m_stuStreamCompo.getAudioCodec();										if( lec_hash.audio_codec == SoundCodec.NELLYMOSER) {						if( ! ( lec_hash.rate == 8 || lec_hash.rate == 11 || lec_hash.rate == 22 || lec_hash.rate == 44)) {							lec_hash.rate = 22;							m_lecStreamCompo.setRate( 22);						}					} else if( lec_hash.audio_codec == SoundCodec.SPEEX) {						if( ! ( lec_hash.rate == 8 || lec_hash.rate == 16 || lec_hash.rate == 32)) {							lec_hash.rate = 16;							m_lecStreamCompo.setRate( 16);						}					}					Main.CONF.apply_member( Main.CONF.getProId(), lec_hash);					Main.CONF.resetSo_member( Main.CONF.getProId(), lec_hash);				}			}			msgDialog( MSG_APPLYED);		}						public function getBufferTime() : Number {			return 0;			return m_stuReceiveCompo.getBufferTime();		}				// MainのonSyncSoRcvBufferTime()から呼ばれる		public function setBufferTime( buffer_time: Number) {			m_stuReceiveCompo.setBufferTime( buffer_time);		}		*/				// Drawer01：講師の動画配信設定の適用するボタンクリック		// ここではSharedObjectの変更とDBへの適用を行う。（講師の動画配信への反映はここではやらない。ProVideoで。）		function saveLecStream( e:MouseEvent) {			// 入力チェック			var errMsg:String = m_lecStreamCompo.checkInputData();			if( errMsg != "") {				msgDialog( errMsg);				return;			}						// 適用実行			// 録画設定に関しては、Mainに直接m_proVideoを変更してもらう。			dispatchEvent( new Event( LEC_REC_TYPE_CHANGED));						if(! Main.CONF.resetSo_member( Main.CONF.getProId(), m_lecStreamCompo.getHash())) {				alertDialog( Main.LANG.getParam( "通信エラーにより、変更を反映できませんでした"));				return;			}						/*			// 他メンバー（全受講生）にも音声コーデック変更を適用するか			if( m_lecStreamCompo.doApplyCodec4all()) {				m_stuStreamCompo.setAudioCodec( m_lecStreamCompo.getAudioCodec());								// 全受講生に対してループ処理				var memberArr:Array = Main.CONF.getMemberArr();				for each( var member:Member in memberArr) {					if( Main.CONF.isPro( member.uid) || member.uid == Main.CONF.getWhiteboardUID()) continue;										var hash = Main.CONF.getMemberDataHash( member.uid);					if( hash.audio_codec != m_lecStreamCompo.getAudioCodec()) {						hash.audio_codec = m_lecStreamCompo.getAudioCodec();												if( hash.audio_codec == SoundCodec.NELLYMOSER) {							if( ! ( hash.rate == 8 || hash.rate == 11 || hash.rate == 22 || hash.rate == 44)) {								hash.rate = 22;								m_stuStreamCompo.setRate( 22);							}						} else if( hash.audio_codec == SoundCodec.SPEEX) {							if( ! ( hash.rate == 8 || hash.rate == 16 || hash.rate == 32)) {								hash.rate = 16;								m_stuStreamCompo.setRate( 16);							}						}												Main.CONF.apply_member( member.uid, hash);						Main.CONF.resetSo_member( member.uid, hash);					}				}			}*/						msgDialog( MSG_APPLYED);					}						public function setLayoutHashArrSo( so) {			//m_layoutCompoCon.setLayoutHashArrSo( so);		}						override public function setEnabled( b:Boolean):void {		}				override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						m_containerMask.width = w - m_scroll.width;			m_scroll.x = w - m_scroll.width;						for each( var drawer:Drawer in m_drawerArr) {				drawer.setViewWidth( w - m_scroll.width - PAD);			}						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW ) {				m_preW = w;				m_scroll.update();			}					//m_text.width = w - m_scroll.width - PAD * 2;		}		override public function setViewHeight( h:Number):void {			super.setViewHeight( h);			m_containerMask.height = h - INIT_Y;			// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( h != m_preH ) {				m_preH = h;				m_scroll.setSize( m_scroll.width, h - INIT_Y - 15);				m_scroll.update();			}		}				function alertDialog( str:String) {			Main.addErrMsg("SettingContents:" + str);		}		function msgDialog( str:String) {			AlertManager.createAlert( this, str);		}			}}