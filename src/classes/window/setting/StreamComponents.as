package window.setting {	import fl.controls.*;	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	//import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.events.*;	import flash.media.SoundCodec;		// 環境設定の映像音声配信設定用コンポーネントセット	public class StreamComponents extends Sprite {				static public const EVICTED_BTN_CLICKED = "btnEvicted clicked";		static public const REPUBLISH_BTN_CLICKED = "btnRepublish clicked";		static public const H:Number = 80;		static public const REC_TYPE_0 = "never record"; // 録画しない		static public const REC_TYPE_1 = "divided record"; // 録画する（録画停止毎にファイルを分ける）		static public const REC_TYPE_2 = "string record"; // 録画する（録画ファイルをつなげる）		private const PROMPT = "---";		private const LABEL_BPS = Main.LANG.getParam( "帯域幅");		private const LABEL_FPS = Main.LANG.getParam( "最大フレームレート");		private const LABEL_CAMERASIZE = Main.LANG.getParam( "カメラキャプチャサイズ");		private const LABEL_KHZ = Main.LANG.getParam( "音質");		private const LABEL_NOISE = Main.LANG.getParam( "無音判定レベル");		private const LABEL_GAIN = Main.LANG.getParam( "サウンドのゲイン(増幅率)");		private const BPS_LABEL:Array = [ Main.LANG.getParam( "低"), Main.LANG.getParam( "低"), Main.LANG.getParam( "中"), Main.LANG.getParam( "高"), Main.LANG.getParam( "高")];		private const BPS_DATA:Array = [ 50000, 150000, 300000, 800000, 1500000];		//private const FPS_DATA:Array = [ 60, 30, 24, 20, 15, 12, 10, 8, 6, 5, 4, 2, 1];		private const FPS_DATA:Array = [ 8, 10, 12, 15, 20, 24, 30];		//private const FPS_DATA:Array = [ 1, 2, 4, 5, 6, 8, 10, 12, 15, 20, 24, 30, 60];		private const SIZE_DATA:Array = [{ width:80, height:60},										 { width:160, height:120},										 { width:240, height:180},										 { width:320, height:240},										 { width:480, height:360},										 { width:640, height:480},										 { width:720, height:480},										 { width:800, height:600}];		private const KHZ_DATA:Array = [ 8, 11, 16, 22, 32, 44];				private const ERROR_MSG_01:String = Main.LANG.getParam( "未選択の項目があります");		private const LABEL_EVICTED = Main.LANG.getParam( "強制退去");		private const LABEL_REPUBLISH = Main.LANG.getParam( "映像・音声の再読み込み");		private var m_btnEvicted:DynamicTextBtn;		private var m_btnRepublish:DynamicTextBtn;				private var m_combo_bps:ComboBoxLite;		private var m_combo_fps:ComboBoxLite;		private var m_combo_camerasize:ComboBoxLite;		private var m_combo_khz:ComboBoxLite;				private var m_radioG_rec:RadioButtonGroup;		private var m_radioG_audioCodec:RadioButtonGroup;		private var m_applyCodec_4all_check:CheckBox;				public function StreamComponents() {			m_label_bps.text = LABEL_BPS;			m_label_fps.text = LABEL_FPS;			m_label_camerasize.text = LABEL_CAMERASIZE;			m_label_khz.text = LABEL_KHZ;			m_label_noise.text = LABEL_NOISE;			m_label_gain.text = LABEL_GAIN;						// コンボボックス生成（Lite版）			m_combo_bps = ComboBoxLite( addChild( new ComboBoxLite()));			m_combo_bps.x = 156;			m_combo_bps.y = 0;			m_combo_fps = ComboBoxLite( addChild( new ComboBoxLite()));			m_combo_fps.x = 156;			m_combo_fps.y = 28;			m_combo_camerasize = ComboBoxLite( addChild( new ComboBoxLite()));			m_combo_camerasize.x = 156;			m_combo_camerasize.y = 55;			m_combo_khz = ComboBoxLite( addChild( new ComboBoxLite()));			m_combo_khz.x = 549;			m_combo_khz.y = 0;						// コンボボックスに選択肢データを入れる			var i:uint;			// 帯域幅			for( i = 0; i < BPS_LABEL.length; i++) {				m_combo_bps.addItem( { label: BPS_LABEL[i] + " (" + String( BPS_DATA[i]/1000) + " Kbps)", data: Number( BPS_DATA[i])});			}			// 最大フレームレート			for( i = 0; i < FPS_DATA.length; i++) {				m_combo_fps.addItem( { label: FPS_DATA[i] + " fps", data: FPS_DATA[i]});			}			// カメラキャプチャサイズ			for( i = 0; i < SIZE_DATA.length; i++) {				m_combo_camerasize.addItem( { label: SIZE_DATA[i].width + "x" + SIZE_DATA[i].height, data: SIZE_DATA[i]});			}			// 音質			for( i = 0; i < KHZ_DATA.length; i++) {				m_combo_khz.addItem( { label: KHZ_DATA[i] + " KHz", data: KHZ_DATA[i]});			}			m_combo_khz.setSize( 100, m_combo_khz.height);						m_combo_bps.prompt = m_combo_fps.prompt = m_combo_camerasize.prompt = m_combo_khz.prompt = PROMPT;			m_combo_bps.selectedItem = m_combo_fps.selectedItem = m_combo_camerasize.selectedItem = m_combo_khz.selectedItem = null;									m_btnRepublish = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_REPUBLISH, 10, 20, 2, 5)));			m_btnRepublish.x = m_combo_khz.x + m_combo_khz.width + 40;			m_btnRepublish.y = m_combo_khz.y;			// MemberSettingContentsに知らせる			m_btnRepublish.addEventListener( MouseEvent.CLICK, function( e:*){ dispatchEvent( new Event( REPUBLISH_BTN_CLICKED))});			m_btnRepublish.setEnabled( true);						m_btnEvicted = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_EVICTED, 10, 20, 2, 5)));			m_btnEvicted.x = m_btnRepublish.x;			m_btnEvicted.y = m_btnRepublish.y + m_btnRepublish.height + 10;			// MemberSettingContentsに知らせる			m_btnEvicted.addEventListener( MouseEvent.CLICK, function( e:*){ dispatchEvent( new Event( EVICTED_BTN_CLICKED))});			m_btnEvicted.setEnabled( true);					}				// SettingContentsから呼ばれる		public function hideEvict() {			m_btnEvicted.visible = false;		}						// SettingContentsから呼ばれる。録画設定の追加		public function addRecordSetting( init_rec_type:String, isNormalDelivery:Boolean /*通常配信かiOS配信か*/) {			// 見出し			var label_record : TextField = TextField( addChild( new TextField()));			label_record.defaultTextFormat = m_label_camerasize.defaultTextFormat;			label_record.text = Main.LANG.getParam( "配信映像の録画機能");			label_record.height = label_record.textHeight + 5;						// ラジオボタン			var radio_1:RadioButton = RadioButton( addChild( new RadioButton()));			var radio_2:RadioButton = RadioButton( addChild( new RadioButton()));			var radio_3:RadioButton = RadioButton( addChild( new RadioButton()));			radio_1.label = Main.LANG.getParam( "使用しない");			radio_2.label = Main.LANG.getParam( "使用する（録画停止毎にファイルを分ける）");			radio_3.label = Main.LANG.getParam( "使用する（録画ファイルをつなげる）");			radio_1.value = REC_TYPE_0;			radio_2.value = REC_TYPE_1;			radio_3.value = REC_TYPE_2;			m_radioG_rec = new RadioButtonGroup( "rec_type");			m_radioG_rec.addRadioButton( radio_1);			m_radioG_rec.addRadioButton( radio_2);			m_radioG_rec.addRadioButton( radio_3);									// 配置と初期化			label_record.x = m_label_camerasize.x;			label_record.width = m_label_camerasize.width;						label_record.y = m_label_camerasize.y + 37; // 適当			for( var i = 0; i < m_radioG_rec.numRadioButtons; i++) {				if( m_radioG_rec.getRadioButtonAt( i).value == init_rec_type) {					m_radioG_rec.getRadioButtonAt( i).selected = true;				}				m_radioG_rec.getRadioButtonAt( i).x = label_record.x + label_record.width + 10;				m_radioG_rec.getRadioButtonAt( i).y = label_record.y + ( 25 * i) - 3;				m_radioG_rec.getRadioButtonAt( i).setSize( 300, 25);			}						if( ! isNormalDelivery) {				// iOS配信の場合は録画できない				radio_1.selected = true;				radio_2.enabled = false;				radio_3.enabled = false;			}		}						// SettingContentsから呼ばれる。音声コーデック設定の追加		public function addAudioCodecSetting( label_apply4all:String, isNormalDelivery:Boolean /*通常配信かiOS配信か*/) {			// 見出し			var label_codec : TextField = TextField( addChild( new TextField()));			label_codec.defaultTextFormat = m_label_camerasize.defaultTextFormat;			label_codec.text = Main.LANG.getParam( "音声コーデック");			label_codec.width = label_codec.textWidth + 5;			label_codec.height = label_codec.textHeight + 5;									// ラジオボタン			var radio_1:RadioButton = RadioButton( addChild( new RadioButton()));			var radio_2:RadioButton = RadioButton( addChild( new RadioButton()));			radio_1.label = SoundCodec.NELLYMOSER;			radio_2.label = SoundCodec.SPEEX;			radio_1.value = SoundCodec.NELLYMOSER;			radio_2.value = SoundCodec.SPEEX;			m_radioG_audioCodec = new RadioButtonGroup( "audio_codec");			m_radioG_audioCodec.addEventListener(Event.CHANGE, onChangeAudioCodec);			m_radioG_audioCodec.addRadioButton( radio_1);			m_radioG_audioCodec.addRadioButton( radio_2);			if( !isNormalDelivery) radio_1.enabled = false;						// 全員変更のチェックボックス			m_applyCodec_4all_check = CheckBox( addChild( new CheckBox()));			m_applyCodec_4all_check.label = label_apply4all;			m_applyCodec_4all_check.textField.width = m_applyCodec_4all_check.textField.textWidth+5;			m_applyCodec_4all_check.setSize( 300, 25);			m_applyCodec_4all_check.selected = true;			m_applyCodec_4all_check.visible = false;									// 配置と初期化			label_codec.x = 450;						label_codec.y = m_label_camerasize.y + 37; // 適当			m_applyCodec_4all_check.x = label_codec.x + label_codec.width + 10;			//m_applyCodec_4all_check.y = label_codec.y - 3;						for( var i = 0; i < m_radioG_audioCodec.numRadioButtons; i++) {				if( m_radioG_audioCodec.getRadioButtonAt( i).value == Member.DEFAULT_AUDIO_CODEC) {					m_radioG_audioCodec.getRadioButtonAt( i).selected = true;				}				m_radioG_audioCodec.getRadioButtonAt( i).x = label_codec.x + label_codec.width + 10;				m_radioG_audioCodec.getRadioButtonAt( i).y = label_codec.y + ( 21 * i) - 3;//m_applyCodec_4all_check.y + 25 + ( 21 * i);				m_radioG_audioCodec.getRadioButtonAt( i).setSize( 300, 21);			}			m_applyCodec_4all_check.y = label_codec.y + m_radioG_audioCodec.numRadioButtons * 21 + 3;		}		function onChangeAudioCodec( e:Event = null) {			if( ! m_radioG_audioCodec) return;			if( ! m_radioG_audioCodec.selectedData || !m_combo_khz.selectedItem) return;						var i:uint;			var obj:Object;			if( String( m_radioG_audioCodec.selectedData) == SoundCodec.NELLYMOSER) {				m_combo_khz.setEnabled( true, 11);				m_combo_khz.setEnabled( true, 22);				m_combo_khz.setEnabled( true, 44);				m_combo_khz.setEnabled( false, 16);				m_combo_khz.setEnabled( false, 32);				if( m_combo_khz.selectedItem.data == 16 || m_combo_khz.selectedItem.data == 32) {					for( i = 0; i < m_combo_khz.length; i++) {						obj = Object( m_combo_khz.getItemAt( i));						if( obj.data == 22) {							m_combo_khz.selectedItem = obj;							break;						}					}				}			} else {				m_combo_khz.setEnabled( false, 11);				m_combo_khz.setEnabled( false, 22);				m_combo_khz.setEnabled( false, 44);				m_combo_khz.setEnabled( true, 16);				m_combo_khz.setEnabled( true, 32);				if( m_combo_khz.selectedItem.data == 11 || m_combo_khz.selectedItem.data == 22 || m_combo_khz.selectedItem.data == 44) {					for( i = 0; i < m_combo_khz.length; i++) {						obj = Object( m_combo_khz.getItemAt( i));						if( obj.data == 16) {							m_combo_khz.selectedItem = obj;							break;						}					}				}			}						//m_combo_khz		}		public function getRecType() : String {			return String( m_radioG_rec.selectedData);		}				public function doApplyCodec4all() : Boolean {			return m_applyCodec_4all_check.selected;		}				public function getAudioCodec() : String {			return String( m_radioG_audioCodec.selectedData);		}				public function setAudioCodec( audioCodec:String) {			for( var i = 0; i < m_radioG_audioCodec.numRadioButtons; i++) {				if( m_radioG_audioCodec.getRadioButtonAt( i).value == audioCodec) {					m_radioG_audioCodec.getRadioButtonAt( i).selected = true;				}			}		}				public function setRate( rate:Number) {			for( var i = 0; i < m_combo_khz.length; i++) {				var obj = Object( m_combo_khz.getItemAt( i));				if( obj.data == rate) {					m_combo_khz.selectedItem = obj;					break;				}			}		}		// SettingContentsより適用ボタンクリック時によばれる		public function checkInputData() :String {			var errMsg:String = "";			if( m_combo_bps.selectedItem == null ||			   m_combo_fps.selectedItem == null ||			   m_combo_camerasize.selectedItem == null ||			   m_combo_khz.selectedItem == null) {								errMsg = ERROR_MSG_01; // 値を設定してください			}						return errMsg; // 戻り値が空以外の場合、適用はキャンセルされる。		}				// 選択状態を設定		public function init( memberDataHash:Object) {			if( memberDataHash == null) return;						Slider( m_slider_noise).maximum = 2;			Slider( m_slider_noise).minimum = 0;			Slider( m_slider_noise).snapInterval = 0.1;			Slider( m_slider_noise).value = 0.3;			var obj;			var i:uint;			// 帯域幅			if( memberDataHash.bandwidth != undefined) {				for( i = 0; i < m_combo_bps.length; i++) {					obj = m_combo_bps.getItemAt( i);					if( Number(obj.data) == Number(memberDataHash.bandwidth)) {						m_combo_bps.selectedItem = obj;						break;					}				}			}			// 最大フレームレート			if( memberDataHash.fps != undefined) {				for( i = 0; i < m_combo_fps.length; i++) {					obj = Object( m_combo_fps.getItemAt( i));					if( obj.data == memberDataHash.fps) {						m_combo_fps.selectedItem = obj;						break;					}				}			}			// カメラキャプチャサイズ			if( memberDataHash.camerawidth != undefined && memberDataHash.cameraheight != undefined) {				for( i = 0; i < m_combo_camerasize.length; i++) {					obj = Object( m_combo_camerasize.getItemAt( i));					var obj_data:Object = Object( obj.data);					if( obj_data.width == memberDataHash.camerawidth && obj_data.height == memberDataHash.cameraheight) {						m_combo_camerasize.selectedItem = obj;						break;					}				}			}			// 音質			if( memberDataHash.rate != undefined) {				for( i = 0; i < m_combo_khz.length; i++) {					obj = Object( m_combo_khz.getItemAt( i));					if( obj.data == memberDataHash.rate) {						m_combo_khz.selectedItem = obj;						break;					}				}			}			onChangeAudioCodec();									// 無音判定レベル			if( memberDataHash.silencelevel != undefined) {				m_slider_noise.value = memberDataHash.silencelevel;				m_str_noize.text = String( m_slider_noise.value);			}			m_slider_noise.addEventListener( Event.CHANGE, function( e:*) {											m_str_noize.text = String( m_slider_noise.value);											});			// ゲイン			if( memberDataHash.gain != undefined) {				m_slider_gain.value = memberDataHash.gain;				m_str_gain.text = String( m_slider_gain.value);			}			m_slider_gain.addEventListener( Event.CHANGE, function( e:*) {											m_str_gain.text = String( m_slider_gain.value);											});			}				// SettingContentsのsaveLecStream()やMemberContentsのsave01から、SOの変更用に呼ばれる		// 現在の選択状態をmemberDataHashの形にして返す。		public function getHash() : Object {			var hash:Object= new Object();			hash.bandwidth = m_combo_bps.selectedItem.data;			hash.fps = m_combo_fps.selectedItem.data;			hash.camerawidth = m_combo_camerasize.selectedItem.data.width;			hash.cameraheight = m_combo_camerasize.selectedItem.data.height;			hash.rate = m_combo_khz.selectedItem.data;			hash.silencelevel = m_slider_noise.value;			hash.gain = m_slider_gain.value;						if( m_radioG_audioCodec) hash.audio_codec = m_radioG_audioCodec.selectedData;						return hash;		}				function alertDialog( str:String) {			Main.addErrMsg( "StreamComponents:" + str);		}	}}