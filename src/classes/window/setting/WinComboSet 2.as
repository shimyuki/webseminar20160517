package window.setting {	import flash.display.*;	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import partition.*;	import fl.controls.RadioButtonGroup;	import flash.events.Event;		// 環境設定の画面モード作成／編集（ビュー）用コンポーネントセットの、コンテンツ配置のコンボボックスセット	public class WinComboSet extends Sprite {				public var W:Number = 200;				static private const PAD:Number = 2;		static public const H:Number = 200;				static public const SUBMAIN = LayoutComponents.SUBMAIN;		static public const MAINSUB = LayoutComponents.MAINSUB;		static public const FULL = LayoutComponents.FULL;				static public const NOUSE = "-----";				// サブカラム専用のウィンドウ名		private const SubWinNameArr_4lec = [ Layout.WINNAME_VIDEO,									   Layout.WINNAME_QUICK,									   Layout.WINNAME_CHAT									   ];		private const SubWinNameArr_4stu = [ Layout.WINNAME_VIDEO,									   Layout.WINNAME_CHAT									   ];		// メインカラム専用のウィンドウ名		private const MainWinNameArr = [ Layout.WINNAME_WHITEBOARD,									   Layout.WINNAME_MEMBER									   ];				private var m_sub:OneColum; // サブカラム専用のセット		private var m_main:OneColum; // メインカラム専用のセット		private var m_full:OneColum; // フルカラム専用のセット				public function WinComboSet( b_4lec:Boolean) {			if( b_4lec) m_sub = new OneColum( SubWinNameArr_4lec);			else m_sub = new OneColum( SubWinNameArr_4stu);			m_main = new OneColum( MainWinNameArr);			m_full = new OneColum( MainWinNameArr);			m_full.setTitle( LayoutComponents.LABEL_FULLCOLUM);						m_sub.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});			m_main.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});			m_full.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});		}				// メンバー一覧（Layout.WINNAME_MEMBER）がどれかのコンボボックスで選択されているか		public function isMemberSelected() : Boolean {			if( contains( m_sub) && _isMemberSelected( m_sub)) return true;			if( contains( m_main) && _isMemberSelected( m_main)) return true;			if( contains( m_full) && _isMemberSelected( m_full)) return true;			return false;		}		function _isMemberSelected( colum:OneColum) : Boolean {			var arr:Array = colum.getSelectedDataArr();			for each( var dat in arr) {				if( dat == null) continue;				if( dat == Layout.WINNAME_MEMBER) return true;			}			return false;		}				// 選択されている値の取得（nullは詰めた状態の配列で返す）		public function getSelectedData_sub() : Array { return m_sub.getSelectedDataArr();}		public function getSelectedData_main() : Array { return m_main.getSelectedDataArr();}		public function getSelectedData_full() : Array { return m_full.getSelectedDataArr();}				// LayoutComponentsのinit()から呼ばれる。		// サブカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_sub( winNames:Array) {			setComboSelection( m_sub, winNames);		}		// LayoutComponentsのinit()から呼ばれる。		// メインカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_main( winNames:Array) {			setComboSelection( m_main, winNames);		}		// LayoutComponentsのinit()から呼ばれる。		// フルカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_full( winNames:Array) {			setComboSelection( m_full, winNames);		}		function setComboSelection( colum:OneColum, winNames:Array) {			colum.setComboSelection( winNames);		}				// プリセットの場合に編集不可にするために呼ばれる		public function setEnabled( b:Boolean) {			m_sub.setEnabled( b);			m_main.setEnabled( b);			m_full.setEnabled( b);		}				public function change( type) {						if( contains( m_sub)) removeChild( m_sub);			if( contains( m_main)) removeChild( m_main);			if( contains( m_full)) removeChild( m_full);						switch( type) {				case LayoutComponents.SUBMAIN:					m_sub.setTitle( LayoutComponents.LABEL_LEFTCOLUM);					m_main.setTitle( LayoutComponents.LABEL_RIGHTCOLUM);					m_sub.x = 0;					m_main.x = OneCombo.W + PAD;					W = OneCombo.W * 2 + PAD;					addChild( m_sub);					addChild( m_main);					break;				case LayoutComponents.MAINSUB:					m_sub.setTitle( LayoutComponents.LABEL_RIGHTCOLUM);					m_main.setTitle( LayoutComponents.LABEL_LEFTCOLUM);					m_main.x = 0;					m_sub.x = OneCombo.W + PAD;					W = OneCombo.W * 2 + PAD;					addChild( m_sub);					addChild( m_main);					break;				case LayoutComponents.FULL:					addChild( m_full);					break;			}			dispatchEvent( new Event( Event.CHANGE));		}	}}import window.setting.*;import fl.controls.ComboBox;import fl.events.*;import flash.display.*;import flash.text.*;import flash.events.*;class OneColum extends Sprite {	private const COMBO_CNT = 3;	private var m_title:TextField;	private var m_winNameArr:Array;	private var m_comboArr:Array;		public function OneColum( winNameArr:Array) {		m_title = TextField( addChild( new TextField()));		m_title.width = OneCombo.W;		var fmt:TextFormat = new TextFormat( Main.CONF.getMainFont(), 11, 0x000000);		fmt.align = "center";		m_title.defaultTextFormat = fmt;		m_title.height = 20;		m_title.selectable = mouseEnabled = false;				m_winNameArr = winNameArr;				m_comboArr = new Array();		var posi_y = m_title.height;		for( var i:uint = 0; i < COMBO_CNT; i++) {			var combo:OneCombo = OneCombo( addChild( new OneCombo()));			combo.initItems( m_winNameArr);			combo.y = posi_y;			posi_y += OneCombo.H + 2;			m_comboArr.push( combo);						combo.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});						if( m_winNameArr.length <= i) combo.setEnabled( false);		}			}	// プリセットの場合はコンボボックスを生成しないようにするために	public function initAsPreset( b:Boolean) {		if( b) {			for( var i:uint = 0; i < m_comboArr.length; i++) {				var combo:OneCombo = OneCombo( m_comboArr[i]);				combo.setEnabled( false);			}		} else {			for( var i:uint = 0; i < m_comboArr.length; i++) {				var combo:OneCombo = OneCombo( m_comboArr[i]);				combo.setEnabled( true);			}		}	}	// プリセットの場合に編集不可にするために呼ばれる	/*public function setEnabled( b:Boolean) {		for( var i:uint = 0; i < m_comboArr.length; i++) {			var combo:OneCombo = OneCombo( m_comboArr[i]);			combo.setEnabled( b);		}	}*/	public function getSelectedDataArr() : Array {		// nullは詰める		var ret:Array = new Array();		for( var i:uint = 0; i < m_comboArr.length; i++) {			var combo:OneCombo = OneCombo( m_comboArr[i]);			var dat = combo.getSelectedData();			if( dat != null) ret.push( combo.getSelectedData());		}		return ret;  	}	public function setComboSelection( winNames:Array) {		var i:uint;		var combo:OneCombo;		// 初期化（いったん全て「----」を選択）		for( i = 0; i < m_comboArr.length; i++) {			combo = OneCombo( m_comboArr[i]);			combo.selectItem( WinComboSet.NOUSE);		}		if( winNames != null) {			for( i = 0; i < winNames.length; i++) {				if( i == m_comboArr.length) break;				combo = OneCombo( m_comboArr[i]);				combo.selectItem( winNames[i]);			}		}	}			public function setTitle( str:String) { m_title.text = str;}}class OneCombo extends Sprite {	static public var W:Number = 180;	static public const H:Number = 38;	private var m_combo:ComboBox;	public function OneCombo() {		graphics.beginFill( 0x446787);		graphics.drawRect( 0, 0, W, H);		graphics.endFill();				m_combo = ComboBox( addChild( new ComboBox()));		m_combo.x = m_combo.y = 8;		m_combo.width = W - 16;		m_combo.opaqueBackground = 0xffffff;		m_combo.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});	}		public function initItems( winNameArr:Array) {		m_combo.removeAll();		for each( var winName:String in winNameArr) {			m_combo.addItem( { label:winName, data:winName});		}		m_combo.addItem( { label:WinComboSet.NOUSE, data:null});				// ドロップダウンリストのテキストの長さに基づいて dropdownWidth プロパティを設定		var maxLength:Number = 0;		var i:uint;		for ( i = 0; i < m_combo.length; i++) {			m_combo.selectedIndex = i;			m_combo.drawNow();			var currText:String = m_combo.text;			var currWidth:Number = m_combo.textField.textWidth;			maxLength = Math.max(currWidth, maxLength);		}		m_combo.dropdownWidth = maxLength + 20;	}	public function selectItem( winName:String) {		for( var i = 0; i < m_combo.length; i++) {			if( String( Object( m_combo.getItemAt( i)).label) == String( winName)) {				m_combo.selectedItem = m_combo.getItemAt( i);				break;			}		}	}	public function getSelectedData() : String {		if( m_combo.selectedItem == null) return null;		return Object( m_combo.selectedItem).data;	}	public function setEnabled( b:Boolean) {		m_combo.enabled = b;	}}