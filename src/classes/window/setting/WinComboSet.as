package window.setting {	import flash.display.*;	import fl.controls.RadioButton;	import fl.controls.ComboBox;	import fl.events.*;	import common.*;	import window.*;	import partition.*;	import fl.controls.RadioButtonGroup;	import flash.events.Event;		// 環境設定の画面モード作成／編集（ビュー）用コンポーネントセットの、コンテンツ配置のコンボボックスセット	public class WinComboSet extends Sprite {				public var W:Number = 200;				static private const PAD:Number = 2;		static public const H:Number = 200;				static public const SUBMAIN = LayoutComponents.SUBMAIN;		static public const MAINSUB = LayoutComponents.MAINSUB;		static public const FULL = LayoutComponents.FULL;				static public const NOUSE = "-----";				// サブカラム専用のウィンドウ名		private const SubWinNameArr_4lec = [ Layout.WINNAME_VIDEO,									   Layout.WINNAME_QUICK,									   Layout.WINNAME_CHAT									   ];		private const SubWinNameArr_4stu = [ Layout.WINNAME_VIDEO,									   Layout.WINNAME_CHAT									   ];		// メインカラム専用のウィンドウ名		private const MainWinNameArr = [ Layout.WINNAME_WHITEBOARD,									   Layout.WINNAME_MEMBER									   ];				private var m_sub:OneColum; // サブカラム専用のセット		private var m_main:OneColum; // メインカラム専用のセット		private var m_full:OneColum; // フルカラム専用のセット				public function WinComboSet( b_4lec:Boolean) {			if( b_4lec) m_sub = new OneColum( SubWinNameArr_4lec);			else m_sub = new OneColum( SubWinNameArr_4stu);			m_main = new OneColum( MainWinNameArr);			m_full = new OneColum( MainWinNameArr);			m_full.setTitle( LayoutComponents.LABEL_FULLCOLUM);						m_sub.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});			m_main.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});			m_full.addEventListener( Event.CHANGE, function( e:*){ dispatchEvent( e);});		}				// メンバー一覧（Layout.WINNAME_MEMBER）がどれかのコンボボックスで選択されているか		public function isMemberSelected() : Boolean {			if( contains( m_sub) && _isMemberSelected( m_sub)) return true;			if( contains( m_main) && _isMemberSelected( m_main)) return true;			if( contains( m_full) && _isMemberSelected( m_full)) return true;			return false;		}		function _isMemberSelected( colum:OneColum) : Boolean {			var arr:Array = colum.getSelectedDataArr();			for each( var dat in arr) {				if( dat == null) continue;				if( dat == Layout.WINNAME_MEMBER) return true;			}			return false;		}				// 選択されている値の取得（nullは詰めた状態の配列で返す）		public function getSelectedData_sub() : Array { return m_sub.getSelectedDataArr();}		public function getSelectedData_main() : Array { return m_main.getSelectedDataArr();}		public function getSelectedData_full() : Array { return m_full.getSelectedDataArr();}				// LayoutComponentsのinit()から呼ばれる。		// サブカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_sub( winNames:Array) {			setComboSelection( m_sub, winNames);		}		// LayoutComponentsのinit()から呼ばれる。		// メインカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_main( winNames:Array) {			setComboSelection( m_main, winNames);		}		// LayoutComponentsのinit()から呼ばれる。		// フルカラムのコンボボックスの選択状態の初期設定		public function setComboSelection_full( winNames:Array) {			setComboSelection( m_full, winNames);		}		function setComboSelection( colum:OneColum, winNames:Array) {			colum.setComboSelection( winNames);		}				public function initAsPreset( b:Boolean) {			m_sub.initAsPreset( b);			m_main.initAsPreset( b);			m_full.initAsPreset( b);		}		/*// プリセットの場合に編集不可にするために呼ばれる		public function setEnabled( b:Boolean) {			m_sub.setEnabled( b);			m_main.setEnabled( b);			m_full.setEnabled( b);		}*/				public function change( type) {						if( contains( m_sub)) removeChild( m_sub);			if( contains( m_main)) removeChild( m_main);			if( contains( m_full)) removeChild( m_full);						switch( type) {				case LayoutComponents.SUBMAIN:					m_sub.setTitle( LayoutComponents.LABEL_LEFTCOLUM);					m_main.setTitle( LayoutComponents.LABEL_RIGHTCOLUM);					m_sub.x = 0;					m_main.x = OneCombo.W + PAD;					W = OneCombo.W * 2 + PAD;					addChild( m_sub);					addChild( m_main);					break;				case LayoutComponents.MAINSUB:					m_sub.setTitle( LayoutComponents.LABEL_RIGHTCOLUM);					m_main.setTitle( LayoutComponents.LABEL_LEFTCOLUM);					m_main.x = 0;					m_sub.x = OneCombo.W + PAD;					W = OneCombo.W * 2 + PAD;					addChild( m_sub);					addChild( m_main);					break;				case LayoutComponents.FULL:					addChild( m_full);					break;			}			dispatchEvent( new Event( Event.CHANGE));		}	}}