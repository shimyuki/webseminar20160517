package window.chat {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import partition.Layout;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import flash.ui.Keyboard;		import flash.external.ExternalInterface;	// チャット	// 最初に表示されるテキストは、DBに保存されている全テキスト。	// SharedObjectは追記分しか扱わない。SharedObject更新のたびに、	// m_textが追記されていく。（書き込んだ本人がDBに追加していく）	public class ChatContainer extends ResizableContainer {		private const COMMENT_MAX = 100; // soChatに残す最大コメント数		private var _MIN_W = 100;		private var _MIN_H = 180;		private const LABEL_INPUT:String = Main.LANG.getParam( "書き込み");		private const MSG_LEC_INPUT:String = Main.LANG.getParam( "個別チャットにメッセージが書き込まれました");		protected const INPUT_H = 50; // 入力テキスト領域の高さ		protected var INIT_Y = INPUT_H + PAD;		protected const PAD = 8;		protected var m_container:Sprite;		private var m_containerMask:Sprite;		protected var m_scroll:SimpleScrollBar;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				protected var m_text:TextField;		protected var m_inputText:TextField;		protected var m_line:Shape;		protected var m_inputBtn:DynamicTextBtn;		private var m_postMode:String; // DB保存の際、SAVETEXT_URLにPOSTするmodeの値		protected var m_postUid:String; // DB保存の際、SAVETEXT_URLにPOSTするuidの値。また、SOの変数名		private var SCROLL_PAD_BOTTOM = 15;				protected var so:SharedObject = null;						public function ChatContainer( w:Number, h:Number, postMode:String = "chat_and_actionlog", postUid:String = "master", BASE_COLOR:uint=0xffffff, add_INIT_Y:Number = 0)		// 全体のチャット（とアクションログ）として使う場合は、引数のpostModeとpostUidは省略可（デフォルト値）		// 個別チャットとして使う場合は、引数のpostModeは"chat"、postUidは個々のUIDを入れてください		{			super( w, h, _MIN_W, _MIN_H, BASE_COLOR); // min_w は後で設定し直すのでとりあえずゼロ						if( Main.CONF.TERMINAL == Main.TERMINAL_ANDROID) {				SCROLL_PAD_BOTTOM = 1;			}			m_postMode = postMode;			m_postUid = postUid;						INIT_Y += add_INIT_Y;						// 一覧表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.y = INIT_Y;						// 一覧表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, 1);			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// 一覧表示コンテナのスクロールバー			m_scroll = addChild( new SimpleScrollBar()) as SimpleScrollBar;			m_scroll.y = INIT_Y;			m_scroll.setSize( m_scroll.width, 200);						m_scroll.setScrollTarget( m_container);			m_scroll.scrollMask = m_containerMask;						// チャットテキスト			m_text = new TextField();			//m_text.text = "DBからの読み込みに失敗";			m_text.wordWrap = true;			m_text.multiline = true;			m_text.condenseWhite = true;			//m_text.autoSize = TextFieldAutoSize.LEFT;			m_text.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			m_text.width = w - PAD * 2 - m_scroll.width;			m_container.addChild( m_text);			m_text.x = m_text.y = PAD;						//if( postUid == "master") addHtmlText( Main.CONF.getChatHtml());			//else addHtmlText( Main.CONF.getMemberChat( postUid));			//alertDialog( "start css");						// チャットテキストのCSS			var style:StyleSheet = new StyleSheet();						// class無し（ログや名前、時間）            var p:Object = new Object();			p.fontSize = 10;			p.color = "#555555";			p.leading = 3;			p.marginTop = 10;			// 講師            var p_lec:Object = new Object();			p_lec.marginLeft = 10;            p_lec.color = "#cc0000";			p_lec.fontSize = 11;			/*			// 自分            var p_stu_my:Object = new Object();			p_stu_my.marginLeft = 10;            p_stu_my.color = "#1a328c";			p_stu_my.fontSize = 11;*/			// 他生徒            var p_stu:Object = new Object();			p_stu.marginLeft = 10;            p_stu.color = "#000000";			p_stu.fontSize = 11;			// 非表示			//var span_uid:Object = new Object();			//span_uid.display = "none";			var span_date:Object = new Object();			span_date.display = "none";			var span_unixtime:Object = new Object();			span_unixtime.display = "none";			var a:Object = new Object();			a.color = "#0188d8";						style.setStyle("p", p);            style.setStyle(".lec", p_lec);			style.setStyle(".stu", p_stu);            //style.setStyle("." + Main.CONF.UID, p_stu_my);			//style.setStyle(".uid", span_uid);			style.setStyle(".date", span_date);			style.setStyle(".unixtime", span_unixtime);			var memberArr:Array = Main.CONF.getMemberArr();			for each( var member:Member in memberArr) {				if( member.uid != Main.CONF.UID) {					style.setStyle(".stu_" + member.uid, p_stu);				}			}			style.setStyle("a", a);					m_text.styleSheet = style;//alertDialog( "end css");						// インプットボタン			m_inputBtn = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_INPUT, 10)));			m_inputBtn.x = w - m_inputBtn.width - m_scroll.width;						// インプットテキスト			m_inputText = TextField( addChild( new TextField()));			m_inputText.multiline = false;			m_inputText.wordWrap = true;			m_inputText.type = "input";			m_inputText.selectable = true;			m_inputText.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0x000000);			m_inputText.width = w - PAD - m_inputBtn.width - PAD;			m_inputText.height = INPUT_H - PAD * 2;			m_inputText.x = PAD;			m_inputText.y = PAD;			m_inputText.border = m_inputText.background = true;			m_inputText.borderColor = 0xd9d9d9;			m_inputText.backgroundColor = 0xffffff;						m_inputBtn.y = m_inputText.y + ( m_inputText.height - m_inputBtn.height) / 2;									// ライン			m_line = addChild( new Shape()) as Shape;			m_line.graphics.lineStyle( 1, 0xd9d9d9, 1, false, "none");			m_line.graphics.lineTo( 1, 0);			m_line.x = m_inputText.x;			m_line.y = m_inputText.y + m_inputText.height + PAD;						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					// スクロールバーを一番上の状態に。					m_container.y = INIT_Y;					m_scroll.setBarYMin();				});		}				public function resetNetStream() {			//m_text.htmlText = "";		}				// SharedObjectの値変更イベントから呼ばれる		function changeHtmlText( htmlText:String) {			if( m_text.htmlText == htmlText) {				return;			}			m_text.htmlText = htmlText;			m_text.height = m_text.textHeight + 8;						// スクロールバーを一番上の状態に。			m_container.y = INIT_Y;			m_scroll.setBarYMin();			m_scroll.update();					}				// LiveStatusManagerから呼ばれる。		// ここではSharedObjectの値を変更するだけ。		public function addLog( comment:String) {			if( comment == "") return;						if( so==null) {				alertDialog( Main.LANG.getParam( "通信エラーにより、ログを書き込みできません"));				return;			}									if( Main.CONF.getParam( 'GETTIME_URL') != LoadConf.NOTFOUND) {				var loader:URLLoader = new URLLoader();				loader.addEventListener( Event.COMPLETE, function( e:*) {										var commonDate:Date = new Date( String( loader.data));										writeLog( commonDate, comment);//Main.addDebugMsg(Main.CONF.getParam( 'GETTIME_URL') + "よりUNIX時間("+ loader.data +")を取得し、次のログを書き込みました: " + comment);										});				loader.load( new URLRequest( Main.CONF.getParam( 'GETTIME_URL')));			} else {//Main.addDebugMsg("ローカルタイムより日時を取得し、次のログを書き込みました: " + comment);								writeLog( new Date(), comment);			}					}				function writeLog( date:Date, comment:String) {			var hour:String = date.getHours() < 10 ? "0" + String( date.getHours()) : String( date.getHours());			var min:String = date.getMinutes() < 10 ? "0" + String( date.getMinutes()) : String( date.getMinutes());			var htmlText:String = "<p>" + hour + ":" + min + " " + comment + "</p>";						var newHtmlText:String = htmlText + (so.data.hasOwnProperty( m_postUid) ? so.data[ m_postUid] : "");			so.setProperty( m_postUid, newHtmlText);//trace("chatCon:", newHtmlText);			//saveDB( htmlText);		}				public function initSo( objname:String, nc:NetConnection) : void {			if( so == null) {				so = SharedObject.getRemote( objname, nc.uri, true);				so.addEventListener( SyncEvent.SYNC, onSync);			}			so.connect( nc);		}				protected function onSync( e:SyncEvent):void {			if( !so.data.hasOwnProperty( m_postUid)) return;			if( String( so.data[ m_postUid]) == "") return;						for each( var obj in e.changeList) {//alertDialog( obj.code + " " + obj.name);				if( ( obj.code == "success" || obj.code == "change") && obj.name == m_postUid) {										changeHtmlText( so.data[ m_postUid]);									}			}		}				public function getPostUid() : String { return m_postUid;}				//SharedObjectの値を変更し、DBにも追記（m_textの内容はここでは変えない）		function onBtnClick( e:MouseEvent):void {			if( m_inputText.text.length==0) return;			if( so==null) {				alertDialog( Main.LANG.getParam( "通信エラーにより、書き込みを反映できません"));				m_inputText.text = "";				return;			}			var path:String = Main.CONF.getParam( "SAVECHAT_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SAVECHAT_URL"));				m_inputText.text = "";				return;			}						// 入力文字をhtmlテキストにしたときに自動的に付与されるタグを除去			var inputHtml = m_inputText.htmlText;			var myPattern0:RegExp = /<("[^"]*"|'[^']*'|[^'">])*>/g;			if( inputHtml.match( myPattern0) ){				inputHtml = inputHtml.replace( myPattern0, "");			}						// 入力文字の中にURLが含まれていた場合はリンクをつける			//var inputHtml = m_inputText.htmlText;			var myPattern:RegExp = /(https?|ftp)(:\/\/[^\s　\n]+)/;			if( inputHtml.match( myPattern) ){				inputHtml = inputHtml.replace( myPattern, "<a href='$1$2' target='_blank'>$1$2</a>");			}												if( Main.CONF.getParam( 'GETTIME_URL') != LoadConf.NOTFOUND) {				var loader:URLLoader = new URLLoader();				loader.addEventListener( Event.COMPLETE, function( e:*) {										//var second:Number = Number( loader.data);										var commonDate:Date = new Date( String( loader.data));										//commonDate.setDate( milisecond);										writeMyComment( commonDate, inputHtml);Main.addDebugMsg("GETTIME_URLより日時取得: [" + loader.data +"] from [" +Main.CONF.getParam( 'GETTIME_URL')+"]");										});				loader.load( new URLRequest( Main.CONF.getParam( 'GETTIME_URL')));			} else {				writeMyComment( new Date(), inputHtml);							}		}				function writeMyComment( dt:Date, inputHtml:String) {//Main.addDebugMsg("writeMyComment by " + m_postUid + ": " + inputHtml);			var month = Number( dt.month + 1) > 9 ? String( dt.month + 1) : "0" + String( dt.month + 1);			var date = Number( dt.date) > 9 ? String( dt.date) : "0" + String( dt.date);			var hours = Number( dt.hours) > 9 ? String( dt.hours) : "0" + String( dt.hours);			var minutes = Number( dt.minutes) > 9 ? String( dt.minutes) : "0" + String( dt.minutes);			var sec = Number( dt.seconds) > 9 ? String( dt.seconds) : "0" +String(  dt.seconds);			var className:String = Main.CONF.isPro( Main.CONF.UID_ORG) ? "lec" : "stu";			var mobile:String = Main.CONF.TERMINAL == Main.TERMINAL_ANDROID ? " ["+Main.LANG.getParam( "携帯")+"]" : "";			var htmlText:String;			var dateHtml:String = "<span class='date'>"+ String(dt.fullYear)+"/"+month+"/"+date+" </span>";			var unixtime:String = "<span class='unixtime'>"+String(dt.time)+"</span>";			if( Main.CONF.isPro( Main.CONF.UID)) {				htmlText = unixtime+dateHtml+"<p>"+String(hours)+":"+String(minutes) + " " +Main.CONF.getName( Main.CONF.UID_ORG)+mobile+"</p>";			} else {				htmlText = unixtime+dateHtml+"<p>"+String(hours)+":"+String(minutes) +mobile+"</p>";			}			htmlText += "<p class='"+className + "'>"+inputHtml +"</p>";			htmlText = "<div class='set " + Main.CONF.UID + "'>" + htmlText + "</div>";						var str:String = htmlText + ( so.data.hasOwnProperty( m_postUid) ? so.data[ m_postUid] : "");			//trace("chatCon:", newHtmlText);			// DBに追記			//saveDB( htmlText);			saveChat( htmlText, "chat_append");						//COMMENT_MAX以上のコメントを消しちゃう			var lines:Array = str.split( "</p>");			lines.pop();			if( lines.length <= COMMENT_MAX) {				so.setProperty( m_postUid, str);			} else {				var i;				var new_str = "";				for( i=lines.length-COMMENT_MAX; i< lines.length; i++) {					new_str += lines[i] + "</p>";				}				so.setProperty( m_postUid, new_str);			}						m_inputText.htmlText = "";		}		function saveChat( saveText:String, md:String) {			var req:URLRequest = new URLRequest( Main.CONF.getParam("SAVECHAT_URL"));			req.method = URLRequestMethod.POST;			var urlVar:URLVariables = new URLVariables();			var ldr:URLLoader = new URLLoader();			urlVar.mode = md;			urlVar.text = saveText;			req.data = urlVar;			ldr.load( req);		}		/*		function saveDB( htmlText:String) {			var path:String = Main.CONF.getParam( "SAVETEXT_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getReplacedSentence( "%sが設定されていないためDBに保存できませんでした", "SAVETEXT_URL"));				return;			}			var req:URLRequest = new URLRequest( path);			req.method = URLRequestMethod.POST;			var variables:URLVariables = new URLVariables();			variables.mode = m_postMode;			variables.class_id = Main.CONF.CLASS_ID;			variables.uid = m_postUid;			variables.text = htmlText;			req.data = variables;			//if( Main.DEBUG) navigateToURL( req, "_blank");						var loader:URLLoader = new URLLoader();			loader.load( req);			loader.addEventListener( IOErrorEvent.IO_ERROR, function ( e:*) {				alertDialog( "saveDB() IO_ERROR");			});			loader.addEventListener( SecurityErrorEvent.SECURITY_ERROR, function ( e:*) {				alertDialog( "saveDB() SECURITY_ERROR");			});								}*/				function KeyDown( e:KeyboardEvent){			if( e.keyCode == Keyboard.ENTER){				onBtnClick( new MouseEvent( "dummy"));			}		}						override public function setEnabled( b:Boolean):void {			if( b) {				// メッセージ[書き込み]ボタンクリックイベント				m_inputBtn.addEventListener( MouseEvent.MOUSE_DOWN, onBtnClick);				m_inputText.addEventListener( KeyboardEvent.KEY_DOWN, KeyDown);			} else {				m_inputBtn.removeEventListener( MouseEvent.MOUSE_DOWN, onBtnClick);				m_inputText.removeEventListener( KeyboardEvent.KEY_DOWN, KeyDown);			}		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						m_containerMask.width = w - m_scroll.width;			m_scroll.x = w - m_scroll.width;								m_text.width = w - PAD * 2 - m_scroll.width;			m_inputBtn.x = w - m_inputBtn.width - m_scroll.width;			m_inputText.width = w - m_scroll.width - PAD - m_inputBtn.width - PAD;			m_line.scaleX = m_inputText.width + m_inputBtn.width + PAD;						m_text.height = m_text.textHeight + 8;						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW ) {				m_preW = w;				m_scroll.update();			}					}				override public function setViewHeight( h:Number):void {			if( h < MIN_H) h = MIN_H;			super.setViewHeight( h);			m_containerMask.height = h - INIT_Y - PAD * 2;			//ExternalInterface.call( "flashFunc_title", "ChatCon:setViewHeight(" + h + ")");//Main.addDebugMsg("ChatCon:setViewHeight(" + h + ")");						m_text.height = m_text.textHeight + 8;						// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( h != m_preH ) {				m_preH = h;				m_scroll.setSize( m_scroll.width, h - INIT_Y - SCROLL_PAD_BOTTOM);				m_scroll.update();			}		}				function alertDialog( str) {			Main.addErrMsg( "ChatContainer:" + String( str));		}	}}