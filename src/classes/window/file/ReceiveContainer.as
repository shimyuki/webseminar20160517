package window.file {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import partition.Layout;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import fl.controls.DataGrid; 	import fl.data.DataProvider;	import fl.events.*;		import org.coderepos.text.encoding.Jcode;	import flash.utils.ByteArray;	// 受信ファイル一覧	public class ReceiveContainer extends ResizableContainer {		private var _MIN_W = 200;		private var _MIN_H = 200;		private const BTN_H = 25;		private const PAD = 15;		private const LABEL_DEL = Main.LANG.getParam( "削除");		private var m_dgrid:DataGrid;		private var m_btnDelete:DynamicTextBtn;		private var m_dgStatus:TextField;		private var so:SharedObject = null;				public function ReceiveContainer( w:Number, h:Number) {			super( w, h, _MIN_W, _MIN_H); // min_w は後で設定し直すのでとりあえずゼロ						m_dgrid = DataGrid( addChild( new DataGrid()));			m_dgrid.x = PAD;			m_dgrid.y = PAD;			m_dgrid.width = w + PAD * 2;			m_dgrid.height = h - BTN_H - PAD * 3;						/*			m_btnDelete = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_DEL)));			m_btnDelete.x = w - m_btnDelete.width;			m_btnDelete.y = h - m_btnDelete.height;			m_btnDelete.addEventListener( MouseEvent.CLICK, onClickDelete);			*/						// データグリッドステータステキスト			m_dgStatus = TextField( addChild( new TextField()));			m_dgStatus.x = m_dgrid.x;			m_dgStatus.y = m_dgrid.y + m_dgrid.height + 5;			m_dgStatus.selectable = m_dgStatus.mouseEnabled = false;			m_dgStatus.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0xcc0000);			m_dgStatus.width = m_dgrid.width - 55;						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					setDgrid();				});		}				public function initSo( objname:String, nc:NetConnection) : void {						if( so == null) {				so = SharedObject.getRemote( objname, nc.uri, false);			}			so.addEventListener( SyncEvent.SYNC, onSync_1st);			so.connect( nc);					}				function onSync_1st ( e:SyncEvent):void {			so.removeEventListener( SyncEvent.SYNC, onSync_1st);			so.addEventListener( SyncEvent.SYNC, onSync);		}		function onSync ( e:SyncEvent):void {			// 更新する			setDgrid();			/*			if( so.data.toIdArr != undefined && so.data.fromId != undefined) {				var b_receive:Boolean = false;				for each( var toId in so.data.toIdArr) {					if( toId == Main.CONF.UID) b_receive = true;				}				if( b_receive) {					// 更新する					setDgrid();					Main.HEADER_CON.showInfo( Main.LANG.getReplacedSentence( "%sさんからファイルが届きました", Main.CONF.getName( so.data.fromId)));					Main.HEADER_CON.startBlink( Layout.WINNAME_RECEIVE);				}			}*/		}		//データグリッドの表示		function setDgrid():void{			var path:String = Main.CONF.getParam( "FLIST_URL");			if( path == LoadConf.NOTFOUND) {				m_dgStatus.text = Main.LANG.getParam( "FLIST_URLが設定されていないためファイル一覧を取得できませんでした");				return;			}			var req:URLRequest = new URLRequest( path);			var urlVar:URLVariables = new URLVariables();			var ldr:URLLoader = new URLLoader();						req.method = URLRequestMethod.POST;			urlVar.do_mode = "flist"; // ダミー			urlVar.class_id = Main.CONF.CLASS_ID;						/*			urlVar.to_id = Main.CONF.UID; // 自分宛			// 送信もとは、可能性として全員としておく			var memberArr:Array = Main.CONF.getMemberArr();			var i:uint = 0;			for each( var member:Member in memberArr) {				urlVar["from_id_arr["+String( i)+"]"] = member.uid;				i++;			}			*/			req.data = urlVar;					ldr.addEventListener( Event.COMPLETE, onLoadFileList);			ldr.addEventListener( "ioError", function(e:*){ m_dgStatus.text = "ioError"});			ldr.addEventListener( "securityError", function(e:*){ m_dgStatus.text = "securityError"});//if( Main.DEBUG) navigateToURL( req, "_blank");						try {				ldr.load( req);			} catch( e:Error){				m_dgStatus.text = Main.LANG.getParam( "ファイル一覧取得時エラー");			}					}		function onLoadFileList ( e:Event) {			var ldr:URLLoader = URLLoader ( e.target);			var aryDp:Array = new Array();			//alertDialog( ldr.data);			if( ldr.data !="") {				var flistXml:XML = new XML(XML(ldr.data));				for each( var ite in flistXml.file){					// 送信者が自分だった場合は表示しない					//if( ite.from_id == Main.CONF.UID) continue;					var from_name = Main.CONF.getName( ite.from_id);					//aryDp.push({ファイル名:ite.fname, 送信者:from_name, 送信者UID:ite.from_id, 日付:ite.ftime, サイズ:ite.fsize});					var obj:Object= new Object();					obj[ Main.LANG.getParam( "名前")] = ite.fname;					obj[ Main.LANG.getParam( "送信者")] = from_name;					obj[ "from_UID"] = ite.from_id;					obj[ Main.LANG.getParam( "日付")] = ite.ftime;					obj[ Main.LANG.getParam( "サイズ")] = ite.fsize;					aryDp.push( obj);				}				m_dgrid.dataProvider = new DataProvider(aryDp); 				//m_dgrid.columns = [ "ファイル名", "送信者", "日付", "サイズ［KB］"];				m_dgrid.columns = [ Main.LANG.getParam( "名前"), Main.LANG.getParam( "送信者"), Main.LANG.getParam( "日付")];				//alertDialog( "kook");				// ダブルクリックイベント(ダウンロード)				m_dgrid.doubleClickEnabled = true;				m_dgrid.addEventListener( ListEvent.ITEM_DOUBLE_CLICK , onDoubleClick);				function onDoubleClick( e:ListEvent):void {					if( !m_dgrid.mouseEnabled) return;					m_dgStatus.text = "";					doDload( e.currentTarget.selectedItem[ Main.LANG.getParam( "名前")], e.currentTarget.selectedItem[ "from_UID"]);				}							} else {				m_dgStatus.text = "";//"受信ファイルはありません";				//m_dgrid.dataProvider = null;				m_dgrid.removeAll();				m_dgrid.removeAllColumns();				m_dgrid.columns = [ Main.LANG.getParam( "名前"), Main.LANG.getParam( "送信者")];			}//alertDialog( "end");		}		//ダウンロード処理		function doDload( str:String, from_id:String):void {			var up_path:String = Main.CONF.getParam( "UPLOAD_URL");			if( up_path == LoadConf.NOTFOUND) {				m_dgStatus.text = Main.LANG.getParam( "UPLOAD_URLが設定されていないためダウンロードできませんでした");				return;			}			var dl_path:String = Main.CONF.getParam( "DOWNLOAD_URL");			if( dl_path == LoadConf.NOTFOUND) {				m_dgStatus.text = Main.LANG.getParam( "DOWNLOAD_URLが設定されていないためダウンロードできませんでした");				return;			}									var req:URLRequest = new URLRequest();			req.method = URLRequestMethod.POST;			var urlVar:URLVariables = new URLVariables();			var fr:FileReference = new FileReference();				//======Atacch以下は直接参照できないためtmpに対象ファイルを一旦退避====			urlVar.do_mode = "dl";			urlVar.class_id = Main.CONF.CLASS_ID;			urlVar.to_id = Main.CONF.UID;			urlVar.from_id = from_id;			urlVar.dl_fnam = str;			req.data = urlVar;			req.url = up_path;//アップロードプログラムで退避処理も併用			sendToURL( req);//if( Main.DEBUG) navigateToURL( req, "_blank");		//====================						fr.addEventListener( IOErrorEvent.IO_ERROR, onIOError);			function onIOError( e:IOErrorEvent):void {				m_dgStatus.text = e.text;			}			fr.addEventListener( Event.COMPLETE, onComplete);			function onComplete( e:Event):void {				m_dgStatus.text = Main.LANG.getParam( "ファイル受信完了");			}						/*			var bytes:ByteArray = new ByteArray();			bytes.writeUTFBytes( str);			var sjisBytes:ByteArray = Jcode.utf8_sjis( bytes);			req.url = dl_path + Main.CONF.CLASS_ID + "/" + sjisBytes;			*/			req.url = dl_path + Main.CONF.CLASS_ID + "/" + str;			//req.url = dl_path + Main.CONF.CLASS_ID + "/" + Main.CONF.UID + "/" + from_id + "/" + str;			fr.download( req, str);					}				override public function setEnabled( b:Boolean):void {		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						m_dgrid.width = w - PAD * 2;			m_dgStatus.width = w - PAD * 2;					}				override public function setViewHeight( h:Number):void {			if( h < MIN_H) h = MIN_H;			super.setViewHeight( h);						m_dgrid.height = h - BTN_H - PAD * 3;			m_dgStatus.y = m_dgrid.y + m_dgrid.height + 5;		}				function alertDialog( str:String) {			Main.addErrMsg( "ReceiveContainer:" + str);		}	}}