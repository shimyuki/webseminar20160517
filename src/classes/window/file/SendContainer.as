package window.file {	import flash.display.*;	import flash.geom.*;	import common.*;	import window.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import fl.controls.CheckBox;	import fl.events.*;	// ファイル送信	public class SendContainer extends ResizableContainer {		private var _MIN_W = 200;		private var _MIN_H = 100;		private const LABEL_SELECT_TO:String = Main.LANG.getParam( "送信先");		private const NO_SELECT_TO:String = Main.LANG.getParam( "※ 送信先は講師のみになります。");		private const LABEL_SEND_TO_ALL:String = Main.LANG.getParam( "全員");		private const LABEL_SELECT_FILE:String = Main.LANG.getParam( "ファイルを選択");		private const NO_SELECTED:String = Main.LANG.getParam( "ファイルが選択されていません");		private const LABEL_SEND:String = Main.LANG.getParam( "   送信する   ");		private const INIT_Y = 50;		private const PAD = 8;		private var FOOTER_H = 15; // 送信ボタン領域の高さ		private var m_container:Sprite;		private var m_containerMask:Sprite;		private var m_scroll:SimpleScrollBar;		private var m_preW:Number = 0;		private var m_preH:Number = 0;				private var m_sendBtn:DynamicTextBtn;		private var m_selectBtn:DynamicTextBtn;		private var m_filename:TextField;		private var m_fr:FileReference;		private var m_fileStatus:TextField;		private var m_rcvCon:ReceiveContainer = null;				private var m_chkbox_all:CheckBox = null;				private var m_toIdArr:Array = null; // ファイル送信完了後、soに登録する用の宛先ID配列		private var so:SharedObject = null;				public function SendContainer( w:Number, h:Number) {//alertDialog( "start ChatContainer");						super( w, h, _MIN_W, _MIN_H); // min_w は後で設定し直すのでとりあえずゼロ						// 一覧表示コンテナ			m_container = Sprite( addChild( new Sprite()));			m_container.y = INIT_Y;						// 一覧表示コンテナのマスク			m_containerMask = Sprite( addChild( new Sprite()));			m_containerMask.graphics.beginFill(0);			m_containerMask.graphics.drawRect( 0, 0, 1, 1);			m_containerMask.y = m_container.y;			m_container.mask = m_containerMask;						// 一覧表示コンテナのスクロールバー			m_scroll = addChild( new SimpleScrollBar()) as SimpleScrollBar;			m_scroll.y = INIT_Y + 15;			m_scroll.setSize( m_scroll.width, 200);						m_scroll.setScrollTarget( m_container);			m_scroll.scrollMask = m_containerMask;			m_scroll.visible = false;						/*			// 送信先一覧			var lab:TextField = TextField( m_container.addChild( new TextField()));			lab.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 14, 0x000000);			lab.text = LABEL_SELECT_TO;			lab.autoSize = TextFieldAutoSize.LEFT;			lab.x = lab.y = PAD;			*/						// ファイルステータステキスト			m_fileStatus = TextField( m_container.addChild( new TextField()));			m_fileStatus.selectable = m_fileStatus.mouseEnabled = false;			m_fileStatus.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 10, 0xcc0000);			m_fileStatus.autoSize = TextFieldAutoSize.LEFT;			m_fileStatus.x = PAD;			m_fileStatus.y = 0;						// 送信先の設定			if( Main.CONF.isPro( Main.CONF.UID)) {				// 講師の場合				// 全員に送信できる				/*							// 全員一括チェック用				m_chkbox_all = CheckBox( m_container.addChild( new CheckBox()));				m_chkbox_all.label = LABEL_SEND_TO_ALL;				m_chkbox_all.textField.width = m_chkbox_all.textField.textWidth + 8;				m_chkbox_all.x = lab.x + PAD;				m_chkbox_all.y = lab.y + lab.height + PAD;				m_chkbox_all.selected = true;				m_chkbox_all.addEventListener( Event.CHANGE, onChangeAllChk);					var posi_y:Number = m_chkbox_all.y + m_chkbox_all.height + PAD;				var memberArr:Array = Main.CONF.getMemberArr();				for each( var member:Member in memberArr) {					if( Main.CONF.isPro( member.uid)) continue;					var chkbox:CheckBox = CheckBox( m_container.addChild( new CheckBox()));					chkbox.name = member.uid;					chkbox.label = Main.CONF.getName( member.uid) ? Main.CONF.getName( member.uid) : member.uid;					chkbox.textField.width = chkbox.textField.textWidth + 8;					chkbox.x = lab.x + PAD;					chkbox.y = posi_y;					chkbox.selected = true;					chkbox.addEventListener( Event.CHANGE, onChangeStuChk);					posi_y += chkbox.height;				}				*/			} else {				// 受講生の場合				/*				// 講師にのみ送信できる				var chkbox_pro:CheckBox = CheckBox( m_container.addChild( new CheckBox()));				chkbox_pro.name = Main.CONF.getProId();				chkbox_pro.label = Main.CONF.getName( Main.CONF.getProId());				chkbox_pro.textField.width = chkbox_pro.textField.textWidth + 8;				chkbox_pro.x = lab.x + PAD;				chkbox_pro.y = lab.y + lab.height + PAD;				chkbox_pro.selected = true;				chkbox_pro.enabled = false;												var note:TextField = TextField( m_container.addChild( new TextField()));				note.defaultTextFormat = new TextFormat( Main.CONF.getMainFont(), 11, 0x000000);				note.text = NO_SELECT_TO;				note.autoSize = TextFieldAutoSize.LEFT;				note.x = chkbox_pro.x;				note.y = chkbox_pro.y + chkbox_pro.height + PAD;				*/			}				// 選択ボタン			m_selectBtn = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_SELECT_FILE, 10)));			m_selectBtn.setEnabled( true);			m_selectBtn.addEventListener( MouseEvent.CLICK, onClick_select);			m_selectBtn.x = PAD;						// 選択ファイル名			m_filename = TextField( addChild( new TextField()));			var fmt:TextFormat = new TextFormat( Main.CONF.getMainFont(), 11);			m_filename.defaultTextFormat = fmt;			m_filename.text = NO_SELECTED;			m_filename.x = m_selectBtn.x + m_selectBtn.width + PAD;			m_filename.height = m_filename.textHeight + 4;						// 送信ボタン			m_sendBtn = DynamicTextBtn( addChild( new DynamicTextBtn( LABEL_SEND, 10)));			m_sendBtn.setEnabled( false);						m_sendBtn.y = m_selectBtn.y = ( INIT_Y - m_sendBtn.height) / 2;			m_filename.y = m_sendBtn.y + ( m_sendBtn.height - m_filename.height) / 2;						addEventListener( Event.ADDED_TO_STAGE,				function( e:Event) {					// ポップアップとの切り替え時など。					// スクロールバーを一番上の状態に。					m_container.y = INIT_Y;					m_scroll.setBarYMin();										// ファイル未選択の状態に戻す					if( m_filename) m_filename.text = NO_SELECTED;					if( m_sendBtn) m_sendBtn.setEnabled( false);				});						m_fr = new FileReference();			m_fr.addEventListener( Event.SELECT, onSelect);			m_fr.addEventListener( Event.OPEN, onOpen);			m_fr.addEventListener( ProgressEvent.PROGRESS, onProgress);			m_fr.addEventListener( DataEvent.UPLOAD_COMPLETE_DATA, fileUploadResultHandler);			m_fr.addEventListener( IOErrorEvent.IO_ERROR, ioErrorHandler);			m_fr.addEventListener( SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);		}		public function setRcvCon( rcvCon:ReceiveContainer) {			m_rcvCon = rcvCon;			m_container.addChild( m_rcvCon);			m_rcvCon.y = m_fileStatus.y + 30;		}		//アップロードファイル[参照]ボタンクリックイベント		function onClick_select( e:MouseEvent):void {			m_fileStatus.text = "";					m_fr.browse();					//ファイル[送信]ボタンクリックイベント			m_sendBtn.addEventListener( MouseEvent.CLICK, onClick_send);		}		function onClick_send( e:MouseEvent):void {			m_sendBtn.setEnabled( false);			if( m_filename.text == "" || m_filename.text == NO_SELECTED) return;			var path:String = Main.CONF.getParam( "UPLOAD_URL");			if( path == LoadConf.NOTFOUND) {				alertDialog( Main.LANG.getParam( "UPLOAD_URLが設定されていないためファイルを送信できませんでした"));				return;			}			m_selectBtn.setEnabled( false);						if( m_toIdArr == null) {				m_toIdArr = new Array();			} else {				while( m_toIdArr.length) m_toIdArr.pop();			}			var urlVar:URLVariables = new URLVariables();			var req:URLRequest = new URLRequest( path);			req.method = URLRequestMethod.POST;				urlVar.do_mode = "up";			urlVar.class_id = Main.CONF.CLASS_ID;			urlVar.from_id = Main.CONF.UID;			/*			var to_cnt:uint = 0;			for( var i:uint = 0; i < m_container.numChildren; i++) {				var chkBox:CheckBox = m_container.getChildAt( i) as CheckBox;				if( chkBox == null || chkBox == m_chkbox_all) continue;				if( chkBox.selected) {					urlVar["to_id_arr["+String( to_cnt)+"]"] = chkBox.name;					m_toIdArr.push( chkBox.name);					to_cnt++;				}			}			*/									req.data = urlVar;			m_fr.upload( req);//if( Main.DEBUG) navigateToURL( req, "_blank");						m_sendBtn.removeEventListener( MouseEvent.MOUSE_DOWN, onClick_send);		}		function onOpen( e:Event):void {			m_fileStatus.text = Main.LANG.getParam( "ファイル送信開始");		}		function onSelect( e:Event):void {			m_filename.text = e.target.name;			m_sendBtn.setEnabled( true);		}		function onProgress(e:ProgressEvent):void		{			// アップロードのプログレスバー表示とかするときに			m_fileStatus.text = Main.LANG.getParam( "ファイル送信中…") + String( Math.floor( e.bytesLoaded / e.bytesTotal * 100)) + "%";		}		function fileUploadResultHandler(e:DataEvent):void		{			// fileUploadedHandler のあとに、サーバースクリプトを経て帰ってくるデータ			// サーバー側は必ず何か文字列でも XML でも何か返さなければならない			m_filename.text = "";			m_fileStatus.text = Main.LANG.getParam( e.data);			m_selectBtn.setEnabled( true);						if( so != null) {				var date:Date = new Date();				so.setProperty( "date", date.toString());				/*				so.data.toIdArr = m_toIdArr;				so.setProperty( "fromId", Main.CONF.UID);				so.setDirty( "toIdArr");				*/			}		}		function ioErrorHandler(event:IOErrorEvent):void		{			// サーバーサイドスクリプトに Flash が到達できない場合			m_filename.text = "";			m_fileStatus.text = "IO ERROR:" + Main.LANG.getParam( "送信失敗");			m_selectBtn.setEnabled( true);		}		function securityErrorHandler(event:SecurityErrorEvent):void		{			// セキュリティ的なエラーが出た場合			m_filename.text = "";			m_fileStatus.text = "SECURITY ERROR:" + Main.LANG.getParam( "送信失敗");			m_selectBtn.setEnabled( true);		}						function onChangeAllChk( e:Event) {			// 全部のチェックボックスの値をm_chkbox_allの状態に合わせる			for( var i = 0; i < m_container.numChildren; i++) {				var chkBox:CheckBox = m_container.getChildAt( i) as CheckBox;				if( chkBox == null || chkBox == m_chkbox_all) continue;				chkBox.selected = m_chkbox_all.selected;			}		}		function onChangeStuChk( e:Event) {			// 誰かのチェックボックスが変わったとき			var b_allSelected:Boolean = true;			for( var i = 0; i < m_container.numChildren; i++) {				var chkBox:CheckBox = m_container.getChildAt( i) as CheckBox;				if( chkBox == null || chkBox == m_chkbox_all) continue;				if( ! chkBox.selected) b_allSelected = false;			}			m_chkbox_all.selected = b_allSelected;		}				public function initSo( objname:String, nc:NetConnection) : void {			if( so == null) so = SharedObject.getRemote( objname, nc.uri, false);			so.connect( nc);		}				override public function setEnabled( b:Boolean):void {			if( b) {				if( m_sendBtn) m_sendBtn.addEventListener( MouseEvent.MOUSE_DOWN, onClick_send);			} else {				if( m_sendBtn) m_sendBtn.removeEventListener( MouseEvent.MOUSE_DOWN, onClick_send);				if( m_selectBtn) m_selectBtn.removeEventListener( MouseEvent.MOUSE_DOWN, onClick_select);			}			if( m_selectBtn) m_selectBtn.setEnabled( b);			m_sendBtn.setEnabled( false);		}		override public function setViewWidth( w:Number, debug:String = ""):void {			if( w < MIN_W) w = MIN_W;			super.setViewWidth( w);						m_containerMask.width = w - m_scroll.width;			m_scroll.x = w - m_scroll.width;					m_sendBtn.x = w - m_sendBtn.width - m_scroll.width;			m_filename.width = w - ( m_selectBtn.width +  m_sendBtn.width + m_scroll.width + PAD * 3);						if( m_rcvCon) m_rcvCon.setViewWidth( w - m_scroll.width - PAD);									// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( w != m_preW ) {				m_preW = w;				m_scroll.update();			}					}				override public function setViewHeight( h:Number):void {			super.setViewHeight( h);			m_containerMask.height = h - INIT_Y - FOOTER_H - PAD * 2;						//m_sendBtn.y = m_selectBtn.y = h - PAD - m_sendBtn.height;			//m_filename.y = m_sendBtn.y + ( m_sendBtn.height - m_filename.height) / 2;									//m_line.y = h - FOOTER_H;						if( m_rcvCon) m_rcvCon.setViewHeight( m_containerMask.height - m_rcvCon.y);									// なんどもスクロールのupdate()を呼ぶと何故かちょっとずつずれてしまうので、			// サイズがかわらないのであればここでリターン			if( h != m_preH ) {				m_preH = h;				m_scroll.setSize( m_scroll.width, h - INIT_Y - FOOTER_H - PAD * 2);				m_scroll.update();			}		}				function alertDialog( str:String) {			Main.addErrMsg( "SendContainer:" + str);		}	}}